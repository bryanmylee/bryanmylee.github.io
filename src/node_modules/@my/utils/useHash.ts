import { writable } from 'svelte/store';

type Updater<T> = (toUpdate: T) => T;

const isClient = () => typeof window !== 'undefined';

export function useHash() {
  if (!isClient()) return writable('');

  const { pathname } = window.location;
  const hash = writable(window.location.hash.slice(1));

  const handleHashChange = () => {
    set(window.location.hash.slice(1));
  };

  const subscribe: typeof hash.subscribe = (run, invalidate?) => {
    const unsubscribe = hash.subscribe(run, invalidate);
    return () => {
      unsubscribe();
      window.removeEventListener('hashchange', handleHashChange);
    }
  };

  const update = (fn: Updater<string>) => {
    hash.update($hash => {
      const newHash = fn($hash);
      history.replaceState(history.state, null, `${pathname}#${newHash}`);
      return newHash;
    });
  };

  const set = (newHash: string) => update(() => newHash);

  window.addEventListener('hashchange', handleHashChange);

  return {
    subscribe,
    update,
    set,
  };
}

