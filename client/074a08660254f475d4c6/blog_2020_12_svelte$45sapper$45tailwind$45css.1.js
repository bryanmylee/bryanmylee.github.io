(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{27:function(e,t,c){"use strict";c.r(t),c.d(t,"META",(function(){return b}));var s=c(0);function a(e){let t,c,a,b,m,y,f,v,S,q,w,C,E,I,z,P,x,X,T,D,k,_,A,F,W,H,N,M,J,V,$,R,B,G,K,L,Q,U,Y,Z,ee,te,ce,se,ae,be,je,oe,ne,Oe,le,re,pe,ie,de,ge,he,ue,me,ye,fe,ve,Se,qe,we,Ce,Ee,Ie,ze,Pe,xe,Xe,Te,De,ke,_e,Ae,Fe,We,He,Ne,Me,Je,Ve,$e,Re,Be,Ge,Ke,Le,Qe,Ue,Ye,Ze,et,tt,ct,st,at,bt,jt,ot,nt,Ot,lt,rt,pt,it,dt,gt,ht,ut,mt,yt,ft,vt,St,qt,wt,Ct,Et,It,zt,Pt,xt,Xt,Tt,Dt,kt,_t,At,Ft,Wt,Ht,Nt,Mt,Jt,Vt,$t,Rt,Bt,Gt,Kt,Lt,Qt,Ut,Yt,Zt,ec,tc,cc,sc,ac,bc,jc,oc,nc,Oc,lc,rc,pc,ic,dc,gc,hc,uc,mc,yc,fc,vc,Sc,qc,wc,Cc,Ec,Ic,zc,Pc,xc,Xc,Tc,Dc,kc,_c,Ac,Fc,Wc,Hc,Nc,Mc,Jc,Vc,$c,Rc,Bc,Gc,Kc,Lc,Qc,Uc,Yc,Zc,es,ts,cs,ss,as,bs,js,os,ns,Os,ls,rs,ps,is,ds,gs,hs;return{c(){t=Object(s.z)("h2"),c=Object(s.ab)("Why Tailwind CSS?"),a=Object(s.X)(),b=Object(s.z)("h3"),m=Object(s.ab)("A constrained design system is a good thing"),y=Object(s.X)(),f=Object(s.z)("p"),v=Object(s.ab)("Although Svelte offers scoped CSS by default, Tailwind CSS is still useful as it offers a nicely constrained design system. As the number of components grows, it becomes increasingly difficult to keep all whitespacing, font-sizes, and colours consistent. Tailwind CSS solves these issues by providing sensible defaults for many CSS variables, and minimises the usage of magic numbers."),S=Object(s.X)(),q=Object(s.z)("h3"),w=Object(s.ab)("Styling custom components"),C=Object(s.X)(),E=Object(s.z)("p"),I=Object(s.ab)("In addition, Svelte does not support passing CSS classes into child components. For example, we cannot do this..."),z=Object(s.X)(),x=Object(s.X)(),X=Object(s.z)("p"),T=Object(s.ab)("... as the "),D=Object(s.z)("code"),k=Object(s.ab)(".margin-lg"),_=Object(s.ab)(" class is treated as an unused CSS class, and is purged in the compiled application."),A=Object(s.X)(),F=Object(s.z)("p"),W=Object(s.ab)("This makes it extremely difficult to design flexible components that depend on layout and more."),H=Object(s.X)(),N=Object(s.z)("p"),M=Object(s.ab)("Since Tailwind CSS classes are global by default and not purged by Svelte, we can use Tailwind to enable this functionality."),J=Object(s.X)(),$=Object(s.X)(),R=Object(s.z)("p"),B=Object(s.ab)("The "),G=Object(s.z)("code"),K=Object(s.ab)("div"),L=Object(s.ab)(" element in "),Q=Object(s.z)("code"),U=Object(s.ab)("ChildCard.svelte"),Y=Object(s.ab)(" will be built with the "),Z=Object(s.z)("code"),ee=Object(s.ab)("m-4"),te=Object(s.ab)(" class, which will inherit styles from Tailwind CSS."),ce=Object(s.X)(),se=Object(s.z)("h2"),ae=Object(s.ab)("Integrating Tailwind CSS"),be=Object(s.X)(),je=Object(s.z)("p"),oe=Object(s.ab)("To add Tailwind CSS to Svelte and Sapper, we first have to integrate PostCSS into Sapper's build step, as Tailwind CSS is a PostCSS plugin."),ne=Object(s.X)(),Oe=Object(s.z)("h3"),le=Object(s.ab)("Install dependencies"),re=Object(s.X)(),pe=Object(s.z)("p"),ie=Object(s.ab)("First, we have to install a few extra dependencies."),de=Object(s.X)(),he=Object(s.X)(),ue=Object(s.z)("p"),me=Object(s.z)("code"),ye=Object(s.ab)("postcss-load-config"),fe=Object(s.ab)(" allows us to automatically load the "),ve=Object(s.z)("code"),Se=Object(s.ab)("postcss.config.js"),qe=Object(s.ab)(" file in our project root if it exists, thus saving us some extra configuration required to integrate PostCSS into our build step."),we=Object(s.X)(),Ce=Object(s.z)("p"),Ee=Object(s.z)("code"),Ie=Object(s.ab)("postcss-cli"),ze=Object(s.ab)(" allows us to run PostCSS from the command line."),Pe=Object(s.X)(),xe=Object(s.z)("p"),Xe=Object(s.z)("code"),Te=Object(s.ab)("postcss-import"),De=Object(s.ab)(" and "),ke=Object(s.z)("code"),_e=Object(s.ab)("postcss-nested"),Ae=Object(s.ab)(" are additional quality-of-life plugins."),Fe=Object(s.X)(),We=Object(s.z)("p"),He=Object(s.z)("code"),Ne=Object(s.ab)("cssnano"),Me=Object(s.ab)(" minifies our CSS output."),Je=Object(s.X)(),Ve=Object(s.z)("p"),$e=Object(s.z)("code"),Re=Object(s.ab)("npm-run-all"),Be=Object(s.ab)(" is a tool to run multiple npm scripts in parallel."),Ge=Object(s.X)(),Ke=Object(s.z)("h3"),Le=Object(s.ab)("Initialise Tailwind CSS"),Qe=Object(s.X)(),Ue=Object(s.z)("p"),Ye=Object(s.ab)("Create the Tailwind configuration file with..."),Ze=Object(s.X)(),tt=Object(s.X)(),ct=Object(s.z)("p"),st=Object(s.ab)("We then have to include Svelte into the PurgeCSS block to ensure that Svelte styles are not removed."),at=Object(s.X)(),jt=Object(s.X)(),ot=Object(s.z)("p"),nt=Object(s.ab)("Instead of configuring "),Ot=Object(s.z)("code"),lt=Object(s.ab)("static/global.css"),rt=Object(s.ab)(" manually, we will set up PostCSS to transpile a source CSS file into a static CSS file to be used."),pt=Object(s.X)(),it=Object(s.z)("p"),dt=Object(s.ab)("Create an asset "),gt=Object(s.z)("code"),ht=Object(s.ab)("/src/assets/global.css"),ut=Object(s.ab)(", and import Tailwind CSS styles."),mt=Object(s.X)(),ft=Object(s.X)(),vt=Object(s.z)("h3"),St=Object(s.ab)("Configure PostCSS with "),qt=Object(s.z)("code"),wt=Object(s.ab)("svelte-preprocess"),Ct=Object(s.X)(),Et=Object(s.z)("p"),It=Object(s.ab)("In the root of our project, create "),zt=Object(s.z)("code"),Pt=Object(s.ab)("postcss.config.js"),xt=Object(s.ab)(", and load our PostCSS plugins."),Xt=Object(s.X)(),Dt=Object(s.X)(),kt=Object(s.z)("p"),_t=Object(s.z)("code"),At=Object(s.ab)("postcss-import"),Ft=Object(s.ab)(" and "),Wt=Object(s.z)("code"),Ht=Object(s.ab)("postcss-nested"),Nt=Object(s.ab)(" introduce some additional syntax that needs to be handled manually."),Mt=Object(s.X)(),Jt=Object(s.z)("p"),Vt=Object(s.ab)("To do so, we use "),$t=Object(s.z)("code"),Rt=Object(s.ab)("svelte-preprocess"),Bt=Object(s.ab)(". The preprocessor allows us to apply modifications to the code before it is passed into the Svelte engine."),Gt=Object(s.X)(),Kt=Object(s.z)("p"),Lt=Object(s.ab)("First, create our preprocessor options object under "),Qt=Object(s.z)("code"),Ut=Object(s.ab)("svelte.config.js"),Yt=Object(s.ab)("..."),Zt=Object(s.X)(),tc=Object(s.X)(),cc=Object(s.z)("p"),sc=Object(s.z)("code"),ac=Object(s.ab)("svelte.config.js"),bc=Object(s.ab)(" is used to configure our language server, such that the Svelte extension for VSCode and coc knows how to parse our source code and provide proper syntax highlighting and error messages."),jc=Object(s.X)(),oc=Object(s.z)("p"),nc=Object(s.ab)("To enable the preprocessor for the language server, simply export  a "),Oc=Object(s.z)("code"),lc=Object(s.ab)("preprocess"),rc=Object(s.ab)(" object from "),pc=Object(s.z)("code"),ic=Object(s.ab)("svelte.config.js"),dc=Object(s.ab)("."),gc=Object(s.X)(),uc=Object(s.X)(),mc=Object(s.z)("p"),yc=Object(s.ab)("We also export the options object, since we want to use the same configuration for our build step under "),fc=Object(s.z)("code"),vc=Object(s.ab)("rollup.config.js"),Sc=Object(s.ab)(" or "),qc=Object(s.z)("code"),wc=Object(s.ab)("webpack.config.js"),Cc=Object(s.ab)("."),Ec=Object(s.X)(),Ic=Object(s.z)("p"),zc=Object(s.ab)("For Rollup, add "),Pc=Object(s.z)("code"),xc=Object(s.ab)("preprocess"),Xc=Object(s.ab)(" to the "),Tc=Object(s.z)("code"),Dc=Object(s.ab)("svelte"),kc=Object(s.ab)(" object for both the client and server..."),_c=Object(s.X)(),Fc=Object(s.X)(),Wc=Object(s.z)("p"),Hc=Object(s.ab)("For Webpack, add "),Nc=Object(s.z)("code"),Mc=Object(s.ab)("preprocess"),Jc=Object(s.ab)(" to the "),Vc=Object(s.z)("code"),$c=Object(s.ab)("/\\\\.(svelte|html)$/"),Rc=Object(s.ab)(" rule for both the client and server..."),Bc=Object(s.X)(),Kc=Object(s.X)(),Lc=Object(s.z)("h3"),Qc=Object(s.ab)("Adjust npm scripts"),Uc=Object(s.X)(),Yc=Object(s.z)("p"),Zc=Object(s.ab)("After setting up the configurations, we need to run two compilation steps for our project: one to compile the Svelte code into native Javascript, and one to compile PostCSS and apply our plugins, including Tailwind CSS."),es=Object(s.X)(),ts=Object(s.z)("p"),cs=Object(s.ab)("To do so, we use "),ss=Object(s.z)("code"),as=Object(s.ab)("npm-run-all"),bs=Object(s.ab)(" to simultaneously watch for changes and incrementally compile the necessary files for both compilation steps."),js=Object(s.X)(),os=Object(s.z)("p"),ns=Object(s.ab)("We also add the PostCSS compilation step to our build step. In "),Os=Object(s.z)("code"),ls=Object(s.ab)("package.json"),rs=Object(s.ab)("..."),ps=Object(s.X)(),ds=Object(s.X)(),gs=Object(s.z)("p"),hs=Object(s.ab)("Now you should be able to use Tailwind CSS in your Sapper project!"),this.h()},l(e){t=Object(s.o)(e,"H2",{});var j=Object(s.m)(t);c=Object(s.q)(j,"Why Tailwind CSS?"),j.forEach(s.y),a=Object(s.p)(e),b=Object(s.o)(e,"H3",{});var o=Object(s.m)(b);m=Object(s.q)(o,"A constrained design system is a good thing"),o.forEach(s.y),y=Object(s.p)(e),f=Object(s.o)(e,"P",{});var n=Object(s.m)(f);v=Object(s.q)(n,"Although Svelte offers scoped CSS by default, Tailwind CSS is still useful as it offers a nicely constrained design system. As the number of components grows, it becomes increasingly difficult to keep all whitespacing, font-sizes, and colours consistent. Tailwind CSS solves these issues by providing sensible defaults for many CSS variables, and minimises the usage of magic numbers."),n.forEach(s.y),S=Object(s.p)(e),q=Object(s.o)(e,"H3",{});var O=Object(s.m)(q);w=Object(s.q)(O,"Styling custom components"),O.forEach(s.y),C=Object(s.p)(e),E=Object(s.o)(e,"P",{});var l=Object(s.m)(E);I=Object(s.q)(l,"In addition, Svelte does not support passing CSS classes into child components. For example, we cannot do this..."),l.forEach(s.y),z=Object(s.p)(e),x=Object(s.p)(e),X=Object(s.o)(e,"P",{});var r=Object(s.m)(X);T=Object(s.q)(r,"... as the "),D=Object(s.o)(r,"CODE",{});var p=Object(s.m)(D);k=Object(s.q)(p,".margin-lg"),p.forEach(s.y),_=Object(s.q)(r," class is treated as an unused CSS class, and is purged in the compiled application."),r.forEach(s.y),A=Object(s.p)(e),F=Object(s.o)(e,"P",{});var i=Object(s.m)(F);W=Object(s.q)(i,"This makes it extremely difficult to design flexible components that depend on layout and more."),i.forEach(s.y),H=Object(s.p)(e),N=Object(s.o)(e,"P",{});var d=Object(s.m)(N);M=Object(s.q)(d,"Since Tailwind CSS classes are global by default and not purged by Svelte, we can use Tailwind to enable this functionality."),d.forEach(s.y),J=Object(s.p)(e),$=Object(s.p)(e),R=Object(s.o)(e,"P",{});var g=Object(s.m)(R);B=Object(s.q)(g,"The "),G=Object(s.o)(g,"CODE",{});var h=Object(s.m)(G);K=Object(s.q)(h,"div"),h.forEach(s.y),L=Object(s.q)(g," element in "),Q=Object(s.o)(g,"CODE",{});var u=Object(s.m)(Q);U=Object(s.q)(u,"ChildCard.svelte"),u.forEach(s.y),Y=Object(s.q)(g," will be built with the "),Z=Object(s.o)(g,"CODE",{});var P=Object(s.m)(Z);ee=Object(s.q)(P,"m-4"),P.forEach(s.y),te=Object(s.q)(g," class, which will inherit styles from Tailwind CSS."),g.forEach(s.y),ce=Object(s.p)(e),se=Object(s.o)(e,"H2",{});var V=Object(s.m)(se);ae=Object(s.q)(V,"Integrating Tailwind CSS"),V.forEach(s.y),be=Object(s.p)(e),je=Object(s.o)(e,"P",{});var ge=Object(s.m)(je);oe=Object(s.q)(ge,"To add Tailwind CSS to Svelte and Sapper, we first have to integrate PostCSS into Sapper's build step, as Tailwind CSS is a PostCSS plugin."),ge.forEach(s.y),ne=Object(s.p)(e),Oe=Object(s.o)(e,"H3",{});var et=Object(s.m)(Oe);le=Object(s.q)(et,"Install dependencies"),et.forEach(s.y),re=Object(s.p)(e),pe=Object(s.o)(e,"P",{});var bt=Object(s.m)(pe);ie=Object(s.q)(bt,"First, we have to install a few extra dependencies."),bt.forEach(s.y),de=Object(s.p)(e),he=Object(s.p)(e),ue=Object(s.o)(e,"P",{});var yt=Object(s.m)(ue);me=Object(s.o)(yt,"CODE",{});var Tt=Object(s.m)(me);ye=Object(s.q)(Tt,"postcss-load-config"),Tt.forEach(s.y),fe=Object(s.q)(yt," allows us to automatically load the "),ve=Object(s.o)(yt,"CODE",{});var ec=Object(s.m)(ve);Se=Object(s.q)(ec,"postcss.config.js"),ec.forEach(s.y),qe=Object(s.q)(yt," file in our project root if it exists, thus saving us some extra configuration required to integrate PostCSS into our build step."),yt.forEach(s.y),we=Object(s.p)(e),Ce=Object(s.o)(e,"P",{});var hc=Object(s.m)(Ce);Ee=Object(s.o)(hc,"CODE",{});var Ac=Object(s.m)(Ee);Ie=Object(s.q)(Ac,"postcss-cli"),Ac.forEach(s.y),ze=Object(s.q)(hc," allows us to run PostCSS from the command line."),hc.forEach(s.y),Pe=Object(s.p)(e),xe=Object(s.o)(e,"P",{});var Gc=Object(s.m)(xe);Xe=Object(s.o)(Gc,"CODE",{});var is=Object(s.m)(Xe);Te=Object(s.q)(is,"postcss-import"),is.forEach(s.y),De=Object(s.q)(Gc," and "),ke=Object(s.o)(Gc,"CODE",{});var us=Object(s.m)(ke);_e=Object(s.q)(us,"postcss-nested"),us.forEach(s.y),Ae=Object(s.q)(Gc," are additional quality-of-life plugins."),Gc.forEach(s.y),Fe=Object(s.p)(e),We=Object(s.o)(e,"P",{});var ms=Object(s.m)(We);He=Object(s.o)(ms,"CODE",{});var ys=Object(s.m)(He);Ne=Object(s.q)(ys,"cssnano"),ys.forEach(s.y),Me=Object(s.q)(ms," minifies our CSS output."),ms.forEach(s.y),Je=Object(s.p)(e),Ve=Object(s.o)(e,"P",{});var fs=Object(s.m)(Ve);$e=Object(s.o)(fs,"CODE",{});var vs=Object(s.m)($e);Re=Object(s.q)(vs,"npm-run-all"),vs.forEach(s.y),Be=Object(s.q)(fs," is a tool to run multiple npm scripts in parallel."),fs.forEach(s.y),Ge=Object(s.p)(e),Ke=Object(s.o)(e,"H3",{});var Ss=Object(s.m)(Ke);Le=Object(s.q)(Ss,"Initialise Tailwind CSS"),Ss.forEach(s.y),Qe=Object(s.p)(e),Ue=Object(s.o)(e,"P",{});var qs=Object(s.m)(Ue);Ye=Object(s.q)(qs,"Create the Tailwind configuration file with..."),qs.forEach(s.y),Ze=Object(s.p)(e),tt=Object(s.p)(e),ct=Object(s.o)(e,"P",{});var ws=Object(s.m)(ct);st=Object(s.q)(ws,"We then have to include Svelte into the PurgeCSS block to ensure that Svelte styles are not removed."),ws.forEach(s.y),at=Object(s.p)(e),jt=Object(s.p)(e),ot=Object(s.o)(e,"P",{});var Cs=Object(s.m)(ot);nt=Object(s.q)(Cs,"Instead of configuring "),Ot=Object(s.o)(Cs,"CODE",{});var Es=Object(s.m)(Ot);lt=Object(s.q)(Es,"static/global.css"),Es.forEach(s.y),rt=Object(s.q)(Cs," manually, we will set up PostCSS to transpile a source CSS file into a static CSS file to be used."),Cs.forEach(s.y),pt=Object(s.p)(e),it=Object(s.o)(e,"P",{});var Is=Object(s.m)(it);dt=Object(s.q)(Is,"Create an asset "),gt=Object(s.o)(Is,"CODE",{});var zs=Object(s.m)(gt);ht=Object(s.q)(zs,"/src/assets/global.css"),zs.forEach(s.y),ut=Object(s.q)(Is,", and import Tailwind CSS styles."),Is.forEach(s.y),mt=Object(s.p)(e),ft=Object(s.p)(e),vt=Object(s.o)(e,"H3",{});var Ps=Object(s.m)(vt);St=Object(s.q)(Ps,"Configure PostCSS with "),qt=Object(s.o)(Ps,"CODE",{});var xs=Object(s.m)(qt);wt=Object(s.q)(xs,"svelte-preprocess"),xs.forEach(s.y),Ps.forEach(s.y),Ct=Object(s.p)(e),Et=Object(s.o)(e,"P",{});var Xs=Object(s.m)(Et);It=Object(s.q)(Xs,"In the root of our project, create "),zt=Object(s.o)(Xs,"CODE",{});var Ts=Object(s.m)(zt);Pt=Object(s.q)(Ts,"postcss.config.js"),Ts.forEach(s.y),xt=Object(s.q)(Xs,", and load our PostCSS plugins."),Xs.forEach(s.y),Xt=Object(s.p)(e),Dt=Object(s.p)(e),kt=Object(s.o)(e,"P",{});var Ds=Object(s.m)(kt);_t=Object(s.o)(Ds,"CODE",{});var ks=Object(s.m)(_t);At=Object(s.q)(ks,"postcss-import"),ks.forEach(s.y),Ft=Object(s.q)(Ds," and "),Wt=Object(s.o)(Ds,"CODE",{});var _s=Object(s.m)(Wt);Ht=Object(s.q)(_s,"postcss-nested"),_s.forEach(s.y),Nt=Object(s.q)(Ds," introduce some additional syntax that needs to be handled manually."),Ds.forEach(s.y),Mt=Object(s.p)(e),Jt=Object(s.o)(e,"P",{});var As=Object(s.m)(Jt);Vt=Object(s.q)(As,"To do so, we use "),$t=Object(s.o)(As,"CODE",{});var Fs=Object(s.m)($t);Rt=Object(s.q)(Fs,"svelte-preprocess"),Fs.forEach(s.y),Bt=Object(s.q)(As,". The preprocessor allows us to apply modifications to the code before it is passed into the Svelte engine."),As.forEach(s.y),Gt=Object(s.p)(e),Kt=Object(s.o)(e,"P",{});var Ws=Object(s.m)(Kt);Lt=Object(s.q)(Ws,"First, create our preprocessor options object under "),Qt=Object(s.o)(Ws,"CODE",{});var Hs=Object(s.m)(Qt);Ut=Object(s.q)(Hs,"svelte.config.js"),Hs.forEach(s.y),Yt=Object(s.q)(Ws,"..."),Ws.forEach(s.y),Zt=Object(s.p)(e),tc=Object(s.p)(e),cc=Object(s.o)(e,"P",{});var Ns=Object(s.m)(cc);sc=Object(s.o)(Ns,"CODE",{});var Ms=Object(s.m)(sc);ac=Object(s.q)(Ms,"svelte.config.js"),Ms.forEach(s.y),bc=Object(s.q)(Ns," is used to configure our language server, such that the Svelte extension for VSCode and coc knows how to parse our source code and provide proper syntax highlighting and error messages."),Ns.forEach(s.y),jc=Object(s.p)(e),oc=Object(s.o)(e,"P",{});var Js=Object(s.m)(oc);nc=Object(s.q)(Js,"To enable the preprocessor for the language server, simply export  a "),Oc=Object(s.o)(Js,"CODE",{});var Vs=Object(s.m)(Oc);lc=Object(s.q)(Vs,"preprocess"),Vs.forEach(s.y),rc=Object(s.q)(Js," object from "),pc=Object(s.o)(Js,"CODE",{});var $s=Object(s.m)(pc);ic=Object(s.q)($s,"svelte.config.js"),$s.forEach(s.y),dc=Object(s.q)(Js,"."),Js.forEach(s.y),gc=Object(s.p)(e),uc=Object(s.p)(e),mc=Object(s.o)(e,"P",{});var Rs=Object(s.m)(mc);yc=Object(s.q)(Rs,"We also export the options object, since we want to use the same configuration for our build step under "),fc=Object(s.o)(Rs,"CODE",{});var Bs=Object(s.m)(fc);vc=Object(s.q)(Bs,"rollup.config.js"),Bs.forEach(s.y),Sc=Object(s.q)(Rs," or "),qc=Object(s.o)(Rs,"CODE",{});var Gs=Object(s.m)(qc);wc=Object(s.q)(Gs,"webpack.config.js"),Gs.forEach(s.y),Cc=Object(s.q)(Rs,"."),Rs.forEach(s.y),Ec=Object(s.p)(e),Ic=Object(s.o)(e,"P",{});var Ks=Object(s.m)(Ic);zc=Object(s.q)(Ks,"For Rollup, add "),Pc=Object(s.o)(Ks,"CODE",{});var Ls=Object(s.m)(Pc);xc=Object(s.q)(Ls,"preprocess"),Ls.forEach(s.y),Xc=Object(s.q)(Ks," to the "),Tc=Object(s.o)(Ks,"CODE",{});var Qs=Object(s.m)(Tc);Dc=Object(s.q)(Qs,"svelte"),Qs.forEach(s.y),kc=Object(s.q)(Ks," object for both the client and server..."),Ks.forEach(s.y),_c=Object(s.p)(e),Fc=Object(s.p)(e),Wc=Object(s.o)(e,"P",{});var Us=Object(s.m)(Wc);Hc=Object(s.q)(Us,"For Webpack, add "),Nc=Object(s.o)(Us,"CODE",{});var Ys=Object(s.m)(Nc);Mc=Object(s.q)(Ys,"preprocess"),Ys.forEach(s.y),Jc=Object(s.q)(Us," to the "),Vc=Object(s.o)(Us,"CODE",{});var Zs=Object(s.m)(Vc);$c=Object(s.q)(Zs,"/\\\\.(svelte|html)$/"),Zs.forEach(s.y),Rc=Object(s.q)(Us," rule for both the client and server..."),Us.forEach(s.y),Bc=Object(s.p)(e),Kc=Object(s.p)(e),Lc=Object(s.o)(e,"H3",{});var ea=Object(s.m)(Lc);Qc=Object(s.q)(ea,"Adjust npm scripts"),ea.forEach(s.y),Uc=Object(s.p)(e),Yc=Object(s.o)(e,"P",{});var ta=Object(s.m)(Yc);Zc=Object(s.q)(ta,"After setting up the configurations, we need to run two compilation steps for our project: one to compile the Svelte code into native Javascript, and one to compile PostCSS and apply our plugins, including Tailwind CSS."),ta.forEach(s.y),es=Object(s.p)(e),ts=Object(s.o)(e,"P",{});var ca=Object(s.m)(ts);cs=Object(s.q)(ca,"To do so, we use "),ss=Object(s.o)(ca,"CODE",{});var sa=Object(s.m)(ss);as=Object(s.q)(sa,"npm-run-all"),sa.forEach(s.y),bs=Object(s.q)(ca," to simultaneously watch for changes and incrementally compile the necessary files for both compilation steps."),ca.forEach(s.y),js=Object(s.p)(e),os=Object(s.o)(e,"P",{});var aa=Object(s.m)(os);ns=Object(s.q)(aa,"We also add the PostCSS compilation step to our build step. In "),Os=Object(s.o)(aa,"CODE",{});var ba=Object(s.m)(Os);ls=Object(s.q)(ba,"package.json"),ba.forEach(s.y),rs=Object(s.q)(aa,"..."),aa.forEach(s.y),ps=Object(s.p)(e),ds=Object(s.p)(e),gs=Object(s.o)(e,"P",{});var ja=Object(s.m)(gs);hs=Object(s.q)(ja,"Now you should be able to use Tailwind CSS in your Sapper project!"),ja.forEach(s.y),this.h()},h(){P=new s.a(x),V=new s.a($),ge=new s.a(he),et=new s.a(tt),bt=new s.a(jt),yt=new s.a(ft),Tt=new s.a(Dt),ec=new s.a(tc),hc=new s.a(uc),Ac=new s.a(Fc),Gc=new s.a(Kc),is=new s.a(ds)},m(e,us){Object(s.I)(e,t,us),Object(s.g)(t,c),Object(s.I)(e,a,us),Object(s.I)(e,b,us),Object(s.g)(b,m),Object(s.I)(e,y,us),Object(s.I)(e,f,us),Object(s.g)(f,v),Object(s.I)(e,S,us),Object(s.I)(e,q,us),Object(s.g)(q,w),Object(s.I)(e,C,us),Object(s.I)(e,E,us),Object(s.g)(E,I),Object(s.I)(e,z,us),P.m(j,e,us),Object(s.I)(e,x,us),Object(s.I)(e,X,us),Object(s.g)(X,T),Object(s.g)(X,D),Object(s.g)(D,k),Object(s.g)(X,_),Object(s.I)(e,A,us),Object(s.I)(e,F,us),Object(s.g)(F,W),Object(s.I)(e,H,us),Object(s.I)(e,N,us),Object(s.g)(N,M),Object(s.I)(e,J,us),V.m(o,e,us),Object(s.I)(e,$,us),Object(s.I)(e,R,us),Object(s.g)(R,B),Object(s.g)(R,G),Object(s.g)(G,K),Object(s.g)(R,L),Object(s.g)(R,Q),Object(s.g)(Q,U),Object(s.g)(R,Y),Object(s.g)(R,Z),Object(s.g)(Z,ee),Object(s.g)(R,te),Object(s.I)(e,ce,us),Object(s.I)(e,se,us),Object(s.g)(se,ae),Object(s.I)(e,be,us),Object(s.I)(e,je,us),Object(s.g)(je,oe),Object(s.I)(e,ne,us),Object(s.I)(e,Oe,us),Object(s.g)(Oe,le),Object(s.I)(e,re,us),Object(s.I)(e,pe,us),Object(s.g)(pe,ie),Object(s.I)(e,de,us),ge.m(n,e,us),Object(s.I)(e,he,us),Object(s.I)(e,ue,us),Object(s.g)(ue,me),Object(s.g)(me,ye),Object(s.g)(ue,fe),Object(s.g)(ue,ve),Object(s.g)(ve,Se),Object(s.g)(ue,qe),Object(s.I)(e,we,us),Object(s.I)(e,Ce,us),Object(s.g)(Ce,Ee),Object(s.g)(Ee,Ie),Object(s.g)(Ce,ze),Object(s.I)(e,Pe,us),Object(s.I)(e,xe,us),Object(s.g)(xe,Xe),Object(s.g)(Xe,Te),Object(s.g)(xe,De),Object(s.g)(xe,ke),Object(s.g)(ke,_e),Object(s.g)(xe,Ae),Object(s.I)(e,Fe,us),Object(s.I)(e,We,us),Object(s.g)(We,He),Object(s.g)(He,Ne),Object(s.g)(We,Me),Object(s.I)(e,Je,us),Object(s.I)(e,Ve,us),Object(s.g)(Ve,$e),Object(s.g)($e,Re),Object(s.g)(Ve,Be),Object(s.I)(e,Ge,us),Object(s.I)(e,Ke,us),Object(s.g)(Ke,Le),Object(s.I)(e,Qe,us),Object(s.I)(e,Ue,us),Object(s.g)(Ue,Ye),Object(s.I)(e,Ze,us),et.m(O,e,us),Object(s.I)(e,tt,us),Object(s.I)(e,ct,us),Object(s.g)(ct,st),Object(s.I)(e,at,us),bt.m(l,e,us),Object(s.I)(e,jt,us),Object(s.I)(e,ot,us),Object(s.g)(ot,nt),Object(s.g)(ot,Ot),Object(s.g)(Ot,lt),Object(s.g)(ot,rt),Object(s.I)(e,pt,us),Object(s.I)(e,it,us),Object(s.g)(it,dt),Object(s.g)(it,gt),Object(s.g)(gt,ht),Object(s.g)(it,ut),Object(s.I)(e,mt,us),yt.m(r,e,us),Object(s.I)(e,ft,us),Object(s.I)(e,vt,us),Object(s.g)(vt,St),Object(s.g)(vt,qt),Object(s.g)(qt,wt),Object(s.I)(e,Ct,us),Object(s.I)(e,Et,us),Object(s.g)(Et,It),Object(s.g)(Et,zt),Object(s.g)(zt,Pt),Object(s.g)(Et,xt),Object(s.I)(e,Xt,us),Tt.m(p,e,us),Object(s.I)(e,Dt,us),Object(s.I)(e,kt,us),Object(s.g)(kt,_t),Object(s.g)(_t,At),Object(s.g)(kt,Ft),Object(s.g)(kt,Wt),Object(s.g)(Wt,Ht),Object(s.g)(kt,Nt),Object(s.I)(e,Mt,us),Object(s.I)(e,Jt,us),Object(s.g)(Jt,Vt),Object(s.g)(Jt,$t),Object(s.g)($t,Rt),Object(s.g)(Jt,Bt),Object(s.I)(e,Gt,us),Object(s.I)(e,Kt,us),Object(s.g)(Kt,Lt),Object(s.g)(Kt,Qt),Object(s.g)(Qt,Ut),Object(s.g)(Kt,Yt),Object(s.I)(e,Zt,us),ec.m(i,e,us),Object(s.I)(e,tc,us),Object(s.I)(e,cc,us),Object(s.g)(cc,sc),Object(s.g)(sc,ac),Object(s.g)(cc,bc),Object(s.I)(e,jc,us),Object(s.I)(e,oc,us),Object(s.g)(oc,nc),Object(s.g)(oc,Oc),Object(s.g)(Oc,lc),Object(s.g)(oc,rc),Object(s.g)(oc,pc),Object(s.g)(pc,ic),Object(s.g)(oc,dc),Object(s.I)(e,gc,us),hc.m(d,e,us),Object(s.I)(e,uc,us),Object(s.I)(e,mc,us),Object(s.g)(mc,yc),Object(s.g)(mc,fc),Object(s.g)(fc,vc),Object(s.g)(mc,Sc),Object(s.g)(mc,qc),Object(s.g)(qc,wc),Object(s.g)(mc,Cc),Object(s.I)(e,Ec,us),Object(s.I)(e,Ic,us),Object(s.g)(Ic,zc),Object(s.g)(Ic,Pc),Object(s.g)(Pc,xc),Object(s.g)(Ic,Xc),Object(s.g)(Ic,Tc),Object(s.g)(Tc,Dc),Object(s.g)(Ic,kc),Object(s.I)(e,_c,us),Ac.m(g,e,us),Object(s.I)(e,Fc,us),Object(s.I)(e,Wc,us),Object(s.g)(Wc,Hc),Object(s.g)(Wc,Nc),Object(s.g)(Nc,Mc),Object(s.g)(Wc,Jc),Object(s.g)(Wc,Vc),Object(s.g)(Vc,$c),Object(s.g)(Wc,Rc),Object(s.I)(e,Bc,us),Gc.m(h,e,us),Object(s.I)(e,Kc,us),Object(s.I)(e,Lc,us),Object(s.g)(Lc,Qc),Object(s.I)(e,Uc,us),Object(s.I)(e,Yc,us),Object(s.g)(Yc,Zc),Object(s.I)(e,es,us),Object(s.I)(e,ts,us),Object(s.g)(ts,cs),Object(s.g)(ts,ss),Object(s.g)(ss,as),Object(s.g)(ts,bs),Object(s.I)(e,js,us),Object(s.I)(e,os,us),Object(s.g)(os,ns),Object(s.g)(os,Os),Object(s.g)(Os,ls),Object(s.g)(os,rs),Object(s.I)(e,ps,us),is.m(u,e,us),Object(s.I)(e,ds,us),Object(s.I)(e,gs,us),Object(s.g)(gs,hs)},p:s.M,i:s.M,o:s.M,d(e){e&&Object(s.y)(t),e&&Object(s.y)(a),e&&Object(s.y)(b),e&&Object(s.y)(y),e&&Object(s.y)(f),e&&Object(s.y)(S),e&&Object(s.y)(q),e&&Object(s.y)(C),e&&Object(s.y)(E),e&&Object(s.y)(z),e&&P.d(),e&&Object(s.y)(x),e&&Object(s.y)(X),e&&Object(s.y)(A),e&&Object(s.y)(F),e&&Object(s.y)(H),e&&Object(s.y)(N),e&&Object(s.y)(J),e&&V.d(),e&&Object(s.y)($),e&&Object(s.y)(R),e&&Object(s.y)(ce),e&&Object(s.y)(se),e&&Object(s.y)(be),e&&Object(s.y)(je),e&&Object(s.y)(ne),e&&Object(s.y)(Oe),e&&Object(s.y)(re),e&&Object(s.y)(pe),e&&Object(s.y)(de),e&&ge.d(),e&&Object(s.y)(he),e&&Object(s.y)(ue),e&&Object(s.y)(we),e&&Object(s.y)(Ce),e&&Object(s.y)(Pe),e&&Object(s.y)(xe),e&&Object(s.y)(Fe),e&&Object(s.y)(We),e&&Object(s.y)(Je),e&&Object(s.y)(Ve),e&&Object(s.y)(Ge),e&&Object(s.y)(Ke),e&&Object(s.y)(Qe),e&&Object(s.y)(Ue),e&&Object(s.y)(Ze),e&&et.d(),e&&Object(s.y)(tt),e&&Object(s.y)(ct),e&&Object(s.y)(at),e&&bt.d(),e&&Object(s.y)(jt),e&&Object(s.y)(ot),e&&Object(s.y)(pt),e&&Object(s.y)(it),e&&Object(s.y)(mt),e&&yt.d(),e&&Object(s.y)(ft),e&&Object(s.y)(vt),e&&Object(s.y)(Ct),e&&Object(s.y)(Et),e&&Object(s.y)(Xt),e&&Tt.d(),e&&Object(s.y)(Dt),e&&Object(s.y)(kt),e&&Object(s.y)(Mt),e&&Object(s.y)(Jt),e&&Object(s.y)(Gt),e&&Object(s.y)(Kt),e&&Object(s.y)(Zt),e&&ec.d(),e&&Object(s.y)(tc),e&&Object(s.y)(cc),e&&Object(s.y)(jc),e&&Object(s.y)(oc),e&&Object(s.y)(gc),e&&hc.d(),e&&Object(s.y)(uc),e&&Object(s.y)(mc),e&&Object(s.y)(Ec),e&&Object(s.y)(Ic),e&&Object(s.y)(_c),e&&Ac.d(),e&&Object(s.y)(Fc),e&&Object(s.y)(Wc),e&&Object(s.y)(Bc),e&&Gc.d(),e&&Object(s.y)(Kc),e&&Object(s.y)(Lc),e&&Object(s.y)(Uc),e&&Object(s.y)(Yc),e&&Object(s.y)(es),e&&Object(s.y)(ts),e&&Object(s.y)(js),e&&Object(s.y)(os),e&&Object(s.y)(ps),e&&is.d(),e&&Object(s.y)(ds),e&&Object(s.y)(gs)}}}const b={},j='<pre><code class="language-html"><span class="hljs-comment">&lt;!-- Parent.svelte --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span>\n  .margin-lg &#123;    // unused class warning\n    margin: 1rem;\n  &#125;\n<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">ChildCard</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;margin-lg&quot;</span>/&gt;</span></code></pre>\n',o='<pre><code class="language-html"><span class="hljs-comment">&lt;!-- Parent.svelte --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">ChildCard</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;m-4&quot;</span>/&gt;</span>\n\n\n<span class="hljs-comment">&lt;!-- ChildCard.svelte --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> &#123; className <span class="hljs-keyword">as</span> <span class="hljs-class"><span class="hljs-keyword">class</span> &#125;</span>; <span class="hljs-comment">// exports a prop &#x27;class&#x27;</span>\n  <span class="hljs-keyword">let</span> className: string = <span class="hljs-string">&quot;&quot;</span>;\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#123;className&#125;/</span>&gt;</span></code></pre>\n',n='<pre><code class="language-bash">npm install -D autoprefixer postcss-load-config postcss-cli postcss-import postcss-nested cssnano tailwindcss npm-run-all</code></pre>\n',O='<pre><code class="language-bash">npx tailwind init</code></pre>\n',l='<pre><code class="language-javascript"><span class="hljs-built_in">module</span>.exports = &#123;\n  <span class="hljs-attr">purge</span>: [<span class="hljs-string">&quot;./src/**/*.svelte&quot;</span>],\n  <span class="hljs-attr">theme</span>: &#123;\n    <span class="hljs-attr">extend</span>: &#123;&#125;,\n  &#125;,\n  <span class="hljs-attr">variants</span>: &#123;&#125;,\n  <span class="hljs-attr">plugins</span>: [],\n&#125;;</code></pre>\n',r='<pre><code class="language-css"><span class="hljs-keyword">@tailwind</span> base;\n<span class="hljs-keyword">@tailwind</span> components;\n<span class="hljs-keyword">@tailwind</span> utilities;</code></pre>\n',p='<pre><code class="language-javascript"><span class="hljs-built_in">module</span>.exports = &#123;\n  <span class="hljs-attr">plugins</span>: [\n    <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;postcss-import&#x27;</span>),\n    <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;postcss-nested&#x27;</span>),\n    <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;tailwindcss&#x27;</span>),\n    <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cssnano&#x27;</span>)(&#123;\n      <span class="hljs-attr">preset</span>: <span class="hljs-string">&#x27;default&#x27;</span>,\n    &#125;),\n  ],\n&#125;;</code></pre>\n',i='<pre><code class="language-javascript"><span class="hljs-keyword">const</span> sveltePreprocess = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;svelte-preprocess&#x27;</span>);\n\n<span class="hljs-keyword">const</span> preprocessOptions = &#123;\n  <span class="hljs-attr">postcss</span>: &#123;\n    <span class="hljs-attr">plugins</span>: [\n      <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;postcss-import&#x27;</span>)(),\n      <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;postcss-nested&#x27;</span>)(),\n    ],\n  &#125;,\n&#125;;</code></pre>\n',d='<pre><code class="language-javascript"><span class="hljs-built_in">module</span>.exports = &#123;\n  <span class="hljs-attr">preprocess</span>: sveltePreprocess(preprocessOptions),\n  preprocessOptions,\n&#125;;</code></pre>\n',g='<pre><code class="language-javascript"><span class="hljs-keyword">const</span> preprocess = sveltePreprocess(&#123;\n  <span class="hljs-attr">sourceMap</span>: dev,       <span class="hljs-comment">// additional preprocess option</span>\n  ...preprocessOptions,\n&#125;);\n\nclient: &#123;\n  ...\n  <span class="hljs-attr">plugins</span>: [\n    ...\n    svelte(&#123;\n      preprocess,\n      dev,\n      ...\n&#125;,\n\n<span class="hljs-attr">server</span>: &#123;\n  ...\n  <span class="hljs-attr">plugins</span>: [\n    ...\n    svelte(&#123;\n      preprocess,\n      <span class="hljs-attr">generate</span>: <span class="hljs-string">&#x27;ssr&#x27;</span>,\n      ...\n&#125;</code></pre>\n',h='<pre><code class="language-javascript">client: &#123;\n  ...\n    <span class="hljs-attr">module</span>: &#123;\n      <span class="hljs-attr">rules</span>: [\n        &#123;\n          <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\\.(svelte|html)$/</span>,\n          use: &#123;\n            <span class="hljs-attr">options</span>: &#123;\n              preprocess,\n              ...\n&#125;,\n\n<span class="hljs-attr">server</span>: &#123;\n  ...\n    <span class="hljs-attr">module</span>: &#123;\n      <span class="hljs-attr">rules</span>: [\n        &#123;\n          <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\\.(svelte|html)$/</span>,\n          use: &#123;\n            <span class="hljs-attr">options</span>: &#123;\n              preprocess,\n              ...\n&#125;,</code></pre>\n',u='<pre><code class="language-json">&quot;scripts&quot;: &#123;\n  &quot;dev&quot;: &quot;run-p watch:css watch:sapper&quot;,\n  &quot;watch:css&quot;: &quot;postcss src/assets/global.css -o static/global.css -w&quot;,\n  &quot;watch:sapper&quot;: &quot;sapper dev&quot;,\n  &quot;build&quot;: &quot;run-s build:css build:sapper&quot;,\n  &quot;build:css&quot;: &quot;NODE_ENV=production postcss src/assets/global.css -o static/global.css&quot;,\n  &quot;build:sapper&quot;: &quot;NODE_ENV=production sapper build&quot;,\n&#125;,</code></pre>\n';class m extends s.b{constructor(e){super(),Object(s.H)(this,e,null,a,s.S,{})}}t.default=m}}]);