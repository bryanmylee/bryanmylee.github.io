(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{24:function(t,e,s){"use strict";s.r(e),s.d(e,"metadata",(function(){return O}));var n=s(0);function a(t){let e,s;const a=t[1].default,c=Object(n.v)(a,t,t[0],null);return{c(){e=Object(n.z)("div"),c&&c.c(),this.h()},l(t){e=Object(n.o)(t,"DIV",{class:!0});var s=Object(n.m)(e);c&&c.l(s),s.forEach(n.y),this.h()},h(){Object(n.i)(e,"class","prose")},m(t,a){Object(n.I)(t,e,a),c&&c.m(e,null),s=!0},p(t,[e]){c&&c.p&&1&e&&Object(n.db)(c,a,t,t[0],e,null,null)},i(t){s||(Object(n.ab)(c,t),s=!0)},o(t){Object(n.bb)(c,t),s=!1},d(t){t&&Object(n.y)(e),c&&c.d(t)}}}function c(t,e,s){let{$$slots:n={},$$scope:a}=e;return t.$$set=t=>{"$$scope"in t&&s(0,a=t.$$scope)},[a,n]}class o extends n.b{constructor(t){super(),Object(n.H)(this,t,c,a,n.S,{})}}var p=o;function b(t){let e,s,a,c,o,p,b,j,O,l,r,i,u,g,d,k,y,h,m,f,v,S,E,I,w,C,q,Z,z,P,W,T,x,D,$,H,M,R,L,A,F,N,V,J,_,B,G,K,Q,U,X,Y,tt,et,st,nt,at,ct,ot,pt,bt,jt,Ot,lt,rt,it,ut,gt,dt,kt,yt,ht,mt,ft,vt,St,Et,It,wt,Ct,qt,Zt,zt,Pt,Wt,Tt,xt,Dt,$t,Ht,Mt,Rt,Lt,At,Ft,Nt,Vt,Jt,_t,Bt,Gt,Kt,Qt,Ut,Xt,Yt,te,ee,se,ne,ae,ce,oe,pe,be,je,Oe,le,re,ie,ue,ge,de,ke,ye,he,me,fe,ve,Se,Ee,Ie,we,Ce,qe,Ze,ze,Pe,We,Te,xe,De,$e,He,Me,Re,Le,Ae,Fe,Ne,Ve,Je,_e,Be,Ge,Ke,Qe,Ue,Xe,Ye,ts,es,ss,ns,as,cs,os,ps,bs,js,Os,ls,rs,is,us,gs,ds,ks,ys,hs,ms,fs,vs,Ss,Es,Is,ws,Cs,qs,Zs,zs,Ps,Ws,Ts,xs,Ds,$s,Hs,Ms,Rs,Ls,As,Fs,Ns,Vs,Js,_s,Bs,Gs,Ks,Qs,Us,Xs,Ys,tn,en,sn,nn,an;return{c(){e=Object(n.z)("h2"),s=Object(n.Z)("Why Tailwind CSS?"),a=Object(n.W)(),c=Object(n.z)("h3"),o=Object(n.Z)("A constrained design system is a good thing"),p=Object(n.W)(),b=Object(n.z)("p"),j=Object(n.Z)("Although Svelte offers scoped CSS by default, Tailwind CSS is still useful as it offers a nicely constrained design system. As the number of components grows, it becomes increasingly difficult to keep all whitespacing, font-sizes, and colours consistent. Tailwind CSS solves these issues by providing sensible defaults for many CSS variables, and minimises the usage of magic numbers."),O=Object(n.W)(),l=Object(n.z)("h3"),r=Object(n.Z)("Styling custom components"),i=Object(n.W)(),u=Object(n.z)("p"),g=Object(n.Z)("In addition, Svelte does not support passing CSS classes into child components. For example, we cannot do this…"),d=Object(n.W)(),k=Object(n.z)("pre"),y=Object(n.W)(),h=Object(n.z)("p"),m=Object(n.Z)("… as the "),f=Object(n.z)("code"),v=Object(n.Z)(".margin-lg"),S=Object(n.Z)(" class is treated as an unused CSS class, and is purged in the compiled application."),E=Object(n.W)(),I=Object(n.z)("p"),w=Object(n.Z)("This makes it extremely difficult to design flexible components that depend on layout and more."),C=Object(n.W)(),q=Object(n.z)("p"),Z=Object(n.Z)("Since Tailwind CSS classes are global by default and not purged by Svelte, we can use Tailwind to enable this functionality."),z=Object(n.W)(),P=Object(n.z)("pre"),W=Object(n.W)(),T=Object(n.z)("p"),x=Object(n.Z)("The "),D=Object(n.z)("code"),$=Object(n.Z)("div"),H=Object(n.Z)(" element in "),M=Object(n.z)("code"),R=Object(n.Z)("ChildCard.svelte"),L=Object(n.Z)(" will be built with the "),A=Object(n.z)("code"),F=Object(n.Z)("m-4"),N=Object(n.Z)(" class, which will inherit styles from Tailwind CSS."),V=Object(n.W)(),J=Object(n.z)("h2"),_=Object(n.Z)("Integrating Tailwind CSS"),B=Object(n.W)(),G=Object(n.z)("p"),K=Object(n.Z)("To add Tailwind CSS to Svelte and Sapper, we first have to integrate PostCSS into Sapper’s build step, as Tailwind CSS is a PostCSS plugin."),Q=Object(n.W)(),U=Object(n.z)("h3"),X=Object(n.Z)("Install dependencies"),Y=Object(n.W)(),tt=Object(n.z)("p"),et=Object(n.Z)("First, we have to install a few extra dependencies."),st=Object(n.W)(),nt=Object(n.z)("pre"),at=Object(n.W)(),ct=Object(n.z)("p"),ot=Object(n.z)("code"),pt=Object(n.Z)("postcss-load-config"),bt=Object(n.Z)(" allows us to automatically load the "),jt=Object(n.z)("code"),Ot=Object(n.Z)("postcss.config.js"),lt=Object(n.Z)(" file in our project root if it exists, thus saving us some extra configuration required to integrate PostCSS into our build step."),rt=Object(n.W)(),it=Object(n.z)("p"),ut=Object(n.z)("code"),gt=Object(n.Z)("postcss-cli"),dt=Object(n.Z)(" allows us to run PostCSS from the command line."),kt=Object(n.W)(),yt=Object(n.z)("p"),ht=Object(n.z)("code"),mt=Object(n.Z)("postcss-import"),ft=Object(n.Z)(" and "),vt=Object(n.z)("code"),St=Object(n.Z)("postcss-nested"),Et=Object(n.Z)(" are additional quality-of-life plugins."),It=Object(n.W)(),wt=Object(n.z)("p"),Ct=Object(n.z)("code"),qt=Object(n.Z)("cssnano"),Zt=Object(n.Z)(" minifies our CSS output."),zt=Object(n.W)(),Pt=Object(n.z)("p"),Wt=Object(n.z)("code"),Tt=Object(n.Z)("npm-run-all"),xt=Object(n.Z)(" is a tool to run multiple npm scripts in parallel."),Dt=Object(n.W)(),$t=Object(n.z)("h3"),Ht=Object(n.Z)("Initialise Tailwind CSS"),Mt=Object(n.W)(),Rt=Object(n.z)("p"),Lt=Object(n.Z)("Create the Tailwind configuration file with…"),At=Object(n.W)(),Ft=Object(n.z)("pre"),Nt=Object(n.W)(),Vt=Object(n.z)("p"),Jt=Object(n.Z)("We then have to include Svelte into the PurgeCSS block to ensure that Svelte styles are not removed."),_t=Object(n.W)(),Bt=Object(n.z)("pre"),Gt=Object(n.W)(),Kt=Object(n.z)("p"),Qt=Object(n.Z)("Instead of configuring "),Ut=Object(n.z)("code"),Xt=Object(n.Z)("static/global.css"),Yt=Object(n.Z)(" manually, we will set up PostCSS to transpile a source CSS file into a static CSS file to be used."),te=Object(n.W)(),ee=Object(n.z)("p"),se=Object(n.Z)("Create an asset "),ne=Object(n.z)("code"),ae=Object(n.Z)("/src/assets/global.css"),ce=Object(n.Z)(", and import Tailwind CSS styles."),oe=Object(n.W)(),pe=Object(n.z)("pre"),be=Object(n.W)(),je=Object(n.z)("h3"),Oe=Object(n.Z)("Configure PostCSS with "),le=Object(n.z)("code"),re=Object(n.Z)("svelte-preprocess"),ie=Object(n.W)(),ue=Object(n.z)("p"),ge=Object(n.Z)("In the root of our project, create "),de=Object(n.z)("code"),ke=Object(n.Z)("postcss.config.js"),ye=Object(n.Z)(", and load our PostCSS plugins."),he=Object(n.W)(),me=Object(n.z)("pre"),fe=Object(n.W)(),ve=Object(n.z)("p"),Se=Object(n.z)("code"),Ee=Object(n.Z)("postcss-import"),Ie=Object(n.Z)(" and "),we=Object(n.z)("code"),Ce=Object(n.Z)("postcss-nested"),qe=Object(n.Z)(" introduce some additional syntax that needs to be handled manually."),Ze=Object(n.W)(),ze=Object(n.z)("p"),Pe=Object(n.Z)("To do so, we use "),We=Object(n.z)("code"),Te=Object(n.Z)("svelte-preprocess"),xe=Object(n.Z)(". The preprocessor allows us to apply modifications to the code before it is passed into the Svelte engine."),De=Object(n.W)(),$e=Object(n.z)("p"),He=Object(n.Z)("First, create our preprocessor options object under "),Me=Object(n.z)("code"),Re=Object(n.Z)("svelte.config.js"),Le=Object(n.Z)("…"),Ae=Object(n.W)(),Fe=Object(n.z)("pre"),Ne=Object(n.W)(),Ve=Object(n.z)("p"),Je=Object(n.z)("code"),_e=Object(n.Z)("svelte.config.js"),Be=Object(n.Z)(" is used to configure our language server, such that the Svelte extension for VSCode and coc knows how to parse our source code and provide proper syntax highlighting and error messages."),Ge=Object(n.W)(),Ke=Object(n.z)("p"),Qe=Object(n.Z)("To enable the preprocessor for the language server, simply export  a "),Ue=Object(n.z)("code"),Xe=Object(n.Z)("preprocess"),Ye=Object(n.Z)(" object from "),ts=Object(n.z)("code"),es=Object(n.Z)("svelte.config.js"),ss=Object(n.Z)("."),ns=Object(n.W)(),as=Object(n.z)("pre"),cs=Object(n.W)(),os=Object(n.z)("p"),ps=Object(n.Z)("We also export the options object, since we want to use the same configuration for our build step under "),bs=Object(n.z)("code"),js=Object(n.Z)("rollup.config.js"),Os=Object(n.Z)(" or "),ls=Object(n.z)("code"),rs=Object(n.Z)("webpack.config.js"),is=Object(n.Z)("."),us=Object(n.W)(),gs=Object(n.z)("p"),ds=Object(n.Z)("For Rollup, add "),ks=Object(n.z)("code"),ys=Object(n.Z)("preprocess"),hs=Object(n.Z)(" to the "),ms=Object(n.z)("code"),fs=Object(n.Z)("svelte"),vs=Object(n.Z)(" object for both the client and server…"),Ss=Object(n.W)(),Es=Object(n.z)("pre"),Is=Object(n.W)(),ws=Object(n.z)("p"),Cs=Object(n.Z)("For Webpack, add "),qs=Object(n.z)("code"),Zs=Object(n.Z)("preprocess"),zs=Object(n.Z)(" to the "),Ps=Object(n.z)("code"),Ws=Object(n.Z)("/\\\\.(svelte|html)$/"),Ts=Object(n.Z)(" rule for both the client and server…"),xs=Object(n.W)(),Ds=Object(n.z)("pre"),$s=Object(n.W)(),Hs=Object(n.z)("h3"),Ms=Object(n.Z)("Adjust npm scripts"),Rs=Object(n.W)(),Ls=Object(n.z)("p"),As=Object(n.Z)("After setting up the configurations, we need to run two compilation steps for our project: one to compile the Svelte code into native Javascript, and one to compile PostCSS and apply our plugins, including Tailwind CSS."),Fs=Object(n.W)(),Ns=Object(n.z)("p"),Vs=Object(n.Z)("To do so, we use "),Js=Object(n.z)("code"),_s=Object(n.Z)("npm-run-all"),Bs=Object(n.Z)(" to simultaneously watch for changes and incrementally compile the necessary files for both compilation steps."),Gs=Object(n.W)(),Ks=Object(n.z)("p"),Qs=Object(n.Z)("We also add the PostCSS compilation step to our build step. In "),Us=Object(n.z)("code"),Xs=Object(n.Z)("package.json"),Ys=Object(n.Z)("…"),tn=Object(n.W)(),en=Object(n.z)("pre"),sn=Object(n.W)(),nn=Object(n.z)("p"),an=Object(n.Z)("Now you should be able to use Tailwind CSS in your Sapper project!"),this.h()},l(t){e=Object(n.o)(t,"H2",{});var cn=Object(n.m)(e);s=Object(n.q)(cn,"Why Tailwind CSS?"),cn.forEach(n.y),a=Object(n.p)(t),c=Object(n.o)(t,"H3",{});var on=Object(n.m)(c);o=Object(n.q)(on,"A constrained design system is a good thing"),on.forEach(n.y),p=Object(n.p)(t),b=Object(n.o)(t,"P",{});var pn=Object(n.m)(b);j=Object(n.q)(pn,"Although Svelte offers scoped CSS by default, Tailwind CSS is still useful as it offers a nicely constrained design system. As the number of components grows, it becomes increasingly difficult to keep all whitespacing, font-sizes, and colours consistent. Tailwind CSS solves these issues by providing sensible defaults for many CSS variables, and minimises the usage of magic numbers."),pn.forEach(n.y),O=Object(n.p)(t),l=Object(n.o)(t,"H3",{});var bn=Object(n.m)(l);r=Object(n.q)(bn,"Styling custom components"),bn.forEach(n.y),i=Object(n.p)(t),u=Object(n.o)(t,"P",{});var jn=Object(n.m)(u);g=Object(n.q)(jn,"In addition, Svelte does not support passing CSS classes into child components. For example, we cannot do this…"),jn.forEach(n.y),d=Object(n.p)(t),k=Object(n.o)(t,"PRE",{class:!0}),Object(n.m)(k).forEach(n.y),y=Object(n.p)(t),h=Object(n.o)(t,"P",{});var On=Object(n.m)(h);m=Object(n.q)(On,"… as the "),f=Object(n.o)(On,"CODE",{});var ln=Object(n.m)(f);v=Object(n.q)(ln,".margin-lg"),ln.forEach(n.y),S=Object(n.q)(On," class is treated as an unused CSS class, and is purged in the compiled application."),On.forEach(n.y),E=Object(n.p)(t),I=Object(n.o)(t,"P",{});var rn=Object(n.m)(I);w=Object(n.q)(rn,"This makes it extremely difficult to design flexible components that depend on layout and more."),rn.forEach(n.y),C=Object(n.p)(t),q=Object(n.o)(t,"P",{});var un=Object(n.m)(q);Z=Object(n.q)(un,"Since Tailwind CSS classes are global by default and not purged by Svelte, we can use Tailwind to enable this functionality."),un.forEach(n.y),z=Object(n.p)(t),P=Object(n.o)(t,"PRE",{class:!0}),Object(n.m)(P).forEach(n.y),W=Object(n.p)(t),T=Object(n.o)(t,"P",{});var gn=Object(n.m)(T);x=Object(n.q)(gn,"The "),D=Object(n.o)(gn,"CODE",{});var dn=Object(n.m)(D);$=Object(n.q)(dn,"div"),dn.forEach(n.y),H=Object(n.q)(gn," element in "),M=Object(n.o)(gn,"CODE",{});var kn=Object(n.m)(M);R=Object(n.q)(kn,"ChildCard.svelte"),kn.forEach(n.y),L=Object(n.q)(gn," will be built with the "),A=Object(n.o)(gn,"CODE",{});var yn=Object(n.m)(A);F=Object(n.q)(yn,"m-4"),yn.forEach(n.y),N=Object(n.q)(gn," class, which will inherit styles from Tailwind CSS."),gn.forEach(n.y),V=Object(n.p)(t),J=Object(n.o)(t,"H2",{});var hn=Object(n.m)(J);_=Object(n.q)(hn,"Integrating Tailwind CSS"),hn.forEach(n.y),B=Object(n.p)(t),G=Object(n.o)(t,"P",{});var mn=Object(n.m)(G);K=Object(n.q)(mn,"To add Tailwind CSS to Svelte and Sapper, we first have to integrate PostCSS into Sapper’s build step, as Tailwind CSS is a PostCSS plugin."),mn.forEach(n.y),Q=Object(n.p)(t),U=Object(n.o)(t,"H3",{});var fn=Object(n.m)(U);X=Object(n.q)(fn,"Install dependencies"),fn.forEach(n.y),Y=Object(n.p)(t),tt=Object(n.o)(t,"P",{});var vn=Object(n.m)(tt);et=Object(n.q)(vn,"First, we have to install a few extra dependencies."),vn.forEach(n.y),st=Object(n.p)(t),nt=Object(n.o)(t,"PRE",{class:!0}),Object(n.m)(nt).forEach(n.y),at=Object(n.p)(t),ct=Object(n.o)(t,"P",{});var Sn=Object(n.m)(ct);ot=Object(n.o)(Sn,"CODE",{});var En=Object(n.m)(ot);pt=Object(n.q)(En,"postcss-load-config"),En.forEach(n.y),bt=Object(n.q)(Sn," allows us to automatically load the "),jt=Object(n.o)(Sn,"CODE",{});var In=Object(n.m)(jt);Ot=Object(n.q)(In,"postcss.config.js"),In.forEach(n.y),lt=Object(n.q)(Sn," file in our project root if it exists, thus saving us some extra configuration required to integrate PostCSS into our build step."),Sn.forEach(n.y),rt=Object(n.p)(t),it=Object(n.o)(t,"P",{});var wn=Object(n.m)(it);ut=Object(n.o)(wn,"CODE",{});var Cn=Object(n.m)(ut);gt=Object(n.q)(Cn,"postcss-cli"),Cn.forEach(n.y),dt=Object(n.q)(wn," allows us to run PostCSS from the command line."),wn.forEach(n.y),kt=Object(n.p)(t),yt=Object(n.o)(t,"P",{});var qn=Object(n.m)(yt);ht=Object(n.o)(qn,"CODE",{});var Zn=Object(n.m)(ht);mt=Object(n.q)(Zn,"postcss-import"),Zn.forEach(n.y),ft=Object(n.q)(qn," and "),vt=Object(n.o)(qn,"CODE",{});var zn=Object(n.m)(vt);St=Object(n.q)(zn,"postcss-nested"),zn.forEach(n.y),Et=Object(n.q)(qn," are additional quality-of-life plugins."),qn.forEach(n.y),It=Object(n.p)(t),wt=Object(n.o)(t,"P",{});var Pn=Object(n.m)(wt);Ct=Object(n.o)(Pn,"CODE",{});var Wn=Object(n.m)(Ct);qt=Object(n.q)(Wn,"cssnano"),Wn.forEach(n.y),Zt=Object(n.q)(Pn," minifies our CSS output."),Pn.forEach(n.y),zt=Object(n.p)(t),Pt=Object(n.o)(t,"P",{});var Tn=Object(n.m)(Pt);Wt=Object(n.o)(Tn,"CODE",{});var xn=Object(n.m)(Wt);Tt=Object(n.q)(xn,"npm-run-all"),xn.forEach(n.y),xt=Object(n.q)(Tn," is a tool to run multiple npm scripts in parallel."),Tn.forEach(n.y),Dt=Object(n.p)(t),$t=Object(n.o)(t,"H3",{});var Dn=Object(n.m)($t);Ht=Object(n.q)(Dn,"Initialise Tailwind CSS"),Dn.forEach(n.y),Mt=Object(n.p)(t),Rt=Object(n.o)(t,"P",{});var $n=Object(n.m)(Rt);Lt=Object(n.q)($n,"Create the Tailwind configuration file with…"),$n.forEach(n.y),At=Object(n.p)(t),Ft=Object(n.o)(t,"PRE",{class:!0}),Object(n.m)(Ft).forEach(n.y),Nt=Object(n.p)(t),Vt=Object(n.o)(t,"P",{});var Hn=Object(n.m)(Vt);Jt=Object(n.q)(Hn,"We then have to include Svelte into the PurgeCSS block to ensure that Svelte styles are not removed."),Hn.forEach(n.y),_t=Object(n.p)(t),Bt=Object(n.o)(t,"PRE",{class:!0}),Object(n.m)(Bt).forEach(n.y),Gt=Object(n.p)(t),Kt=Object(n.o)(t,"P",{});var Mn=Object(n.m)(Kt);Qt=Object(n.q)(Mn,"Instead of configuring "),Ut=Object(n.o)(Mn,"CODE",{});var Rn=Object(n.m)(Ut);Xt=Object(n.q)(Rn,"static/global.css"),Rn.forEach(n.y),Yt=Object(n.q)(Mn," manually, we will set up PostCSS to transpile a source CSS file into a static CSS file to be used."),Mn.forEach(n.y),te=Object(n.p)(t),ee=Object(n.o)(t,"P",{});var Ln=Object(n.m)(ee);se=Object(n.q)(Ln,"Create an asset "),ne=Object(n.o)(Ln,"CODE",{});var An=Object(n.m)(ne);ae=Object(n.q)(An,"/src/assets/global.css"),An.forEach(n.y),ce=Object(n.q)(Ln,", and import Tailwind CSS styles."),Ln.forEach(n.y),oe=Object(n.p)(t),pe=Object(n.o)(t,"PRE",{class:!0}),Object(n.m)(pe).forEach(n.y),be=Object(n.p)(t),je=Object(n.o)(t,"H3",{});var Fn=Object(n.m)(je);Oe=Object(n.q)(Fn,"Configure PostCSS with "),le=Object(n.o)(Fn,"CODE",{});var Nn=Object(n.m)(le);re=Object(n.q)(Nn,"svelte-preprocess"),Nn.forEach(n.y),Fn.forEach(n.y),ie=Object(n.p)(t),ue=Object(n.o)(t,"P",{});var Vn=Object(n.m)(ue);ge=Object(n.q)(Vn,"In the root of our project, create "),de=Object(n.o)(Vn,"CODE",{});var Jn=Object(n.m)(de);ke=Object(n.q)(Jn,"postcss.config.js"),Jn.forEach(n.y),ye=Object(n.q)(Vn,", and load our PostCSS plugins."),Vn.forEach(n.y),he=Object(n.p)(t),me=Object(n.o)(t,"PRE",{class:!0}),Object(n.m)(me).forEach(n.y),fe=Object(n.p)(t),ve=Object(n.o)(t,"P",{});var _n=Object(n.m)(ve);Se=Object(n.o)(_n,"CODE",{});var Bn=Object(n.m)(Se);Ee=Object(n.q)(Bn,"postcss-import"),Bn.forEach(n.y),Ie=Object(n.q)(_n," and "),we=Object(n.o)(_n,"CODE",{});var Gn=Object(n.m)(we);Ce=Object(n.q)(Gn,"postcss-nested"),Gn.forEach(n.y),qe=Object(n.q)(_n," introduce some additional syntax that needs to be handled manually."),_n.forEach(n.y),Ze=Object(n.p)(t),ze=Object(n.o)(t,"P",{});var Kn=Object(n.m)(ze);Pe=Object(n.q)(Kn,"To do so, we use "),We=Object(n.o)(Kn,"CODE",{});var Qn=Object(n.m)(We);Te=Object(n.q)(Qn,"svelte-preprocess"),Qn.forEach(n.y),xe=Object(n.q)(Kn,". The preprocessor allows us to apply modifications to the code before it is passed into the Svelte engine."),Kn.forEach(n.y),De=Object(n.p)(t),$e=Object(n.o)(t,"P",{});var Un=Object(n.m)($e);He=Object(n.q)(Un,"First, create our preprocessor options object under "),Me=Object(n.o)(Un,"CODE",{});var Xn=Object(n.m)(Me);Re=Object(n.q)(Xn,"svelte.config.js"),Xn.forEach(n.y),Le=Object(n.q)(Un,"…"),Un.forEach(n.y),Ae=Object(n.p)(t),Fe=Object(n.o)(t,"PRE",{class:!0}),Object(n.m)(Fe).forEach(n.y),Ne=Object(n.p)(t),Ve=Object(n.o)(t,"P",{});var Yn=Object(n.m)(Ve);Je=Object(n.o)(Yn,"CODE",{});var ta=Object(n.m)(Je);_e=Object(n.q)(ta,"svelte.config.js"),ta.forEach(n.y),Be=Object(n.q)(Yn," is used to configure our language server, such that the Svelte extension for VSCode and coc knows how to parse our source code and provide proper syntax highlighting and error messages."),Yn.forEach(n.y),Ge=Object(n.p)(t),Ke=Object(n.o)(t,"P",{});var ea=Object(n.m)(Ke);Qe=Object(n.q)(ea,"To enable the preprocessor for the language server, simply export  a "),Ue=Object(n.o)(ea,"CODE",{});var sa=Object(n.m)(Ue);Xe=Object(n.q)(sa,"preprocess"),sa.forEach(n.y),Ye=Object(n.q)(ea," object from "),ts=Object(n.o)(ea,"CODE",{});var na=Object(n.m)(ts);es=Object(n.q)(na,"svelte.config.js"),na.forEach(n.y),ss=Object(n.q)(ea,"."),ea.forEach(n.y),ns=Object(n.p)(t),as=Object(n.o)(t,"PRE",{class:!0}),Object(n.m)(as).forEach(n.y),cs=Object(n.p)(t),os=Object(n.o)(t,"P",{});var aa=Object(n.m)(os);ps=Object(n.q)(aa,"We also export the options object, since we want to use the same configuration for our build step under "),bs=Object(n.o)(aa,"CODE",{});var ca=Object(n.m)(bs);js=Object(n.q)(ca,"rollup.config.js"),ca.forEach(n.y),Os=Object(n.q)(aa," or "),ls=Object(n.o)(aa,"CODE",{});var oa=Object(n.m)(ls);rs=Object(n.q)(oa,"webpack.config.js"),oa.forEach(n.y),is=Object(n.q)(aa,"."),aa.forEach(n.y),us=Object(n.p)(t),gs=Object(n.o)(t,"P",{});var pa=Object(n.m)(gs);ds=Object(n.q)(pa,"For Rollup, add "),ks=Object(n.o)(pa,"CODE",{});var ba=Object(n.m)(ks);ys=Object(n.q)(ba,"preprocess"),ba.forEach(n.y),hs=Object(n.q)(pa," to the "),ms=Object(n.o)(pa,"CODE",{});var ja=Object(n.m)(ms);fs=Object(n.q)(ja,"svelte"),ja.forEach(n.y),vs=Object(n.q)(pa," object for both the client and server…"),pa.forEach(n.y),Ss=Object(n.p)(t),Es=Object(n.o)(t,"PRE",{class:!0}),Object(n.m)(Es).forEach(n.y),Is=Object(n.p)(t),ws=Object(n.o)(t,"P",{});var Oa=Object(n.m)(ws);Cs=Object(n.q)(Oa,"For Webpack, add "),qs=Object(n.o)(Oa,"CODE",{});var la=Object(n.m)(qs);Zs=Object(n.q)(la,"preprocess"),la.forEach(n.y),zs=Object(n.q)(Oa," to the "),Ps=Object(n.o)(Oa,"CODE",{});var ra=Object(n.m)(Ps);Ws=Object(n.q)(ra,"/\\\\.(svelte|html)$/"),ra.forEach(n.y),Ts=Object(n.q)(Oa," rule for both the client and server…"),Oa.forEach(n.y),xs=Object(n.p)(t),Ds=Object(n.o)(t,"PRE",{class:!0}),Object(n.m)(Ds).forEach(n.y),$s=Object(n.p)(t),Hs=Object(n.o)(t,"H3",{});var ia=Object(n.m)(Hs);Ms=Object(n.q)(ia,"Adjust npm scripts"),ia.forEach(n.y),Rs=Object(n.p)(t),Ls=Object(n.o)(t,"P",{});var ua=Object(n.m)(Ls);As=Object(n.q)(ua,"After setting up the configurations, we need to run two compilation steps for our project: one to compile the Svelte code into native Javascript, and one to compile PostCSS and apply our plugins, including Tailwind CSS."),ua.forEach(n.y),Fs=Object(n.p)(t),Ns=Object(n.o)(t,"P",{});var ga=Object(n.m)(Ns);Vs=Object(n.q)(ga,"To do so, we use "),Js=Object(n.o)(ga,"CODE",{});var da=Object(n.m)(Js);_s=Object(n.q)(da,"npm-run-all"),da.forEach(n.y),Bs=Object(n.q)(ga," to simultaneously watch for changes and incrementally compile the necessary files for both compilation steps."),ga.forEach(n.y),Gs=Object(n.p)(t),Ks=Object(n.o)(t,"P",{});var ka=Object(n.m)(Ks);Qs=Object(n.q)(ka,"We also add the PostCSS compilation step to our build step. In "),Us=Object(n.o)(ka,"CODE",{});var ya=Object(n.m)(Us);Xs=Object(n.q)(ya,"package.json"),ya.forEach(n.y),Ys=Object(n.q)(ka,"…"),ka.forEach(n.y),tn=Object(n.p)(t),en=Object(n.o)(t,"PRE",{class:!0}),Object(n.m)(en).forEach(n.y),sn=Object(n.p)(t),nn=Object(n.o)(t,"P",{});var ha=Object(n.m)(nn);an=Object(n.q)(ha,"Now you should be able to use Tailwind CSS in your Sapper project!"),ha.forEach(n.y),this.h()},h(){Object(n.i)(k,"class","language-html"),Object(n.i)(P,"class","language-html"),Object(n.i)(nt,"class","language-bash"),Object(n.i)(Ft,"class","language-bash"),Object(n.i)(Bt,"class","language-javascript"),Object(n.i)(pe,"class","language-css"),Object(n.i)(me,"class","language-javascript"),Object(n.i)(Fe,"class","language-javascript"),Object(n.i)(as,"class","language-javascript"),Object(n.i)(Es,"class","language-javascript"),Object(n.i)(Ds,"class","language-javascript"),Object(n.i)(en,"class","language-json")},m(t,cn){Object(n.I)(t,e,cn),Object(n.g)(e,s),Object(n.I)(t,a,cn),Object(n.I)(t,c,cn),Object(n.g)(c,o),Object(n.I)(t,p,cn),Object(n.I)(t,b,cn),Object(n.g)(b,j),Object(n.I)(t,O,cn),Object(n.I)(t,l,cn),Object(n.g)(l,r),Object(n.I)(t,i,cn),Object(n.I)(t,u,cn),Object(n.g)(u,g),Object(n.I)(t,d,cn),Object(n.I)(t,k,cn),k.innerHTML='<code class="language-html"><span class="token comment">&lt;!-- Parent.svelte --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n  <span class="token selector">.margin-lg</span> <span class="token punctuation">&#123;</span>    // unused class warning\n    <span class="token property">margin</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildCard</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>margin-lg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code>',Object(n.I)(t,y,cn),Object(n.I)(t,h,cn),Object(n.g)(h,m),Object(n.g)(h,f),Object(n.g)(f,v),Object(n.g)(h,S),Object(n.I)(t,E,cn),Object(n.I)(t,I,cn),Object(n.g)(I,w),Object(n.I)(t,C,cn),Object(n.I)(t,q,cn),Object(n.g)(q,Z),Object(n.I)(t,z,cn),Object(n.I)(t,P,cn),P.innerHTML='<code class="language-html"><span class="token comment">&lt;!-- Parent.svelte --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildCard</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>m-4<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n\n\n<span class="token comment">&lt;!-- ChildCard.svelte --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">export</span> <span class="token punctuation">&#123;</span> className <span class="token keyword">as</span> <span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// exports a prop \'class\'</span>\n  <span class="token keyword">let</span> className<span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>&#123;className&#125;/</span><span class="token punctuation">></span></span></code>',Object(n.I)(t,W,cn),Object(n.I)(t,T,cn),Object(n.g)(T,x),Object(n.g)(T,D),Object(n.g)(D,$),Object(n.g)(T,H),Object(n.g)(T,M),Object(n.g)(M,R),Object(n.g)(T,L),Object(n.g)(T,A),Object(n.g)(A,F),Object(n.g)(T,N),Object(n.I)(t,V,cn),Object(n.I)(t,J,cn),Object(n.g)(J,_),Object(n.I)(t,B,cn),Object(n.I)(t,G,cn),Object(n.g)(G,K),Object(n.I)(t,Q,cn),Object(n.I)(t,U,cn),Object(n.g)(U,X),Object(n.I)(t,Y,cn),Object(n.I)(t,tt,cn),Object(n.g)(tt,et),Object(n.I)(t,st,cn),Object(n.I)(t,nt,cn),nt.innerHTML='<code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -D autoprefixer postcss-load-config <span class="token punctuation"></span>\npostcss-cli postcss-import postcss-nested cssnano <span class="token punctuation"></span>\ntailwindcss npm-run-all</code>',Object(n.I)(t,at,cn),Object(n.I)(t,ct,cn),Object(n.g)(ct,ot),Object(n.g)(ot,pt),Object(n.g)(ct,bt),Object(n.g)(ct,jt),Object(n.g)(jt,Ot),Object(n.g)(ct,lt),Object(n.I)(t,rt,cn),Object(n.I)(t,it,cn),Object(n.g)(it,ut),Object(n.g)(ut,gt),Object(n.g)(it,dt),Object(n.I)(t,kt,cn),Object(n.I)(t,yt,cn),Object(n.g)(yt,ht),Object(n.g)(ht,mt),Object(n.g)(yt,ft),Object(n.g)(yt,vt),Object(n.g)(vt,St),Object(n.g)(yt,Et),Object(n.I)(t,It,cn),Object(n.I)(t,wt,cn),Object(n.g)(wt,Ct),Object(n.g)(Ct,qt),Object(n.g)(wt,Zt),Object(n.I)(t,zt,cn),Object(n.I)(t,Pt,cn),Object(n.g)(Pt,Wt),Object(n.g)(Wt,Tt),Object(n.g)(Pt,xt),Object(n.I)(t,Dt,cn),Object(n.I)(t,$t,cn),Object(n.g)($t,Ht),Object(n.I)(t,Mt,cn),Object(n.I)(t,Rt,cn),Object(n.g)(Rt,Lt),Object(n.I)(t,At,cn),Object(n.I)(t,Ft,cn),Ft.innerHTML='<code class="language-bash">npx tailwind init</code>',Object(n.I)(t,Nt,cn),Object(n.I)(t,Vt,cn),Object(n.g)(Vt,Jt),Object(n.I)(t,_t,cn),Object(n.I)(t,Bt,cn),Bt.innerHTML='<code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  purge<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/**/*.svelte"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  theme<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n    extend<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  variants<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',Object(n.I)(t,Gt,cn),Object(n.I)(t,Kt,cn),Object(n.g)(Kt,Qt),Object(n.g)(Kt,Ut),Object(n.g)(Ut,Xt),Object(n.g)(Kt,Yt),Object(n.I)(t,te,cn),Object(n.I)(t,ee,cn),Object(n.g)(ee,se),Object(n.g)(ee,ne),Object(n.g)(ne,ae),Object(n.g)(ee,ce),Object(n.I)(t,oe,cn),Object(n.I)(t,pe,cn),pe.innerHTML='<code class="language-css"><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span></code>',Object(n.I)(t,be,cn),Object(n.I)(t,je,cn),Object(n.g)(je,Oe),Object(n.g)(je,le),Object(n.g)(le,re),Object(n.I)(t,ie,cn),Object(n.I)(t,ue,cn),Object(n.g)(ue,ge),Object(n.g)(ue,de),Object(n.g)(de,ke),Object(n.g)(ue,ye),Object(n.I)(t,he,cn),Object(n.I)(t,me,cn),me.innerHTML='<code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'postcss-import\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'postcss-nested\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'cssnano\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n      preset<span class="token operator">:</span> <span class="token string">\'default\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',Object(n.I)(t,fe,cn),Object(n.I)(t,ve,cn),Object(n.g)(ve,Se),Object(n.g)(Se,Ee),Object(n.g)(ve,Ie),Object(n.g)(ve,we),Object(n.g)(we,Ce),Object(n.g)(ve,qe),Object(n.I)(t,Ze,cn),Object(n.I)(t,ze,cn),Object(n.g)(ze,Pe),Object(n.g)(ze,We),Object(n.g)(We,Te),Object(n.g)(ze,xe),Object(n.I)(t,De,cn),Object(n.I)(t,$e,cn),Object(n.g)($e,He),Object(n.g)($e,Me),Object(n.g)(Me,Re),Object(n.g)($e,Le),Object(n.I)(t,Ae,cn),Object(n.I)(t,Fe,cn),Fe.innerHTML='<code class="language-javascript"><span class="token keyword">const</span> sveltePreprocess <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'svelte-preprocess\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> preprocessOptions <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  postcss<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'postcss-import\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'postcss-nested\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',Object(n.I)(t,Ne,cn),Object(n.I)(t,Ve,cn),Object(n.g)(Ve,Je),Object(n.g)(Je,_e),Object(n.g)(Ve,Be),Object(n.I)(t,Ge,cn),Object(n.I)(t,Ke,cn),Object(n.g)(Ke,Qe),Object(n.g)(Ke,Ue),Object(n.g)(Ue,Xe),Object(n.g)(Ke,Ye),Object(n.g)(Ke,ts),Object(n.g)(ts,es),Object(n.g)(Ke,ss),Object(n.I)(t,ns,cn),Object(n.I)(t,as,cn),as.innerHTML='<code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  preprocess<span class="token operator">:</span> <span class="token function">sveltePreprocess</span><span class="token punctuation">(</span>preprocessOptions<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  preprocessOptions<span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',Object(n.I)(t,cs,cn),Object(n.I)(t,os,cn),Object(n.g)(os,ps),Object(n.g)(os,bs),Object(n.g)(bs,js),Object(n.g)(os,Os),Object(n.g)(os,ls),Object(n.g)(ls,rs),Object(n.g)(os,is),Object(n.I)(t,us,cn),Object(n.I)(t,gs,cn),Object(n.g)(gs,ds),Object(n.g)(gs,ks),Object(n.g)(ks,ys),Object(n.g)(gs,hs),Object(n.g)(gs,ms),Object(n.g)(ms,fs),Object(n.g)(gs,vs),Object(n.I)(t,Ss,cn),Object(n.I)(t,Es,cn),Es.innerHTML='<code class="language-javascript"><span class="token keyword">const</span> preprocess <span class="token operator">=</span> <span class="token function">sveltePreprocess</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n  sourceMap<span class="token operator">:</span> dev<span class="token punctuation">,</span>       <span class="token comment">// additional preprocess option</span>\n  <span class="token operator">...</span>preprocessOptions<span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nclient<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n  <span class="token operator">...</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token operator">...</span>\n    <span class="token function">svelte</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n      preprocess<span class="token punctuation">,</span>\n      dev<span class="token punctuation">,</span>\n      <span class="token operator">...</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n\nserver<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n  <span class="token operator">...</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token operator">...</span>\n    <span class="token function">svelte</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n      preprocess<span class="token punctuation">,</span>\n      generate<span class="token operator">:</span> <span class="token string">\'ssr\'</span><span class="token punctuation">,</span>\n      <span class="token operator">...</span>\n<span class="token punctuation">&#125;</span></code>',Object(n.I)(t,Is,cn),Object(n.I)(t,ws,cn),Object(n.g)(ws,Cs),Object(n.g)(ws,qs),Object(n.g)(qs,Zs),Object(n.g)(ws,zs),Object(n.g)(ws,Ps),Object(n.g)(Ps,Ws),Object(n.g)(ws,Ts),Object(n.I)(t,xs,cn),Object(n.I)(t,Ds,cn),Ds.innerHTML='<code class="language-javascript">client<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n  <span class="token operator">...</span>\n    module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n      rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">&#123;</span>\n          test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(svelte|html)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n          use<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n            options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n              preprocess<span class="token punctuation">,</span>\n              <span class="token operator">...</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n\nserver<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n  <span class="token operator">...</span>\n    module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n      rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">&#123;</span>\n          test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(svelte|html)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n          use<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n            options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n              preprocess<span class="token punctuation">,</span>\n              <span class="token operator">...</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code>',Object(n.I)(t,$s,cn),Object(n.I)(t,Hs,cn),Object(n.g)(Hs,Ms),Object(n.I)(t,Rs,cn),Object(n.I)(t,Ls,cn),Object(n.g)(Ls,As),Object(n.I)(t,Fs,cn),Object(n.I)(t,Ns,cn),Object(n.g)(Ns,Vs),Object(n.g)(Ns,Js),Object(n.g)(Js,_s),Object(n.g)(Ns,Bs),Object(n.I)(t,Gs,cn),Object(n.I)(t,Ks,cn),Object(n.g)(Ks,Qs),Object(n.g)(Ks,Us),Object(n.g)(Us,Xs),Object(n.g)(Ks,Ys),Object(n.I)(t,tn,cn),Object(n.I)(t,en,cn),en.innerHTML='<code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n  <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"run-p watch:css watch:sapper"</span><span class="token punctuation">,</span>\n  <span class="token property">"watch:css"</span><span class="token operator">:</span> <span class="token string">"postcss src/assets/global.css -o static/global.css -w"</span><span class="token punctuation">,</span>\n  <span class="token property">"watch:sapper"</span><span class="token operator">:</span> <span class="token string">"sapper dev"</span><span class="token punctuation">,</span>\n  <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"run-s build:css build:sapper"</span><span class="token punctuation">,</span>\n  <span class="token property">"build:css"</span><span class="token operator">:</span> <span class="token string">"NODE_ENV=production postcss src/assets/global.css -o static/global.css"</span><span class="token punctuation">,</span>\n  <span class="token property">"build:sapper"</span><span class="token operator">:</span> <span class="token string">"NODE_ENV=production sapper build"</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code>',Object(n.I)(t,sn,cn),Object(n.I)(t,nn,cn),Object(n.g)(nn,an)},p:n.M,d(t){t&&Object(n.y)(e),t&&Object(n.y)(a),t&&Object(n.y)(c),t&&Object(n.y)(p),t&&Object(n.y)(b),t&&Object(n.y)(O),t&&Object(n.y)(l),t&&Object(n.y)(i),t&&Object(n.y)(u),t&&Object(n.y)(d),t&&Object(n.y)(k),t&&Object(n.y)(y),t&&Object(n.y)(h),t&&Object(n.y)(E),t&&Object(n.y)(I),t&&Object(n.y)(C),t&&Object(n.y)(q),t&&Object(n.y)(z),t&&Object(n.y)(P),t&&Object(n.y)(W),t&&Object(n.y)(T),t&&Object(n.y)(V),t&&Object(n.y)(J),t&&Object(n.y)(B),t&&Object(n.y)(G),t&&Object(n.y)(Q),t&&Object(n.y)(U),t&&Object(n.y)(Y),t&&Object(n.y)(tt),t&&Object(n.y)(st),t&&Object(n.y)(nt),t&&Object(n.y)(at),t&&Object(n.y)(ct),t&&Object(n.y)(rt),t&&Object(n.y)(it),t&&Object(n.y)(kt),t&&Object(n.y)(yt),t&&Object(n.y)(It),t&&Object(n.y)(wt),t&&Object(n.y)(zt),t&&Object(n.y)(Pt),t&&Object(n.y)(Dt),t&&Object(n.y)($t),t&&Object(n.y)(Mt),t&&Object(n.y)(Rt),t&&Object(n.y)(At),t&&Object(n.y)(Ft),t&&Object(n.y)(Nt),t&&Object(n.y)(Vt),t&&Object(n.y)(_t),t&&Object(n.y)(Bt),t&&Object(n.y)(Gt),t&&Object(n.y)(Kt),t&&Object(n.y)(te),t&&Object(n.y)(ee),t&&Object(n.y)(oe),t&&Object(n.y)(pe),t&&Object(n.y)(be),t&&Object(n.y)(je),t&&Object(n.y)(ie),t&&Object(n.y)(ue),t&&Object(n.y)(he),t&&Object(n.y)(me),t&&Object(n.y)(fe),t&&Object(n.y)(ve),t&&Object(n.y)(Ze),t&&Object(n.y)(ze),t&&Object(n.y)(De),t&&Object(n.y)($e),t&&Object(n.y)(Ae),t&&Object(n.y)(Fe),t&&Object(n.y)(Ne),t&&Object(n.y)(Ve),t&&Object(n.y)(Ge),t&&Object(n.y)(Ke),t&&Object(n.y)(ns),t&&Object(n.y)(as),t&&Object(n.y)(cs),t&&Object(n.y)(os),t&&Object(n.y)(us),t&&Object(n.y)(gs),t&&Object(n.y)(Ss),t&&Object(n.y)(Es),t&&Object(n.y)(Is),t&&Object(n.y)(ws),t&&Object(n.y)(xs),t&&Object(n.y)(Ds),t&&Object(n.y)($s),t&&Object(n.y)(Hs),t&&Object(n.y)(Rs),t&&Object(n.y)(Ls),t&&Object(n.y)(Fs),t&&Object(n.y)(Ns),t&&Object(n.y)(Gs),t&&Object(n.y)(Ks),t&&Object(n.y)(tn),t&&Object(n.y)(en),t&&Object(n.y)(sn),t&&Object(n.y)(nn)}}}function j(t){let e,s;const a=[O];let c={$$slots:{default:[b]},$$scope:{ctx:t}};for(let t=0;t<a.length;t+=1)c=Object(n.h)(c,a[t]);return e=new p({props:c}),{c(){Object(n.s)(e.$$.fragment)},l(t){Object(n.n)(e.$$.fragment,t)},m(t,a){Object(n.L)(e,t,a),s=!0},p(t,[s]){const c=0&s?Object(n.D)(a,[Object(n.C)(O)]):{};1&s&&(c.$$scope={dirty:s,ctx:t}),e.$set(c)},i(t){s||(Object(n.ab)(e.$$.fragment,t),s=!0)},o(t){Object(n.bb)(e.$$.fragment,t),s=!1},d(t){Object(n.w)(e,t)}}}const O={title:"Svelte, Sapper, and Tailwind CSS"},{title:l}=O;class r extends n.b{constructor(t){super(),Object(n.H)(this,t,null,j,n.S,{})}}e.default=r}}]);