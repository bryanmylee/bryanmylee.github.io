(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{3:function(t,e,s){"use strict";s.r(e),s.d(e,"metadata",(function(){return a}));var c=s(0);function n(t){let e,s,n,a,o,p,j,b,O,l,i,r,u,k,d,g,h,f,w,v,m,S,E,H,C,y,P,F,T,x,D,q,I,R,M,L,A,W,N,z,J,V,$,_,B,G,K,Q,U,X,Y,Z,tt,et,st,ct,nt,at,ot,pt,jt,bt,Ot,lt,it,rt,ut,kt,dt,gt,ht,ft,wt,vt,mt,St,Et,Ht,Ct,yt,Pt,Ft,Tt,xt,Dt,qt,It,Rt,Mt,Lt,At,Wt,Nt,zt,Jt,Vt,$t,_t,Bt,Gt,Kt,Qt,Ut,Xt,Yt,Zt,te,ee,se,ce,ne,ae,oe,pe,je,be,Oe,le,ie,re,ue,ke,de,ge,he,fe,we,ve,me,Se,Ee,He,Ce,ye,Pe,Fe,Te,xe,De,qe,Ie,Re,Me,Le,Ae,We,Ne,ze,Je,Ve,$e,_e,Be,Ge,Ke,Qe,Ue,Xe,Ye,Ze,ts,es,ss,cs,ns,as,os,ps,js,bs,Os,ls,is,rs,us,ks,ds,gs,hs,fs,ws,vs,ms,Ss,Es,Hs,Cs,ys,Ps,Fs,Ts,xs,Ds,qs,Is,Rs,Ms,Ls,As,Ws,Ns,zs,Js,Vs,$s,_s,Bs,Gs,Ks,Qs,Us,Xs,Ys,Zs,tc,ec,sc,cc,nc;return{c(){e=Object(c.p)("h2"),s=Object(c.H)("Why Tailwind CSS?"),n=Object(c.F)(),a=Object(c.p)("h3"),o=Object(c.H)("A constrained design system is a good thing"),p=Object(c.F)(),j=Object(c.p)("p"),b=Object(c.H)("Although Svelte offers scoped CSS by default, Tailwind CSS is still useful as it offers a nicely constrained design system. As the number of components grows, it becomes increasingly difficult to keep all whitespacing, font-sizes, and colours consistent. Tailwind CSS solves these issues by providing sensible defaults for many CSS variables, and minimises the usage of magic numbers."),O=Object(c.F)(),l=Object(c.p)("h3"),i=Object(c.H)("Styling custom components"),r=Object(c.F)(),u=Object(c.p)("p"),k=Object(c.H)("In addition, Svelte does not support passing CSS classes into child components. For example, we cannot do this…"),d=Object(c.F)(),g=Object(c.p)("pre"),h=Object(c.F)(),f=Object(c.p)("p"),w=Object(c.H)("… as the "),v=Object(c.p)("code"),m=Object(c.H)(".margin-lg"),S=Object(c.H)(" class is treated as an unused CSS class, and is purged in the compiled application."),E=Object(c.F)(),H=Object(c.p)("p"),C=Object(c.H)("This makes it extremely difficult to design flexible components that depend on layout and more."),y=Object(c.F)(),P=Object(c.p)("p"),F=Object(c.H)("Since Tailwind CSS classes are global by default and not purged by Svelte, we can use Tailwind to enable this functionality."),T=Object(c.F)(),x=Object(c.p)("pre"),D=Object(c.F)(),q=Object(c.p)("p"),I=Object(c.H)("The "),R=Object(c.p)("code"),M=Object(c.H)("div"),L=Object(c.H)(" element in "),A=Object(c.p)("code"),W=Object(c.H)("ChildCard.svelte"),N=Object(c.H)(" will be built with the "),z=Object(c.p)("code"),J=Object(c.H)("m-4"),V=Object(c.H)(" class, which will inherit styles from Tailwind CSS."),$=Object(c.F)(),_=Object(c.p)("h2"),B=Object(c.H)("Integrating Tailwind CSS"),G=Object(c.F)(),K=Object(c.p)("p"),Q=Object(c.H)("To add Tailwind CSS to Svelte and Sapper, we first have to integrate PostCSS into Sapper’s build step, as Tailwind CSS is a PostCSS plugin."),U=Object(c.F)(),X=Object(c.p)("h3"),Y=Object(c.H)("Install dependencies"),Z=Object(c.F)(),tt=Object(c.p)("p"),et=Object(c.H)("First, we have to install a few extra dependencies."),st=Object(c.F)(),ct=Object(c.p)("pre"),nt=Object(c.F)(),at=Object(c.p)("p"),ot=Object(c.p)("code"),pt=Object(c.H)("postcss-load-config"),jt=Object(c.H)(" allows us to automatically load the "),bt=Object(c.p)("code"),Ot=Object(c.H)("postcss.config.js"),lt=Object(c.H)(" file in our project root if it exists, thus saving us some extra configuration required to integrate PostCSS into our build step."),it=Object(c.F)(),rt=Object(c.p)("p"),ut=Object(c.p)("code"),kt=Object(c.H)("postcss-cli"),dt=Object(c.H)(" allows us to run PostCSS from the command line."),gt=Object(c.F)(),ht=Object(c.p)("p"),ft=Object(c.p)("code"),wt=Object(c.H)("postcss-import"),vt=Object(c.H)(" and "),mt=Object(c.p)("code"),St=Object(c.H)("postcss-nested"),Et=Object(c.H)(" are additional quality-of-life plugins."),Ht=Object(c.F)(),Ct=Object(c.p)("p"),yt=Object(c.p)("code"),Pt=Object(c.H)("cssnano"),Ft=Object(c.H)(" minifies our CSS output."),Tt=Object(c.F)(),xt=Object(c.p)("p"),Dt=Object(c.p)("code"),qt=Object(c.H)("npm-run-all"),It=Object(c.H)(" is a tool to run multiple npm scripts in parallel."),Rt=Object(c.F)(),Mt=Object(c.p)("h3"),Lt=Object(c.H)("Initialise Tailwind CSS"),At=Object(c.F)(),Wt=Object(c.p)("p"),Nt=Object(c.H)("Create the Tailwind configuration file with…"),zt=Object(c.F)(),Jt=Object(c.p)("pre"),Vt=Object(c.F)(),$t=Object(c.p)("p"),_t=Object(c.H)("We then have to include Svelte into the PurgeCSS block to ensure that Svelte styles are not removed."),Bt=Object(c.F)(),Gt=Object(c.p)("pre"),Kt=Object(c.F)(),Qt=Object(c.p)("p"),Ut=Object(c.H)("Instead of configuring "),Xt=Object(c.p)("code"),Yt=Object(c.H)("static/global.css"),Zt=Object(c.H)(" manually, we will set up PostCSS to transpile a source CSS file into a static CSS file to be used."),te=Object(c.F)(),ee=Object(c.p)("p"),se=Object(c.H)("Create an asset "),ce=Object(c.p)("code"),ne=Object(c.H)("/src/assets/global.css"),ae=Object(c.H)(", and import Tailwind CSS styles."),oe=Object(c.F)(),pe=Object(c.p)("pre"),je=Object(c.F)(),be=Object(c.p)("h3"),Oe=Object(c.H)("Configure PostCSS with "),le=Object(c.p)("code"),ie=Object(c.H)("svelte-preprocess"),re=Object(c.F)(),ue=Object(c.p)("p"),ke=Object(c.H)("In the root of our project, create "),de=Object(c.p)("code"),ge=Object(c.H)("postcss.config.js"),he=Object(c.H)(", and load our PostCSS plugins."),fe=Object(c.F)(),we=Object(c.p)("pre"),ve=Object(c.F)(),me=Object(c.p)("p"),Se=Object(c.p)("code"),Ee=Object(c.H)("postcss-import"),He=Object(c.H)(" and "),Ce=Object(c.p)("code"),ye=Object(c.H)("postcss-nested"),Pe=Object(c.H)(" introduce some additional syntax that needs to be handled manually."),Fe=Object(c.F)(),Te=Object(c.p)("p"),xe=Object(c.H)("To do so, we use "),De=Object(c.p)("code"),qe=Object(c.H)("svelte-preprocess"),Ie=Object(c.H)(". The preprocessor allows us to apply modifications to the code before it is passed into the Svelte engine."),Re=Object(c.F)(),Me=Object(c.p)("p"),Le=Object(c.H)("First, create our preprocessor options object under "),Ae=Object(c.p)("code"),We=Object(c.H)("svelte.config.js"),Ne=Object(c.H)("…"),ze=Object(c.F)(),Je=Object(c.p)("pre"),Ve=Object(c.F)(),$e=Object(c.p)("p"),_e=Object(c.p)("code"),Be=Object(c.H)("svelte.config.js"),Ge=Object(c.H)(" is used to configure our language server, such that the Svelte extension for VSCode and coc knows how to parse our source code and provide proper syntax highlighting and error messages."),Ke=Object(c.F)(),Qe=Object(c.p)("p"),Ue=Object(c.H)("To enable the preprocessor for the language server, simply export  a "),Xe=Object(c.p)("code"),Ye=Object(c.H)("preprocess"),Ze=Object(c.H)(" object from "),ts=Object(c.p)("code"),es=Object(c.H)("svelte.config.js"),ss=Object(c.H)("."),cs=Object(c.F)(),ns=Object(c.p)("pre"),as=Object(c.F)(),os=Object(c.p)("p"),ps=Object(c.H)("We also export the options object, since we want to use the same configuration for our build step under "),js=Object(c.p)("code"),bs=Object(c.H)("rollup.config.js"),Os=Object(c.H)(" or "),ls=Object(c.p)("code"),is=Object(c.H)("webpack.config.js"),rs=Object(c.H)("."),us=Object(c.F)(),ks=Object(c.p)("p"),ds=Object(c.H)("For Rollup, add "),gs=Object(c.p)("code"),hs=Object(c.H)("preprocess"),fs=Object(c.H)(" to the "),ws=Object(c.p)("code"),vs=Object(c.H)("svelte"),ms=Object(c.H)(" object for both the client and server…"),Ss=Object(c.F)(),Es=Object(c.p)("pre"),Hs=Object(c.F)(),Cs=Object(c.p)("p"),ys=Object(c.H)("For Webpack, add "),Ps=Object(c.p)("code"),Fs=Object(c.H)("preprocess"),Ts=Object(c.H)(" to the "),xs=Object(c.p)("code"),Ds=Object(c.H)("/\\\\.(svelte|html)$/"),qs=Object(c.H)(" rule for both the client and server…"),Is=Object(c.F)(),Rs=Object(c.p)("pre"),Ms=Object(c.F)(),Ls=Object(c.p)("h3"),As=Object(c.H)("Adjust npm scripts"),Ws=Object(c.F)(),Ns=Object(c.p)("p"),zs=Object(c.H)("After setting up the configurations, we need to run two compilation steps for our project: one to compile the Svelte code into native Javascript, and one to compile PostCSS and apply our plugins, including Tailwind CSS."),Js=Object(c.F)(),Vs=Object(c.p)("p"),$s=Object(c.H)("To do so, we use "),_s=Object(c.p)("code"),Bs=Object(c.H)("npm-run-all"),Gs=Object(c.H)(" to simultaneously watch for changes and incrementally compile the necessary files for both compilation steps."),Ks=Object(c.F)(),Qs=Object(c.p)("p"),Us=Object(c.H)("We also add the PostCSS compilation step to our build step. In "),Xs=Object(c.p)("code"),Ys=Object(c.H)("package.json"),Zs=Object(c.H)("…"),tc=Object(c.F)(),ec=Object(c.p)("pre"),sc=Object(c.F)(),cc=Object(c.p)("p"),nc=Object(c.H)("Now you should be able to use Tailwind CSS in your Sapper project!"),this.h()},l(t){e=Object(c.i)(t,"H2",{});var ac=Object(c.g)(e);s=Object(c.k)(ac,"Why Tailwind CSS?"),ac.forEach(c.o),n=Object(c.j)(t),a=Object(c.i)(t,"H3",{});var oc=Object(c.g)(a);o=Object(c.k)(oc,"A constrained design system is a good thing"),oc.forEach(c.o),p=Object(c.j)(t),j=Object(c.i)(t,"P",{});var pc=Object(c.g)(j);b=Object(c.k)(pc,"Although Svelte offers scoped CSS by default, Tailwind CSS is still useful as it offers a nicely constrained design system. As the number of components grows, it becomes increasingly difficult to keep all whitespacing, font-sizes, and colours consistent. Tailwind CSS solves these issues by providing sensible defaults for many CSS variables, and minimises the usage of magic numbers."),pc.forEach(c.o),O=Object(c.j)(t),l=Object(c.i)(t,"H3",{});var jc=Object(c.g)(l);i=Object(c.k)(jc,"Styling custom components"),jc.forEach(c.o),r=Object(c.j)(t),u=Object(c.i)(t,"P",{});var bc=Object(c.g)(u);k=Object(c.k)(bc,"In addition, Svelte does not support passing CSS classes into child components. For example, we cannot do this…"),bc.forEach(c.o),d=Object(c.j)(t),g=Object(c.i)(t,"PRE",{class:!0}),Object(c.g)(g).forEach(c.o),h=Object(c.j)(t),f=Object(c.i)(t,"P",{});var Oc=Object(c.g)(f);w=Object(c.k)(Oc,"… as the "),v=Object(c.i)(Oc,"CODE",{});var lc=Object(c.g)(v);m=Object(c.k)(lc,".margin-lg"),lc.forEach(c.o),S=Object(c.k)(Oc," class is treated as an unused CSS class, and is purged in the compiled application."),Oc.forEach(c.o),E=Object(c.j)(t),H=Object(c.i)(t,"P",{});var ic=Object(c.g)(H);C=Object(c.k)(ic,"This makes it extremely difficult to design flexible components that depend on layout and more."),ic.forEach(c.o),y=Object(c.j)(t),P=Object(c.i)(t,"P",{});var rc=Object(c.g)(P);F=Object(c.k)(rc,"Since Tailwind CSS classes are global by default and not purged by Svelte, we can use Tailwind to enable this functionality."),rc.forEach(c.o),T=Object(c.j)(t),x=Object(c.i)(t,"PRE",{class:!0}),Object(c.g)(x).forEach(c.o),D=Object(c.j)(t),q=Object(c.i)(t,"P",{});var uc=Object(c.g)(q);I=Object(c.k)(uc,"The "),R=Object(c.i)(uc,"CODE",{});var kc=Object(c.g)(R);M=Object(c.k)(kc,"div"),kc.forEach(c.o),L=Object(c.k)(uc," element in "),A=Object(c.i)(uc,"CODE",{});var dc=Object(c.g)(A);W=Object(c.k)(dc,"ChildCard.svelte"),dc.forEach(c.o),N=Object(c.k)(uc," will be built with the "),z=Object(c.i)(uc,"CODE",{});var gc=Object(c.g)(z);J=Object(c.k)(gc,"m-4"),gc.forEach(c.o),V=Object(c.k)(uc," class, which will inherit styles from Tailwind CSS."),uc.forEach(c.o),$=Object(c.j)(t),_=Object(c.i)(t,"H2",{});var hc=Object(c.g)(_);B=Object(c.k)(hc,"Integrating Tailwind CSS"),hc.forEach(c.o),G=Object(c.j)(t),K=Object(c.i)(t,"P",{});var fc=Object(c.g)(K);Q=Object(c.k)(fc,"To add Tailwind CSS to Svelte and Sapper, we first have to integrate PostCSS into Sapper’s build step, as Tailwind CSS is a PostCSS plugin."),fc.forEach(c.o),U=Object(c.j)(t),X=Object(c.i)(t,"H3",{});var wc=Object(c.g)(X);Y=Object(c.k)(wc,"Install dependencies"),wc.forEach(c.o),Z=Object(c.j)(t),tt=Object(c.i)(t,"P",{});var vc=Object(c.g)(tt);et=Object(c.k)(vc,"First, we have to install a few extra dependencies."),vc.forEach(c.o),st=Object(c.j)(t),ct=Object(c.i)(t,"PRE",{class:!0}),Object(c.g)(ct).forEach(c.o),nt=Object(c.j)(t),at=Object(c.i)(t,"P",{});var mc=Object(c.g)(at);ot=Object(c.i)(mc,"CODE",{});var Sc=Object(c.g)(ot);pt=Object(c.k)(Sc,"postcss-load-config"),Sc.forEach(c.o),jt=Object(c.k)(mc," allows us to automatically load the "),bt=Object(c.i)(mc,"CODE",{});var Ec=Object(c.g)(bt);Ot=Object(c.k)(Ec,"postcss.config.js"),Ec.forEach(c.o),lt=Object(c.k)(mc," file in our project root if it exists, thus saving us some extra configuration required to integrate PostCSS into our build step."),mc.forEach(c.o),it=Object(c.j)(t),rt=Object(c.i)(t,"P",{});var Hc=Object(c.g)(rt);ut=Object(c.i)(Hc,"CODE",{});var Cc=Object(c.g)(ut);kt=Object(c.k)(Cc,"postcss-cli"),Cc.forEach(c.o),dt=Object(c.k)(Hc," allows us to run PostCSS from the command line."),Hc.forEach(c.o),gt=Object(c.j)(t),ht=Object(c.i)(t,"P",{});var yc=Object(c.g)(ht);ft=Object(c.i)(yc,"CODE",{});var Pc=Object(c.g)(ft);wt=Object(c.k)(Pc,"postcss-import"),Pc.forEach(c.o),vt=Object(c.k)(yc," and "),mt=Object(c.i)(yc,"CODE",{});var Fc=Object(c.g)(mt);St=Object(c.k)(Fc,"postcss-nested"),Fc.forEach(c.o),Et=Object(c.k)(yc," are additional quality-of-life plugins."),yc.forEach(c.o),Ht=Object(c.j)(t),Ct=Object(c.i)(t,"P",{});var Tc=Object(c.g)(Ct);yt=Object(c.i)(Tc,"CODE",{});var xc=Object(c.g)(yt);Pt=Object(c.k)(xc,"cssnano"),xc.forEach(c.o),Ft=Object(c.k)(Tc," minifies our CSS output."),Tc.forEach(c.o),Tt=Object(c.j)(t),xt=Object(c.i)(t,"P",{});var Dc=Object(c.g)(xt);Dt=Object(c.i)(Dc,"CODE",{});var qc=Object(c.g)(Dt);qt=Object(c.k)(qc,"npm-run-all"),qc.forEach(c.o),It=Object(c.k)(Dc," is a tool to run multiple npm scripts in parallel."),Dc.forEach(c.o),Rt=Object(c.j)(t),Mt=Object(c.i)(t,"H3",{});var Ic=Object(c.g)(Mt);Lt=Object(c.k)(Ic,"Initialise Tailwind CSS"),Ic.forEach(c.o),At=Object(c.j)(t),Wt=Object(c.i)(t,"P",{});var Rc=Object(c.g)(Wt);Nt=Object(c.k)(Rc,"Create the Tailwind configuration file with…"),Rc.forEach(c.o),zt=Object(c.j)(t),Jt=Object(c.i)(t,"PRE",{class:!0}),Object(c.g)(Jt).forEach(c.o),Vt=Object(c.j)(t),$t=Object(c.i)(t,"P",{});var Mc=Object(c.g)($t);_t=Object(c.k)(Mc,"We then have to include Svelte into the PurgeCSS block to ensure that Svelte styles are not removed."),Mc.forEach(c.o),Bt=Object(c.j)(t),Gt=Object(c.i)(t,"PRE",{class:!0}),Object(c.g)(Gt).forEach(c.o),Kt=Object(c.j)(t),Qt=Object(c.i)(t,"P",{});var Lc=Object(c.g)(Qt);Ut=Object(c.k)(Lc,"Instead of configuring "),Xt=Object(c.i)(Lc,"CODE",{});var Ac=Object(c.g)(Xt);Yt=Object(c.k)(Ac,"static/global.css"),Ac.forEach(c.o),Zt=Object(c.k)(Lc," manually, we will set up PostCSS to transpile a source CSS file into a static CSS file to be used."),Lc.forEach(c.o),te=Object(c.j)(t),ee=Object(c.i)(t,"P",{});var Wc=Object(c.g)(ee);se=Object(c.k)(Wc,"Create an asset "),ce=Object(c.i)(Wc,"CODE",{});var Nc=Object(c.g)(ce);ne=Object(c.k)(Nc,"/src/assets/global.css"),Nc.forEach(c.o),ae=Object(c.k)(Wc,", and import Tailwind CSS styles."),Wc.forEach(c.o),oe=Object(c.j)(t),pe=Object(c.i)(t,"PRE",{class:!0}),Object(c.g)(pe).forEach(c.o),je=Object(c.j)(t),be=Object(c.i)(t,"H3",{});var zc=Object(c.g)(be);Oe=Object(c.k)(zc,"Configure PostCSS with "),le=Object(c.i)(zc,"CODE",{});var Jc=Object(c.g)(le);ie=Object(c.k)(Jc,"svelte-preprocess"),Jc.forEach(c.o),zc.forEach(c.o),re=Object(c.j)(t),ue=Object(c.i)(t,"P",{});var Vc=Object(c.g)(ue);ke=Object(c.k)(Vc,"In the root of our project, create "),de=Object(c.i)(Vc,"CODE",{});var $c=Object(c.g)(de);ge=Object(c.k)($c,"postcss.config.js"),$c.forEach(c.o),he=Object(c.k)(Vc,", and load our PostCSS plugins."),Vc.forEach(c.o),fe=Object(c.j)(t),we=Object(c.i)(t,"PRE",{class:!0}),Object(c.g)(we).forEach(c.o),ve=Object(c.j)(t),me=Object(c.i)(t,"P",{});var _c=Object(c.g)(me);Se=Object(c.i)(_c,"CODE",{});var Bc=Object(c.g)(Se);Ee=Object(c.k)(Bc,"postcss-import"),Bc.forEach(c.o),He=Object(c.k)(_c," and "),Ce=Object(c.i)(_c,"CODE",{});var Gc=Object(c.g)(Ce);ye=Object(c.k)(Gc,"postcss-nested"),Gc.forEach(c.o),Pe=Object(c.k)(_c," introduce some additional syntax that needs to be handled manually."),_c.forEach(c.o),Fe=Object(c.j)(t),Te=Object(c.i)(t,"P",{});var Kc=Object(c.g)(Te);xe=Object(c.k)(Kc,"To do so, we use "),De=Object(c.i)(Kc,"CODE",{});var Qc=Object(c.g)(De);qe=Object(c.k)(Qc,"svelte-preprocess"),Qc.forEach(c.o),Ie=Object(c.k)(Kc,". The preprocessor allows us to apply modifications to the code before it is passed into the Svelte engine."),Kc.forEach(c.o),Re=Object(c.j)(t),Me=Object(c.i)(t,"P",{});var Uc=Object(c.g)(Me);Le=Object(c.k)(Uc,"First, create our preprocessor options object under "),Ae=Object(c.i)(Uc,"CODE",{});var Xc=Object(c.g)(Ae);We=Object(c.k)(Xc,"svelte.config.js"),Xc.forEach(c.o),Ne=Object(c.k)(Uc,"…"),Uc.forEach(c.o),ze=Object(c.j)(t),Je=Object(c.i)(t,"PRE",{class:!0}),Object(c.g)(Je).forEach(c.o),Ve=Object(c.j)(t),$e=Object(c.i)(t,"P",{});var Yc=Object(c.g)($e);_e=Object(c.i)(Yc,"CODE",{});var Zc=Object(c.g)(_e);Be=Object(c.k)(Zc,"svelte.config.js"),Zc.forEach(c.o),Ge=Object(c.k)(Yc," is used to configure our language server, such that the Svelte extension for VSCode and coc knows how to parse our source code and provide proper syntax highlighting and error messages."),Yc.forEach(c.o),Ke=Object(c.j)(t),Qe=Object(c.i)(t,"P",{});var tn=Object(c.g)(Qe);Ue=Object(c.k)(tn,"To enable the preprocessor for the language server, simply export  a "),Xe=Object(c.i)(tn,"CODE",{});var en=Object(c.g)(Xe);Ye=Object(c.k)(en,"preprocess"),en.forEach(c.o),Ze=Object(c.k)(tn," object from "),ts=Object(c.i)(tn,"CODE",{});var sn=Object(c.g)(ts);es=Object(c.k)(sn,"svelte.config.js"),sn.forEach(c.o),ss=Object(c.k)(tn,"."),tn.forEach(c.o),cs=Object(c.j)(t),ns=Object(c.i)(t,"PRE",{class:!0}),Object(c.g)(ns).forEach(c.o),as=Object(c.j)(t),os=Object(c.i)(t,"P",{});var cn=Object(c.g)(os);ps=Object(c.k)(cn,"We also export the options object, since we want to use the same configuration for our build step under "),js=Object(c.i)(cn,"CODE",{});var nn=Object(c.g)(js);bs=Object(c.k)(nn,"rollup.config.js"),nn.forEach(c.o),Os=Object(c.k)(cn," or "),ls=Object(c.i)(cn,"CODE",{});var an=Object(c.g)(ls);is=Object(c.k)(an,"webpack.config.js"),an.forEach(c.o),rs=Object(c.k)(cn,"."),cn.forEach(c.o),us=Object(c.j)(t),ks=Object(c.i)(t,"P",{});var on=Object(c.g)(ks);ds=Object(c.k)(on,"For Rollup, add "),gs=Object(c.i)(on,"CODE",{});var pn=Object(c.g)(gs);hs=Object(c.k)(pn,"preprocess"),pn.forEach(c.o),fs=Object(c.k)(on," to the "),ws=Object(c.i)(on,"CODE",{});var jn=Object(c.g)(ws);vs=Object(c.k)(jn,"svelte"),jn.forEach(c.o),ms=Object(c.k)(on," object for both the client and server…"),on.forEach(c.o),Ss=Object(c.j)(t),Es=Object(c.i)(t,"PRE",{class:!0}),Object(c.g)(Es).forEach(c.o),Hs=Object(c.j)(t),Cs=Object(c.i)(t,"P",{});var bn=Object(c.g)(Cs);ys=Object(c.k)(bn,"For Webpack, add "),Ps=Object(c.i)(bn,"CODE",{});var On=Object(c.g)(Ps);Fs=Object(c.k)(On,"preprocess"),On.forEach(c.o),Ts=Object(c.k)(bn," to the "),xs=Object(c.i)(bn,"CODE",{});var ln=Object(c.g)(xs);Ds=Object(c.k)(ln,"/\\\\.(svelte|html)$/"),ln.forEach(c.o),qs=Object(c.k)(bn," rule for both the client and server…"),bn.forEach(c.o),Is=Object(c.j)(t),Rs=Object(c.i)(t,"PRE",{class:!0}),Object(c.g)(Rs).forEach(c.o),Ms=Object(c.j)(t),Ls=Object(c.i)(t,"H3",{});var rn=Object(c.g)(Ls);As=Object(c.k)(rn,"Adjust npm scripts"),rn.forEach(c.o),Ws=Object(c.j)(t),Ns=Object(c.i)(t,"P",{});var un=Object(c.g)(Ns);zs=Object(c.k)(un,"After setting up the configurations, we need to run two compilation steps for our project: one to compile the Svelte code into native Javascript, and one to compile PostCSS and apply our plugins, including Tailwind CSS."),un.forEach(c.o),Js=Object(c.j)(t),Vs=Object(c.i)(t,"P",{});var kn=Object(c.g)(Vs);$s=Object(c.k)(kn,"To do so, we use "),_s=Object(c.i)(kn,"CODE",{});var dn=Object(c.g)(_s);Bs=Object(c.k)(dn,"npm-run-all"),dn.forEach(c.o),Gs=Object(c.k)(kn," to simultaneously watch for changes and incrementally compile the necessary files for both compilation steps."),kn.forEach(c.o),Ks=Object(c.j)(t),Qs=Object(c.i)(t,"P",{});var gn=Object(c.g)(Qs);Us=Object(c.k)(gn,"We also add the PostCSS compilation step to our build step. In "),Xs=Object(c.i)(gn,"CODE",{});var hn=Object(c.g)(Xs);Ys=Object(c.k)(hn,"package.json"),hn.forEach(c.o),Zs=Object(c.k)(gn,"…"),gn.forEach(c.o),tc=Object(c.j)(t),ec=Object(c.i)(t,"PRE",{class:!0}),Object(c.g)(ec).forEach(c.o),sc=Object(c.j)(t),cc=Object(c.i)(t,"P",{});var fn=Object(c.g)(cc);nc=Object(c.k)(fn,"Now you should be able to use Tailwind CSS in your Sapper project!"),fn.forEach(c.o),this.h()},h(){Object(c.e)(g,"class","language-html"),Object(c.e)(x,"class","language-html"),Object(c.e)(ct,"class","language-bash"),Object(c.e)(Jt,"class","language-bash"),Object(c.e)(Gt,"class","language-javascript"),Object(c.e)(pe,"class","language-css"),Object(c.e)(we,"class","language-javascript"),Object(c.e)(Je,"class","language-javascript"),Object(c.e)(ns,"class","language-javascript"),Object(c.e)(Es,"class","language-javascript"),Object(c.e)(Rs,"class","language-javascript"),Object(c.e)(ec,"class","language-json")},m(t,ac){Object(c.w)(t,e,ac),Object(c.c)(e,s),Object(c.w)(t,n,ac),Object(c.w)(t,a,ac),Object(c.c)(a,o),Object(c.w)(t,p,ac),Object(c.w)(t,j,ac),Object(c.c)(j,b),Object(c.w)(t,O,ac),Object(c.w)(t,l,ac),Object(c.c)(l,i),Object(c.w)(t,r,ac),Object(c.w)(t,u,ac),Object(c.c)(u,k),Object(c.w)(t,d,ac),Object(c.w)(t,g,ac),g.innerHTML='<code class="language-html"><span class="token comment">&lt;!-- Parent.svelte --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n  <span class="token selector">.margin-lg</span> <span class="token punctuation">&#123;</span>    // unused class warning\n    <span class="token property">margin</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildCard</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>margin-lg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code>',Object(c.w)(t,h,ac),Object(c.w)(t,f,ac),Object(c.c)(f,w),Object(c.c)(f,v),Object(c.c)(v,m),Object(c.c)(f,S),Object(c.w)(t,E,ac),Object(c.w)(t,H,ac),Object(c.c)(H,C),Object(c.w)(t,y,ac),Object(c.w)(t,P,ac),Object(c.c)(P,F),Object(c.w)(t,T,ac),Object(c.w)(t,x,ac),x.innerHTML='<code class="language-html"><span class="token comment">&lt;!-- Parent.svelte --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildCard</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>m-4<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n\n\n<span class="token comment">&lt;!-- ChildCard.svelte --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">export</span> <span class="token punctuation">&#123;</span> className <span class="token keyword">as</span> <span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// exports a prop \'class\'</span>\n  <span class="token keyword">let</span> className<span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>&#123;className&#125;/</span><span class="token punctuation">></span></span></code>',Object(c.w)(t,D,ac),Object(c.w)(t,q,ac),Object(c.c)(q,I),Object(c.c)(q,R),Object(c.c)(R,M),Object(c.c)(q,L),Object(c.c)(q,A),Object(c.c)(A,W),Object(c.c)(q,N),Object(c.c)(q,z),Object(c.c)(z,J),Object(c.c)(q,V),Object(c.w)(t,$,ac),Object(c.w)(t,_,ac),Object(c.c)(_,B),Object(c.w)(t,G,ac),Object(c.w)(t,K,ac),Object(c.c)(K,Q),Object(c.w)(t,U,ac),Object(c.w)(t,X,ac),Object(c.c)(X,Y),Object(c.w)(t,Z,ac),Object(c.w)(t,tt,ac),Object(c.c)(tt,et),Object(c.w)(t,st,ac),Object(c.w)(t,ct,ac),ct.innerHTML='<code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -D autoprefixer postcss-load-config <span class="token punctuation"></span>\npostcss-cli postcss-import postcss-nested cssnano <span class="token punctuation"></span>\ntailwindcss npm-run-all</code>',Object(c.w)(t,nt,ac),Object(c.w)(t,at,ac),Object(c.c)(at,ot),Object(c.c)(ot,pt),Object(c.c)(at,jt),Object(c.c)(at,bt),Object(c.c)(bt,Ot),Object(c.c)(at,lt),Object(c.w)(t,it,ac),Object(c.w)(t,rt,ac),Object(c.c)(rt,ut),Object(c.c)(ut,kt),Object(c.c)(rt,dt),Object(c.w)(t,gt,ac),Object(c.w)(t,ht,ac),Object(c.c)(ht,ft),Object(c.c)(ft,wt),Object(c.c)(ht,vt),Object(c.c)(ht,mt),Object(c.c)(mt,St),Object(c.c)(ht,Et),Object(c.w)(t,Ht,ac),Object(c.w)(t,Ct,ac),Object(c.c)(Ct,yt),Object(c.c)(yt,Pt),Object(c.c)(Ct,Ft),Object(c.w)(t,Tt,ac),Object(c.w)(t,xt,ac),Object(c.c)(xt,Dt),Object(c.c)(Dt,qt),Object(c.c)(xt,It),Object(c.w)(t,Rt,ac),Object(c.w)(t,Mt,ac),Object(c.c)(Mt,Lt),Object(c.w)(t,At,ac),Object(c.w)(t,Wt,ac),Object(c.c)(Wt,Nt),Object(c.w)(t,zt,ac),Object(c.w)(t,Jt,ac),Jt.innerHTML='<code class="language-bash">npx tailwind init</code>',Object(c.w)(t,Vt,ac),Object(c.w)(t,$t,ac),Object(c.c)($t,_t),Object(c.w)(t,Bt,ac),Object(c.w)(t,Gt,ac),Gt.innerHTML='<code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  purge<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/**/*.svelte"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  theme<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n    extend<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  variants<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',Object(c.w)(t,Kt,ac),Object(c.w)(t,Qt,ac),Object(c.c)(Qt,Ut),Object(c.c)(Qt,Xt),Object(c.c)(Xt,Yt),Object(c.c)(Qt,Zt),Object(c.w)(t,te,ac),Object(c.w)(t,ee,ac),Object(c.c)(ee,se),Object(c.c)(ee,ce),Object(c.c)(ce,ne),Object(c.c)(ee,ae),Object(c.w)(t,oe,ac),Object(c.w)(t,pe,ac),pe.innerHTML='<code class="language-css"><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span></code>',Object(c.w)(t,je,ac),Object(c.w)(t,be,ac),Object(c.c)(be,Oe),Object(c.c)(be,le),Object(c.c)(le,ie),Object(c.w)(t,re,ac),Object(c.w)(t,ue,ac),Object(c.c)(ue,ke),Object(c.c)(ue,de),Object(c.c)(de,ge),Object(c.c)(ue,he),Object(c.w)(t,fe,ac),Object(c.w)(t,we,ac),we.innerHTML='<code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'postcss-import\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'postcss-nested\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'cssnano\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n      preset<span class="token operator">:</span> <span class="token string">\'default\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',Object(c.w)(t,ve,ac),Object(c.w)(t,me,ac),Object(c.c)(me,Se),Object(c.c)(Se,Ee),Object(c.c)(me,He),Object(c.c)(me,Ce),Object(c.c)(Ce,ye),Object(c.c)(me,Pe),Object(c.w)(t,Fe,ac),Object(c.w)(t,Te,ac),Object(c.c)(Te,xe),Object(c.c)(Te,De),Object(c.c)(De,qe),Object(c.c)(Te,Ie),Object(c.w)(t,Re,ac),Object(c.w)(t,Me,ac),Object(c.c)(Me,Le),Object(c.c)(Me,Ae),Object(c.c)(Ae,We),Object(c.c)(Me,Ne),Object(c.w)(t,ze,ac),Object(c.w)(t,Je,ac),Je.innerHTML='<code class="language-javascript"><span class="token keyword">const</span> sveltePreprocess <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'svelte-preprocess\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> preprocessOptions <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  postcss<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'postcss-import\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'postcss-nested\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',Object(c.w)(t,Ve,ac),Object(c.w)(t,$e,ac),Object(c.c)($e,_e),Object(c.c)(_e,Be),Object(c.c)($e,Ge),Object(c.w)(t,Ke,ac),Object(c.w)(t,Qe,ac),Object(c.c)(Qe,Ue),Object(c.c)(Qe,Xe),Object(c.c)(Xe,Ye),Object(c.c)(Qe,Ze),Object(c.c)(Qe,ts),Object(c.c)(ts,es),Object(c.c)(Qe,ss),Object(c.w)(t,cs,ac),Object(c.w)(t,ns,ac),ns.innerHTML='<code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  preprocess<span class="token operator">:</span> <span class="token function">sveltePreprocess</span><span class="token punctuation">(</span>preprocessOptions<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  preprocessOptions<span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',Object(c.w)(t,as,ac),Object(c.w)(t,os,ac),Object(c.c)(os,ps),Object(c.c)(os,js),Object(c.c)(js,bs),Object(c.c)(os,Os),Object(c.c)(os,ls),Object(c.c)(ls,is),Object(c.c)(os,rs),Object(c.w)(t,us,ac),Object(c.w)(t,ks,ac),Object(c.c)(ks,ds),Object(c.c)(ks,gs),Object(c.c)(gs,hs),Object(c.c)(ks,fs),Object(c.c)(ks,ws),Object(c.c)(ws,vs),Object(c.c)(ks,ms),Object(c.w)(t,Ss,ac),Object(c.w)(t,Es,ac),Es.innerHTML='<code class="language-javascript"><span class="token keyword">const</span> preprocess <span class="token operator">=</span> <span class="token function">sveltePreprocess</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n  sourceMap<span class="token operator">:</span> dev<span class="token punctuation">,</span>       <span class="token comment">// additional preprocess option</span>\n  <span class="token operator">...</span>preprocessOptions<span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nclient<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n  <span class="token operator">...</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token operator">...</span>\n    <span class="token function">svelte</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n      preprocess<span class="token punctuation">,</span>\n      dev<span class="token punctuation">,</span>\n      <span class="token operator">...</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n\nserver<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n  <span class="token operator">...</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token operator">...</span>\n    <span class="token function">svelte</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n      preprocess<span class="token punctuation">,</span>\n      generate<span class="token operator">:</span> <span class="token string">\'ssr\'</span><span class="token punctuation">,</span>\n      <span class="token operator">...</span>\n<span class="token punctuation">&#125;</span></code>',Object(c.w)(t,Hs,ac),Object(c.w)(t,Cs,ac),Object(c.c)(Cs,ys),Object(c.c)(Cs,Ps),Object(c.c)(Ps,Fs),Object(c.c)(Cs,Ts),Object(c.c)(Cs,xs),Object(c.c)(xs,Ds),Object(c.c)(Cs,qs),Object(c.w)(t,Is,ac),Object(c.w)(t,Rs,ac),Rs.innerHTML='<code class="language-javascript">client<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n  <span class="token operator">...</span>\n    module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n      rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">&#123;</span>\n          test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(svelte|html)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n          use<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n            options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n              preprocess<span class="token punctuation">,</span>\n              <span class="token operator">...</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n\nserver<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n  <span class="token operator">...</span>\n    module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n      rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">&#123;</span>\n          test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(svelte|html)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n          use<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n            options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n              preprocess<span class="token punctuation">,</span>\n              <span class="token operator">...</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code>',Object(c.w)(t,Ms,ac),Object(c.w)(t,Ls,ac),Object(c.c)(Ls,As),Object(c.w)(t,Ws,ac),Object(c.w)(t,Ns,ac),Object(c.c)(Ns,zs),Object(c.w)(t,Js,ac),Object(c.w)(t,Vs,ac),Object(c.c)(Vs,$s),Object(c.c)(Vs,_s),Object(c.c)(_s,Bs),Object(c.c)(Vs,Gs),Object(c.w)(t,Ks,ac),Object(c.w)(t,Qs,ac),Object(c.c)(Qs,Us),Object(c.c)(Qs,Xs),Object(c.c)(Xs,Ys),Object(c.c)(Qs,Zs),Object(c.w)(t,tc,ac),Object(c.w)(t,ec,ac),ec.innerHTML='<code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n  <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"run-p watch:css watch:sapper"</span><span class="token punctuation">,</span>\n  <span class="token property">"watch:css"</span><span class="token operator">:</span> <span class="token string">"postcss src/assets/global.css -o static/global.css -w"</span><span class="token punctuation">,</span>\n  <span class="token property">"watch:sapper"</span><span class="token operator">:</span> <span class="token string">"sapper dev"</span><span class="token punctuation">,</span>\n  <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"run-s build:css build:sapper"</span><span class="token punctuation">,</span>\n  <span class="token property">"build:css"</span><span class="token operator">:</span> <span class="token string">"NODE_ENV=production postcss src/assets/global.css -o static/global.css"</span><span class="token punctuation">,</span>\n  <span class="token property">"build:sapper"</span><span class="token operator">:</span> <span class="token string">"NODE_ENV=production sapper build"</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code>',Object(c.w)(t,sc,ac),Object(c.w)(t,cc,ac),Object(c.c)(cc,nc)},p:c.z,i:c.z,o:c.z,d(t){t&&Object(c.o)(e),t&&Object(c.o)(n),t&&Object(c.o)(a),t&&Object(c.o)(p),t&&Object(c.o)(j),t&&Object(c.o)(O),t&&Object(c.o)(l),t&&Object(c.o)(r),t&&Object(c.o)(u),t&&Object(c.o)(d),t&&Object(c.o)(g),t&&Object(c.o)(h),t&&Object(c.o)(f),t&&Object(c.o)(E),t&&Object(c.o)(H),t&&Object(c.o)(y),t&&Object(c.o)(P),t&&Object(c.o)(T),t&&Object(c.o)(x),t&&Object(c.o)(D),t&&Object(c.o)(q),t&&Object(c.o)($),t&&Object(c.o)(_),t&&Object(c.o)(G),t&&Object(c.o)(K),t&&Object(c.o)(U),t&&Object(c.o)(X),t&&Object(c.o)(Z),t&&Object(c.o)(tt),t&&Object(c.o)(st),t&&Object(c.o)(ct),t&&Object(c.o)(nt),t&&Object(c.o)(at),t&&Object(c.o)(it),t&&Object(c.o)(rt),t&&Object(c.o)(gt),t&&Object(c.o)(ht),t&&Object(c.o)(Ht),t&&Object(c.o)(Ct),t&&Object(c.o)(Tt),t&&Object(c.o)(xt),t&&Object(c.o)(Rt),t&&Object(c.o)(Mt),t&&Object(c.o)(At),t&&Object(c.o)(Wt),t&&Object(c.o)(zt),t&&Object(c.o)(Jt),t&&Object(c.o)(Vt),t&&Object(c.o)($t),t&&Object(c.o)(Bt),t&&Object(c.o)(Gt),t&&Object(c.o)(Kt),t&&Object(c.o)(Qt),t&&Object(c.o)(te),t&&Object(c.o)(ee),t&&Object(c.o)(oe),t&&Object(c.o)(pe),t&&Object(c.o)(je),t&&Object(c.o)(be),t&&Object(c.o)(re),t&&Object(c.o)(ue),t&&Object(c.o)(fe),t&&Object(c.o)(we),t&&Object(c.o)(ve),t&&Object(c.o)(me),t&&Object(c.o)(Fe),t&&Object(c.o)(Te),t&&Object(c.o)(Re),t&&Object(c.o)(Me),t&&Object(c.o)(ze),t&&Object(c.o)(Je),t&&Object(c.o)(Ve),t&&Object(c.o)($e),t&&Object(c.o)(Ke),t&&Object(c.o)(Qe),t&&Object(c.o)(cs),t&&Object(c.o)(ns),t&&Object(c.o)(as),t&&Object(c.o)(os),t&&Object(c.o)(us),t&&Object(c.o)(ks),t&&Object(c.o)(Ss),t&&Object(c.o)(Es),t&&Object(c.o)(Hs),t&&Object(c.o)(Cs),t&&Object(c.o)(Is),t&&Object(c.o)(Rs),t&&Object(c.o)(Ms),t&&Object(c.o)(Ls),t&&Object(c.o)(Ws),t&&Object(c.o)(Ns),t&&Object(c.o)(Js),t&&Object(c.o)(Vs),t&&Object(c.o)(Ks),t&&Object(c.o)(Qs),t&&Object(c.o)(tc),t&&Object(c.o)(ec),t&&Object(c.o)(sc),t&&Object(c.o)(cc)}}}const a={title:"Svelte, Sapper, and Tailwind CSS"},{title:o}=a;class p extends c.a{constructor(t){super(),Object(c.v)(this,t,null,n,c.C,{})}}e.default=p}}]);