(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{25:function(t,e,s){"use strict";s.r(e),s.d(e,"metadata",(function(){return j}));var n=s(0);function a(t){let e,s;const a=t[1].default,c=Object(n.u)(a,t,t[0],null);return{c(){e=Object(n.y)("div"),c&&c.c(),this.h()},l(t){e=Object(n.n)(t,"DIV",{class:!0});var s=Object(n.l)(e);c&&c.l(s),s.forEach(n.x),this.h()},h(){Object(n.h)(e,"class","prose")},m(t,a){Object(n.H)(t,e,a),c&&c.m(e,null),s=!0},p(t,[e]){c&&c.p&&1&e&&Object(n.db)(c,a,t,t[0],e,null,null)},i(t){s||(Object(n.ab)(c,t),s=!0)},o(t){Object(n.bb)(c,t),s=!1},d(t){t&&Object(n.x)(e),c&&c.d(t)}}}function c(t,e,s){let{$$slots:n={},$$scope:a}=e;return t.$$set=t=>{"$$scope"in t&&s(0,a=t.$$scope)},[a,n]}class o extends n.a{constructor(t){super(),Object(n.G)(this,t,c,a,n.R,{})}}var p=o;function b(t){let e,s,a,c,o,p,b,l,j,O,r,i,u,f,d,k,h,g,x,v,m,y,S,E,H,w,C,Y,P,T,V,D,$,R,q,I,L,M,A,F,W,N,J,z,G,_,B,K,Q,U,X,Z,tt,et,st,nt,at,ct,ot,pt,bt,lt,jt,Ot,rt,it,ut,ft,dt,kt,ht,gt,xt,vt,mt,yt,St,Et,Ht,wt,Ct,Yt,Pt,Tt,Vt,Dt,$t,Rt,qt,It,Lt,Mt,At,Ft,Wt,Nt,Jt,zt,Gt,_t,Bt,Kt,Qt,Ut,Xt,Zt,te,ee,se,ne,ae,ce,oe,pe,be,le,je,Oe,re,ie,ue,fe,de,ke,he,ge,xe,ve,me,ye,Se,Ee,He,we,Ce,Ye,Pe,Te,Ve,De,$e,Re,qe,Ie,Le,Me,Ae,Fe,We,Ne,Je,ze,Ge,_e,Be,Ke,Qe,Ue,Xe,Ze,ts,es,ss,ns,as,cs,os,ps,bs,ls,js,Os,rs,is,us,fs,ds,ks,hs,gs,xs,vs,ms,ys,Ss,Es,Hs,ws,Cs,Ys,Ps,Ts,Vs,Ds,$s,Rs,qs,Is,Ls,Ms,As,Fs,Ws,Ns,Js,zs,Gs,_s,Bs,Ks,Qs,Us,Xs,Zs,tn,en,sn,nn,an;return{c(){e=Object(n.y)("h2"),s=Object(n.Y)("Why Tailwind CSS?"),a=Object(n.V)(),c=Object(n.y)("h3"),o=Object(n.Y)("A constrained design system is a good thing"),p=Object(n.V)(),b=Object(n.y)("p"),l=Object(n.Y)("Although Svelte offers scoped CSS by default, Tailwind CSS is still useful as it offers a nicely constrained design system. As the number of components grows, it becomes increasingly difficult to keep all whitespacing, font-sizes, and colours consistent. Tailwind CSS solves these issues by providing sensible defaults for many CSS variables, and minimises the usage of magic numbers."),j=Object(n.V)(),O=Object(n.y)("h3"),r=Object(n.Y)("Styling custom components"),i=Object(n.V)(),u=Object(n.y)("p"),f=Object(n.Y)("In addition, Svelte does not support passing CSS classes into child components. For example, we cannot do this…"),d=Object(n.V)(),k=Object(n.y)("pre"),h=Object(n.V)(),g=Object(n.y)("p"),x=Object(n.Y)("… as the "),v=Object(n.y)("code"),m=Object(n.Y)(".margin-lg"),y=Object(n.Y)(" class is treated as an unused CSS class, and is purged in the compiled application."),S=Object(n.V)(),E=Object(n.y)("p"),H=Object(n.Y)("This makes it extremely difficult to design flexible components that depend on layout and more."),w=Object(n.V)(),C=Object(n.y)("p"),Y=Object(n.Y)("Since Tailwind CSS classes are global by default and not purged by Svelte, we can use Tailwind to enable this functionality."),P=Object(n.V)(),T=Object(n.y)("pre"),V=Object(n.V)(),D=Object(n.y)("p"),$=Object(n.Y)("The "),R=Object(n.y)("code"),q=Object(n.Y)("div"),I=Object(n.Y)(" element in "),L=Object(n.y)("code"),M=Object(n.Y)("ChildCard.svelte"),A=Object(n.Y)(" will be built with the "),F=Object(n.y)("code"),W=Object(n.Y)("m-4"),N=Object(n.Y)(" class, which will inherit styles from Tailwind CSS."),J=Object(n.V)(),z=Object(n.y)("h2"),G=Object(n.Y)("Integrating Tailwind CSS"),_=Object(n.V)(),B=Object(n.y)("p"),K=Object(n.Y)("To add Tailwind CSS to Svelte and Sapper, we first have to integrate PostCSS into Sapper’s build step, as Tailwind CSS is a PostCSS plugin."),Q=Object(n.V)(),U=Object(n.y)("h3"),X=Object(n.Y)("Install dependencies"),Z=Object(n.V)(),tt=Object(n.y)("p"),et=Object(n.Y)("First, we have to install a few extra dependencies."),st=Object(n.V)(),nt=Object(n.y)("pre"),at=Object(n.V)(),ct=Object(n.y)("p"),ot=Object(n.y)("code"),pt=Object(n.Y)("postcss-load-config"),bt=Object(n.Y)(" allows us to automatically load the "),lt=Object(n.y)("code"),jt=Object(n.Y)("postcss.config.js"),Ot=Object(n.Y)(" file in our project root if it exists, thus saving us some extra configuration required to integrate PostCSS into our build step."),rt=Object(n.V)(),it=Object(n.y)("p"),ut=Object(n.y)("code"),ft=Object(n.Y)("postcss-cli"),dt=Object(n.Y)(" allows us to run PostCSS from the command line."),kt=Object(n.V)(),ht=Object(n.y)("p"),gt=Object(n.y)("code"),xt=Object(n.Y)("postcss-import"),vt=Object(n.Y)(" and "),mt=Object(n.y)("code"),yt=Object(n.Y)("postcss-nested"),St=Object(n.Y)(" are additional quality-of-life plugins."),Et=Object(n.V)(),Ht=Object(n.y)("p"),wt=Object(n.y)("code"),Ct=Object(n.Y)("cssnano"),Yt=Object(n.Y)(" minifies our CSS output."),Pt=Object(n.V)(),Tt=Object(n.y)("p"),Vt=Object(n.y)("code"),Dt=Object(n.Y)("npm-run-all"),$t=Object(n.Y)(" is a tool to run multiple npm scripts in parallel."),Rt=Object(n.V)(),qt=Object(n.y)("h3"),It=Object(n.Y)("Initialise Tailwind CSS"),Lt=Object(n.V)(),Mt=Object(n.y)("p"),At=Object(n.Y)("Create the Tailwind configuration file with…"),Ft=Object(n.V)(),Wt=Object(n.y)("pre"),Nt=Object(n.V)(),Jt=Object(n.y)("p"),zt=Object(n.Y)("We then have to include Svelte into the PurgeCSS block to ensure that Svelte styles are not removed."),Gt=Object(n.V)(),_t=Object(n.y)("pre"),Bt=Object(n.V)(),Kt=Object(n.y)("p"),Qt=Object(n.Y)("Instead of configuring "),Ut=Object(n.y)("code"),Xt=Object(n.Y)("static/global.css"),Zt=Object(n.Y)(" manually, we will set up PostCSS to transpile a source CSS file into a static CSS file to be used."),te=Object(n.V)(),ee=Object(n.y)("p"),se=Object(n.Y)("Create an asset "),ne=Object(n.y)("code"),ae=Object(n.Y)("/src/assets/global.css"),ce=Object(n.Y)(", and import Tailwind CSS styles."),oe=Object(n.V)(),pe=Object(n.y)("pre"),be=Object(n.V)(),le=Object(n.y)("h3"),je=Object(n.Y)("Configure PostCSS with "),Oe=Object(n.y)("code"),re=Object(n.Y)("svelte-preprocess"),ie=Object(n.V)(),ue=Object(n.y)("p"),fe=Object(n.Y)("In the root of our project, create "),de=Object(n.y)("code"),ke=Object(n.Y)("postcss.config.js"),he=Object(n.Y)(", and load our PostCSS plugins."),ge=Object(n.V)(),xe=Object(n.y)("pre"),ve=Object(n.V)(),me=Object(n.y)("p"),ye=Object(n.y)("code"),Se=Object(n.Y)("postcss-import"),Ee=Object(n.Y)(" and "),He=Object(n.y)("code"),we=Object(n.Y)("postcss-nested"),Ce=Object(n.Y)(" introduce some additional syntax that needs to be handled manually."),Ye=Object(n.V)(),Pe=Object(n.y)("p"),Te=Object(n.Y)("To do so, we use "),Ve=Object(n.y)("code"),De=Object(n.Y)("svelte-preprocess"),$e=Object(n.Y)(". The preprocessor allows us to apply modifications to the code before it is passed into the Svelte engine."),Re=Object(n.V)(),qe=Object(n.y)("p"),Ie=Object(n.Y)("First, create our preprocessor options object under "),Le=Object(n.y)("code"),Me=Object(n.Y)("svelte.config.js"),Ae=Object(n.Y)("…"),Fe=Object(n.V)(),We=Object(n.y)("pre"),Ne=Object(n.V)(),Je=Object(n.y)("p"),ze=Object(n.y)("code"),Ge=Object(n.Y)("svelte.config.js"),_e=Object(n.Y)(" is used to configure our language server, such that the Svelte extension for VSCode and coc knows how to parse our source code and provide proper syntax highlighting and error messages."),Be=Object(n.V)(),Ke=Object(n.y)("p"),Qe=Object(n.Y)("To enable the preprocessor for the language server, simply export  a "),Ue=Object(n.y)("code"),Xe=Object(n.Y)("preprocess"),Ze=Object(n.Y)(" object from "),ts=Object(n.y)("code"),es=Object(n.Y)("svelte.config.js"),ss=Object(n.Y)("."),ns=Object(n.V)(),as=Object(n.y)("pre"),cs=Object(n.V)(),os=Object(n.y)("p"),ps=Object(n.Y)("We also export the options object, since we want to use the same configuration for our build step under "),bs=Object(n.y)("code"),ls=Object(n.Y)("rollup.config.js"),js=Object(n.Y)(" or "),Os=Object(n.y)("code"),rs=Object(n.Y)("webpack.config.js"),is=Object(n.Y)("."),us=Object(n.V)(),fs=Object(n.y)("p"),ds=Object(n.Y)("For Rollup, add "),ks=Object(n.y)("code"),hs=Object(n.Y)("preprocess"),gs=Object(n.Y)(" to the "),xs=Object(n.y)("code"),vs=Object(n.Y)("svelte"),ms=Object(n.Y)(" object for both the client and server…"),ys=Object(n.V)(),Ss=Object(n.y)("pre"),Es=Object(n.V)(),Hs=Object(n.y)("p"),ws=Object(n.Y)("For Webpack, add "),Cs=Object(n.y)("code"),Ys=Object(n.Y)("preprocess"),Ps=Object(n.Y)(" to the "),Ts=Object(n.y)("code"),Vs=Object(n.Y)("/\\\\.(svelte|html)$/"),Ds=Object(n.Y)(" rule for both the client and server…"),$s=Object(n.V)(),Rs=Object(n.y)("pre"),qs=Object(n.V)(),Is=Object(n.y)("h3"),Ls=Object(n.Y)("Adjust npm scripts"),Ms=Object(n.V)(),As=Object(n.y)("p"),Fs=Object(n.Y)("After setting up the configurations, we need to run two compilation steps for our project: one to compile the Svelte code into native Javascript, and one to compile PostCSS and apply our plugins, including Tailwind CSS."),Ws=Object(n.V)(),Ns=Object(n.y)("p"),Js=Object(n.Y)("To do so, we use "),zs=Object(n.y)("code"),Gs=Object(n.Y)("npm-run-all"),_s=Object(n.Y)(" to simultaneously watch for changes and incrementally compile the necessary files for both compilation steps."),Bs=Object(n.V)(),Ks=Object(n.y)("p"),Qs=Object(n.Y)("We also add the PostCSS compilation step to our build step. In "),Us=Object(n.y)("code"),Xs=Object(n.Y)("package.json"),Zs=Object(n.Y)("…"),tn=Object(n.V)(),en=Object(n.y)("pre"),sn=Object(n.V)(),nn=Object(n.y)("p"),an=Object(n.Y)("Now you should be able to use Tailwind CSS in your Sapper project!"),this.h()},l(t){e=Object(n.n)(t,"H2",{});var cn=Object(n.l)(e);s=Object(n.p)(cn,"Why Tailwind CSS?"),cn.forEach(n.x),a=Object(n.o)(t),c=Object(n.n)(t,"H3",{});var on=Object(n.l)(c);o=Object(n.p)(on,"A constrained design system is a good thing"),on.forEach(n.x),p=Object(n.o)(t),b=Object(n.n)(t,"P",{});var pn=Object(n.l)(b);l=Object(n.p)(pn,"Although Svelte offers scoped CSS by default, Tailwind CSS is still useful as it offers a nicely constrained design system. As the number of components grows, it becomes increasingly difficult to keep all whitespacing, font-sizes, and colours consistent. Tailwind CSS solves these issues by providing sensible defaults for many CSS variables, and minimises the usage of magic numbers."),pn.forEach(n.x),j=Object(n.o)(t),O=Object(n.n)(t,"H3",{});var bn=Object(n.l)(O);r=Object(n.p)(bn,"Styling custom components"),bn.forEach(n.x),i=Object(n.o)(t),u=Object(n.n)(t,"P",{});var ln=Object(n.l)(u);f=Object(n.p)(ln,"In addition, Svelte does not support passing CSS classes into child components. For example, we cannot do this…"),ln.forEach(n.x),d=Object(n.o)(t),k=Object(n.n)(t,"PRE",{class:!0}),Object(n.l)(k).forEach(n.x),h=Object(n.o)(t),g=Object(n.n)(t,"P",{});var jn=Object(n.l)(g);x=Object(n.p)(jn,"… as the "),v=Object(n.n)(jn,"CODE",{});var On=Object(n.l)(v);m=Object(n.p)(On,".margin-lg"),On.forEach(n.x),y=Object(n.p)(jn," class is treated as an unused CSS class, and is purged in the compiled application."),jn.forEach(n.x),S=Object(n.o)(t),E=Object(n.n)(t,"P",{});var rn=Object(n.l)(E);H=Object(n.p)(rn,"This makes it extremely difficult to design flexible components that depend on layout and more."),rn.forEach(n.x),w=Object(n.o)(t),C=Object(n.n)(t,"P",{});var un=Object(n.l)(C);Y=Object(n.p)(un,"Since Tailwind CSS classes are global by default and not purged by Svelte, we can use Tailwind to enable this functionality."),un.forEach(n.x),P=Object(n.o)(t),T=Object(n.n)(t,"PRE",{class:!0}),Object(n.l)(T).forEach(n.x),V=Object(n.o)(t),D=Object(n.n)(t,"P",{});var fn=Object(n.l)(D);$=Object(n.p)(fn,"The "),R=Object(n.n)(fn,"CODE",{});var dn=Object(n.l)(R);q=Object(n.p)(dn,"div"),dn.forEach(n.x),I=Object(n.p)(fn," element in "),L=Object(n.n)(fn,"CODE",{});var kn=Object(n.l)(L);M=Object(n.p)(kn,"ChildCard.svelte"),kn.forEach(n.x),A=Object(n.p)(fn," will be built with the "),F=Object(n.n)(fn,"CODE",{});var hn=Object(n.l)(F);W=Object(n.p)(hn,"m-4"),hn.forEach(n.x),N=Object(n.p)(fn," class, which will inherit styles from Tailwind CSS."),fn.forEach(n.x),J=Object(n.o)(t),z=Object(n.n)(t,"H2",{});var gn=Object(n.l)(z);G=Object(n.p)(gn,"Integrating Tailwind CSS"),gn.forEach(n.x),_=Object(n.o)(t),B=Object(n.n)(t,"P",{});var xn=Object(n.l)(B);K=Object(n.p)(xn,"To add Tailwind CSS to Svelte and Sapper, we first have to integrate PostCSS into Sapper’s build step, as Tailwind CSS is a PostCSS plugin."),xn.forEach(n.x),Q=Object(n.o)(t),U=Object(n.n)(t,"H3",{});var vn=Object(n.l)(U);X=Object(n.p)(vn,"Install dependencies"),vn.forEach(n.x),Z=Object(n.o)(t),tt=Object(n.n)(t,"P",{});var mn=Object(n.l)(tt);et=Object(n.p)(mn,"First, we have to install a few extra dependencies."),mn.forEach(n.x),st=Object(n.o)(t),nt=Object(n.n)(t,"PRE",{class:!0}),Object(n.l)(nt).forEach(n.x),at=Object(n.o)(t),ct=Object(n.n)(t,"P",{});var yn=Object(n.l)(ct);ot=Object(n.n)(yn,"CODE",{});var Sn=Object(n.l)(ot);pt=Object(n.p)(Sn,"postcss-load-config"),Sn.forEach(n.x),bt=Object(n.p)(yn," allows us to automatically load the "),lt=Object(n.n)(yn,"CODE",{});var En=Object(n.l)(lt);jt=Object(n.p)(En,"postcss.config.js"),En.forEach(n.x),Ot=Object(n.p)(yn," file in our project root if it exists, thus saving us some extra configuration required to integrate PostCSS into our build step."),yn.forEach(n.x),rt=Object(n.o)(t),it=Object(n.n)(t,"P",{});var Hn=Object(n.l)(it);ut=Object(n.n)(Hn,"CODE",{});var wn=Object(n.l)(ut);ft=Object(n.p)(wn,"postcss-cli"),wn.forEach(n.x),dt=Object(n.p)(Hn," allows us to run PostCSS from the command line."),Hn.forEach(n.x),kt=Object(n.o)(t),ht=Object(n.n)(t,"P",{});var Cn=Object(n.l)(ht);gt=Object(n.n)(Cn,"CODE",{});var Yn=Object(n.l)(gt);xt=Object(n.p)(Yn,"postcss-import"),Yn.forEach(n.x),vt=Object(n.p)(Cn," and "),mt=Object(n.n)(Cn,"CODE",{});var Pn=Object(n.l)(mt);yt=Object(n.p)(Pn,"postcss-nested"),Pn.forEach(n.x),St=Object(n.p)(Cn," are additional quality-of-life plugins."),Cn.forEach(n.x),Et=Object(n.o)(t),Ht=Object(n.n)(t,"P",{});var Tn=Object(n.l)(Ht);wt=Object(n.n)(Tn,"CODE",{});var Vn=Object(n.l)(wt);Ct=Object(n.p)(Vn,"cssnano"),Vn.forEach(n.x),Yt=Object(n.p)(Tn," minifies our CSS output."),Tn.forEach(n.x),Pt=Object(n.o)(t),Tt=Object(n.n)(t,"P",{});var Dn=Object(n.l)(Tt);Vt=Object(n.n)(Dn,"CODE",{});var $n=Object(n.l)(Vt);Dt=Object(n.p)($n,"npm-run-all"),$n.forEach(n.x),$t=Object(n.p)(Dn," is a tool to run multiple npm scripts in parallel."),Dn.forEach(n.x),Rt=Object(n.o)(t),qt=Object(n.n)(t,"H3",{});var Rn=Object(n.l)(qt);It=Object(n.p)(Rn,"Initialise Tailwind CSS"),Rn.forEach(n.x),Lt=Object(n.o)(t),Mt=Object(n.n)(t,"P",{});var qn=Object(n.l)(Mt);At=Object(n.p)(qn,"Create the Tailwind configuration file with…"),qn.forEach(n.x),Ft=Object(n.o)(t),Wt=Object(n.n)(t,"PRE",{class:!0}),Object(n.l)(Wt).forEach(n.x),Nt=Object(n.o)(t),Jt=Object(n.n)(t,"P",{});var In=Object(n.l)(Jt);zt=Object(n.p)(In,"We then have to include Svelte into the PurgeCSS block to ensure that Svelte styles are not removed."),In.forEach(n.x),Gt=Object(n.o)(t),_t=Object(n.n)(t,"PRE",{class:!0}),Object(n.l)(_t).forEach(n.x),Bt=Object(n.o)(t),Kt=Object(n.n)(t,"P",{});var Ln=Object(n.l)(Kt);Qt=Object(n.p)(Ln,"Instead of configuring "),Ut=Object(n.n)(Ln,"CODE",{});var Mn=Object(n.l)(Ut);Xt=Object(n.p)(Mn,"static/global.css"),Mn.forEach(n.x),Zt=Object(n.p)(Ln," manually, we will set up PostCSS to transpile a source CSS file into a static CSS file to be used."),Ln.forEach(n.x),te=Object(n.o)(t),ee=Object(n.n)(t,"P",{});var An=Object(n.l)(ee);se=Object(n.p)(An,"Create an asset "),ne=Object(n.n)(An,"CODE",{});var Fn=Object(n.l)(ne);ae=Object(n.p)(Fn,"/src/assets/global.css"),Fn.forEach(n.x),ce=Object(n.p)(An,", and import Tailwind CSS styles."),An.forEach(n.x),oe=Object(n.o)(t),pe=Object(n.n)(t,"PRE",{class:!0}),Object(n.l)(pe).forEach(n.x),be=Object(n.o)(t),le=Object(n.n)(t,"H3",{});var Wn=Object(n.l)(le);je=Object(n.p)(Wn,"Configure PostCSS with "),Oe=Object(n.n)(Wn,"CODE",{});var Nn=Object(n.l)(Oe);re=Object(n.p)(Nn,"svelte-preprocess"),Nn.forEach(n.x),Wn.forEach(n.x),ie=Object(n.o)(t),ue=Object(n.n)(t,"P",{});var Jn=Object(n.l)(ue);fe=Object(n.p)(Jn,"In the root of our project, create "),de=Object(n.n)(Jn,"CODE",{});var zn=Object(n.l)(de);ke=Object(n.p)(zn,"postcss.config.js"),zn.forEach(n.x),he=Object(n.p)(Jn,", and load our PostCSS plugins."),Jn.forEach(n.x),ge=Object(n.o)(t),xe=Object(n.n)(t,"PRE",{class:!0}),Object(n.l)(xe).forEach(n.x),ve=Object(n.o)(t),me=Object(n.n)(t,"P",{});var Gn=Object(n.l)(me);ye=Object(n.n)(Gn,"CODE",{});var _n=Object(n.l)(ye);Se=Object(n.p)(_n,"postcss-import"),_n.forEach(n.x),Ee=Object(n.p)(Gn," and "),He=Object(n.n)(Gn,"CODE",{});var Bn=Object(n.l)(He);we=Object(n.p)(Bn,"postcss-nested"),Bn.forEach(n.x),Ce=Object(n.p)(Gn," introduce some additional syntax that needs to be handled manually."),Gn.forEach(n.x),Ye=Object(n.o)(t),Pe=Object(n.n)(t,"P",{});var Kn=Object(n.l)(Pe);Te=Object(n.p)(Kn,"To do so, we use "),Ve=Object(n.n)(Kn,"CODE",{});var Qn=Object(n.l)(Ve);De=Object(n.p)(Qn,"svelte-preprocess"),Qn.forEach(n.x),$e=Object(n.p)(Kn,". The preprocessor allows us to apply modifications to the code before it is passed into the Svelte engine."),Kn.forEach(n.x),Re=Object(n.o)(t),qe=Object(n.n)(t,"P",{});var Un=Object(n.l)(qe);Ie=Object(n.p)(Un,"First, create our preprocessor options object under "),Le=Object(n.n)(Un,"CODE",{});var Xn=Object(n.l)(Le);Me=Object(n.p)(Xn,"svelte.config.js"),Xn.forEach(n.x),Ae=Object(n.p)(Un,"…"),Un.forEach(n.x),Fe=Object(n.o)(t),We=Object(n.n)(t,"PRE",{class:!0}),Object(n.l)(We).forEach(n.x),Ne=Object(n.o)(t),Je=Object(n.n)(t,"P",{});var Zn=Object(n.l)(Je);ze=Object(n.n)(Zn,"CODE",{});var ta=Object(n.l)(ze);Ge=Object(n.p)(ta,"svelte.config.js"),ta.forEach(n.x),_e=Object(n.p)(Zn," is used to configure our language server, such that the Svelte extension for VSCode and coc knows how to parse our source code and provide proper syntax highlighting and error messages."),Zn.forEach(n.x),Be=Object(n.o)(t),Ke=Object(n.n)(t,"P",{});var ea=Object(n.l)(Ke);Qe=Object(n.p)(ea,"To enable the preprocessor for the language server, simply export  a "),Ue=Object(n.n)(ea,"CODE",{});var sa=Object(n.l)(Ue);Xe=Object(n.p)(sa,"preprocess"),sa.forEach(n.x),Ze=Object(n.p)(ea," object from "),ts=Object(n.n)(ea,"CODE",{});var na=Object(n.l)(ts);es=Object(n.p)(na,"svelte.config.js"),na.forEach(n.x),ss=Object(n.p)(ea,"."),ea.forEach(n.x),ns=Object(n.o)(t),as=Object(n.n)(t,"PRE",{class:!0}),Object(n.l)(as).forEach(n.x),cs=Object(n.o)(t),os=Object(n.n)(t,"P",{});var aa=Object(n.l)(os);ps=Object(n.p)(aa,"We also export the options object, since we want to use the same configuration for our build step under "),bs=Object(n.n)(aa,"CODE",{});var ca=Object(n.l)(bs);ls=Object(n.p)(ca,"rollup.config.js"),ca.forEach(n.x),js=Object(n.p)(aa," or "),Os=Object(n.n)(aa,"CODE",{});var oa=Object(n.l)(Os);rs=Object(n.p)(oa,"webpack.config.js"),oa.forEach(n.x),is=Object(n.p)(aa,"."),aa.forEach(n.x),us=Object(n.o)(t),fs=Object(n.n)(t,"P",{});var pa=Object(n.l)(fs);ds=Object(n.p)(pa,"For Rollup, add "),ks=Object(n.n)(pa,"CODE",{});var ba=Object(n.l)(ks);hs=Object(n.p)(ba,"preprocess"),ba.forEach(n.x),gs=Object(n.p)(pa," to the "),xs=Object(n.n)(pa,"CODE",{});var la=Object(n.l)(xs);vs=Object(n.p)(la,"svelte"),la.forEach(n.x),ms=Object(n.p)(pa," object for both the client and server…"),pa.forEach(n.x),ys=Object(n.o)(t),Ss=Object(n.n)(t,"PRE",{class:!0}),Object(n.l)(Ss).forEach(n.x),Es=Object(n.o)(t),Hs=Object(n.n)(t,"P",{});var ja=Object(n.l)(Hs);ws=Object(n.p)(ja,"For Webpack, add "),Cs=Object(n.n)(ja,"CODE",{});var Oa=Object(n.l)(Cs);Ys=Object(n.p)(Oa,"preprocess"),Oa.forEach(n.x),Ps=Object(n.p)(ja," to the "),Ts=Object(n.n)(ja,"CODE",{});var ra=Object(n.l)(Ts);Vs=Object(n.p)(ra,"/\\\\.(svelte|html)$/"),ra.forEach(n.x),Ds=Object(n.p)(ja," rule for both the client and server…"),ja.forEach(n.x),$s=Object(n.o)(t),Rs=Object(n.n)(t,"PRE",{class:!0}),Object(n.l)(Rs).forEach(n.x),qs=Object(n.o)(t),Is=Object(n.n)(t,"H3",{});var ia=Object(n.l)(Is);Ls=Object(n.p)(ia,"Adjust npm scripts"),ia.forEach(n.x),Ms=Object(n.o)(t),As=Object(n.n)(t,"P",{});var ua=Object(n.l)(As);Fs=Object(n.p)(ua,"After setting up the configurations, we need to run two compilation steps for our project: one to compile the Svelte code into native Javascript, and one to compile PostCSS and apply our plugins, including Tailwind CSS."),ua.forEach(n.x),Ws=Object(n.o)(t),Ns=Object(n.n)(t,"P",{});var fa=Object(n.l)(Ns);Js=Object(n.p)(fa,"To do so, we use "),zs=Object(n.n)(fa,"CODE",{});var da=Object(n.l)(zs);Gs=Object(n.p)(da,"npm-run-all"),da.forEach(n.x),_s=Object(n.p)(fa," to simultaneously watch for changes and incrementally compile the necessary files for both compilation steps."),fa.forEach(n.x),Bs=Object(n.o)(t),Ks=Object(n.n)(t,"P",{});var ka=Object(n.l)(Ks);Qs=Object(n.p)(ka,"We also add the PostCSS compilation step to our build step. In "),Us=Object(n.n)(ka,"CODE",{});var ha=Object(n.l)(Us);Xs=Object(n.p)(ha,"package.json"),ha.forEach(n.x),Zs=Object(n.p)(ka,"…"),ka.forEach(n.x),tn=Object(n.o)(t),en=Object(n.n)(t,"PRE",{class:!0}),Object(n.l)(en).forEach(n.x),sn=Object(n.o)(t),nn=Object(n.n)(t,"P",{});var ga=Object(n.l)(nn);an=Object(n.p)(ga,"Now you should be able to use Tailwind CSS in your Sapper project!"),ga.forEach(n.x),this.h()},h(){Object(n.h)(k,"class","language-html"),Object(n.h)(T,"class","language-html"),Object(n.h)(nt,"class","language-bash"),Object(n.h)(Wt,"class","language-bash"),Object(n.h)(_t,"class","language-javascript"),Object(n.h)(pe,"class","language-css"),Object(n.h)(xe,"class","language-javascript"),Object(n.h)(We,"class","language-javascript"),Object(n.h)(as,"class","language-javascript"),Object(n.h)(Ss,"class","language-javascript"),Object(n.h)(Rs,"class","language-javascript"),Object(n.h)(en,"class","language-json")},m(t,cn){Object(n.H)(t,e,cn),Object(n.f)(e,s),Object(n.H)(t,a,cn),Object(n.H)(t,c,cn),Object(n.f)(c,o),Object(n.H)(t,p,cn),Object(n.H)(t,b,cn),Object(n.f)(b,l),Object(n.H)(t,j,cn),Object(n.H)(t,O,cn),Object(n.f)(O,r),Object(n.H)(t,i,cn),Object(n.H)(t,u,cn),Object(n.f)(u,f),Object(n.H)(t,d,cn),Object(n.H)(t,k,cn),k.innerHTML='<code class="language-html"><span class="token comment">&lt;!-- Parent.svelte --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n  <span class="token selector">.margin-lg</span> <span class="token punctuation">&#123;</span>    // unused class warning\n    <span class="token property">margin</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildCard</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>margin-lg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code>',Object(n.H)(t,h,cn),Object(n.H)(t,g,cn),Object(n.f)(g,x),Object(n.f)(g,v),Object(n.f)(v,m),Object(n.f)(g,y),Object(n.H)(t,S,cn),Object(n.H)(t,E,cn),Object(n.f)(E,H),Object(n.H)(t,w,cn),Object(n.H)(t,C,cn),Object(n.f)(C,Y),Object(n.H)(t,P,cn),Object(n.H)(t,T,cn),T.innerHTML='<code class="language-html"><span class="token comment">&lt;!-- Parent.svelte --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildCard</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>m-4<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n\n\n<span class="token comment">&lt;!-- ChildCard.svelte --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">export</span> <span class="token punctuation">&#123;</span> className <span class="token keyword">as</span> <span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// exports a prop \'class\'</span>\n  <span class="token keyword">let</span> className<span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>&#123;className&#125;/</span><span class="token punctuation">></span></span></code>',Object(n.H)(t,V,cn),Object(n.H)(t,D,cn),Object(n.f)(D,$),Object(n.f)(D,R),Object(n.f)(R,q),Object(n.f)(D,I),Object(n.f)(D,L),Object(n.f)(L,M),Object(n.f)(D,A),Object(n.f)(D,F),Object(n.f)(F,W),Object(n.f)(D,N),Object(n.H)(t,J,cn),Object(n.H)(t,z,cn),Object(n.f)(z,G),Object(n.H)(t,_,cn),Object(n.H)(t,B,cn),Object(n.f)(B,K),Object(n.H)(t,Q,cn),Object(n.H)(t,U,cn),Object(n.f)(U,X),Object(n.H)(t,Z,cn),Object(n.H)(t,tt,cn),Object(n.f)(tt,et),Object(n.H)(t,st,cn),Object(n.H)(t,nt,cn),nt.innerHTML='<code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -D autoprefixer postcss-load-config <span class="token punctuation"></span>\npostcss-cli postcss-import postcss-nested cssnano <span class="token punctuation"></span>\ntailwindcss npm-run-all</code>',Object(n.H)(t,at,cn),Object(n.H)(t,ct,cn),Object(n.f)(ct,ot),Object(n.f)(ot,pt),Object(n.f)(ct,bt),Object(n.f)(ct,lt),Object(n.f)(lt,jt),Object(n.f)(ct,Ot),Object(n.H)(t,rt,cn),Object(n.H)(t,it,cn),Object(n.f)(it,ut),Object(n.f)(ut,ft),Object(n.f)(it,dt),Object(n.H)(t,kt,cn),Object(n.H)(t,ht,cn),Object(n.f)(ht,gt),Object(n.f)(gt,xt),Object(n.f)(ht,vt),Object(n.f)(ht,mt),Object(n.f)(mt,yt),Object(n.f)(ht,St),Object(n.H)(t,Et,cn),Object(n.H)(t,Ht,cn),Object(n.f)(Ht,wt),Object(n.f)(wt,Ct),Object(n.f)(Ht,Yt),Object(n.H)(t,Pt,cn),Object(n.H)(t,Tt,cn),Object(n.f)(Tt,Vt),Object(n.f)(Vt,Dt),Object(n.f)(Tt,$t),Object(n.H)(t,Rt,cn),Object(n.H)(t,qt,cn),Object(n.f)(qt,It),Object(n.H)(t,Lt,cn),Object(n.H)(t,Mt,cn),Object(n.f)(Mt,At),Object(n.H)(t,Ft,cn),Object(n.H)(t,Wt,cn),Wt.innerHTML='<code class="language-bash">npx tailwind init</code>',Object(n.H)(t,Nt,cn),Object(n.H)(t,Jt,cn),Object(n.f)(Jt,zt),Object(n.H)(t,Gt,cn),Object(n.H)(t,_t,cn),_t.innerHTML='<code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  purge<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/**/*.svelte"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  theme<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n    extend<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  variants<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',Object(n.H)(t,Bt,cn),Object(n.H)(t,Kt,cn),Object(n.f)(Kt,Qt),Object(n.f)(Kt,Ut),Object(n.f)(Ut,Xt),Object(n.f)(Kt,Zt),Object(n.H)(t,te,cn),Object(n.H)(t,ee,cn),Object(n.f)(ee,se),Object(n.f)(ee,ne),Object(n.f)(ne,ae),Object(n.f)(ee,ce),Object(n.H)(t,oe,cn),Object(n.H)(t,pe,cn),pe.innerHTML='<code class="language-css"><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span></code>',Object(n.H)(t,be,cn),Object(n.H)(t,le,cn),Object(n.f)(le,je),Object(n.f)(le,Oe),Object(n.f)(Oe,re),Object(n.H)(t,ie,cn),Object(n.H)(t,ue,cn),Object(n.f)(ue,fe),Object(n.f)(ue,de),Object(n.f)(de,ke),Object(n.f)(ue,he),Object(n.H)(t,ge,cn),Object(n.H)(t,xe,cn),xe.innerHTML='<code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'postcss-import\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'postcss-nested\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'cssnano\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n      preset<span class="token operator">:</span> <span class="token string">\'default\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',Object(n.H)(t,ve,cn),Object(n.H)(t,me,cn),Object(n.f)(me,ye),Object(n.f)(ye,Se),Object(n.f)(me,Ee),Object(n.f)(me,He),Object(n.f)(He,we),Object(n.f)(me,Ce),Object(n.H)(t,Ye,cn),Object(n.H)(t,Pe,cn),Object(n.f)(Pe,Te),Object(n.f)(Pe,Ve),Object(n.f)(Ve,De),Object(n.f)(Pe,$e),Object(n.H)(t,Re,cn),Object(n.H)(t,qe,cn),Object(n.f)(qe,Ie),Object(n.f)(qe,Le),Object(n.f)(Le,Me),Object(n.f)(qe,Ae),Object(n.H)(t,Fe,cn),Object(n.H)(t,We,cn),We.innerHTML='<code class="language-javascript"><span class="token keyword">const</span> sveltePreprocess <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'svelte-preprocess\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> preprocessOptions <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  postcss<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'postcss-import\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'postcss-nested\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',Object(n.H)(t,Ne,cn),Object(n.H)(t,Je,cn),Object(n.f)(Je,ze),Object(n.f)(ze,Ge),Object(n.f)(Je,_e),Object(n.H)(t,Be,cn),Object(n.H)(t,Ke,cn),Object(n.f)(Ke,Qe),Object(n.f)(Ke,Ue),Object(n.f)(Ue,Xe),Object(n.f)(Ke,Ze),Object(n.f)(Ke,ts),Object(n.f)(ts,es),Object(n.f)(Ke,ss),Object(n.H)(t,ns,cn),Object(n.H)(t,as,cn),as.innerHTML='<code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  preprocess<span class="token operator">:</span> <span class="token function">sveltePreprocess</span><span class="token punctuation">(</span>preprocessOptions<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  preprocessOptions<span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',Object(n.H)(t,cs,cn),Object(n.H)(t,os,cn),Object(n.f)(os,ps),Object(n.f)(os,bs),Object(n.f)(bs,ls),Object(n.f)(os,js),Object(n.f)(os,Os),Object(n.f)(Os,rs),Object(n.f)(os,is),Object(n.H)(t,us,cn),Object(n.H)(t,fs,cn),Object(n.f)(fs,ds),Object(n.f)(fs,ks),Object(n.f)(ks,hs),Object(n.f)(fs,gs),Object(n.f)(fs,xs),Object(n.f)(xs,vs),Object(n.f)(fs,ms),Object(n.H)(t,ys,cn),Object(n.H)(t,Ss,cn),Ss.innerHTML='<code class="language-javascript"><span class="token keyword">const</span> preprocess <span class="token operator">=</span> <span class="token function">sveltePreprocess</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n  sourceMap<span class="token operator">:</span> dev<span class="token punctuation">,</span>       <span class="token comment">// additional preprocess option</span>\n  <span class="token operator">...</span>preprocessOptions<span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nclient<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n  <span class="token operator">...</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token operator">...</span>\n    <span class="token function">svelte</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n      preprocess<span class="token punctuation">,</span>\n      dev<span class="token punctuation">,</span>\n      <span class="token operator">...</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n\nserver<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n  <span class="token operator">...</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token operator">...</span>\n    <span class="token function">svelte</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n      preprocess<span class="token punctuation">,</span>\n      generate<span class="token operator">:</span> <span class="token string">\'ssr\'</span><span class="token punctuation">,</span>\n      <span class="token operator">...</span>\n<span class="token punctuation">&#125;</span></code>',Object(n.H)(t,Es,cn),Object(n.H)(t,Hs,cn),Object(n.f)(Hs,ws),Object(n.f)(Hs,Cs),Object(n.f)(Cs,Ys),Object(n.f)(Hs,Ps),Object(n.f)(Hs,Ts),Object(n.f)(Ts,Vs),Object(n.f)(Hs,Ds),Object(n.H)(t,$s,cn),Object(n.H)(t,Rs,cn),Rs.innerHTML='<code class="language-javascript">client<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n  <span class="token operator">...</span>\n    module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n      rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">&#123;</span>\n          test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(svelte|html)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n          use<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n            options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n              preprocess<span class="token punctuation">,</span>\n              <span class="token operator">...</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n\nserver<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n  <span class="token operator">...</span>\n    module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n      rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">&#123;</span>\n          test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(svelte|html)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n          use<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n            options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n              preprocess<span class="token punctuation">,</span>\n              <span class="token operator">...</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code>',Object(n.H)(t,qs,cn),Object(n.H)(t,Is,cn),Object(n.f)(Is,Ls),Object(n.H)(t,Ms,cn),Object(n.H)(t,As,cn),Object(n.f)(As,Fs),Object(n.H)(t,Ws,cn),Object(n.H)(t,Ns,cn),Object(n.f)(Ns,Js),Object(n.f)(Ns,zs),Object(n.f)(zs,Gs),Object(n.f)(Ns,_s),Object(n.H)(t,Bs,cn),Object(n.H)(t,Ks,cn),Object(n.f)(Ks,Qs),Object(n.f)(Ks,Us),Object(n.f)(Us,Xs),Object(n.f)(Ks,Zs),Object(n.H)(t,tn,cn),Object(n.H)(t,en,cn),en.innerHTML='<code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n  <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"run-p watch:css watch:sapper"</span><span class="token punctuation">,</span>\n  <span class="token property">"watch:css"</span><span class="token operator">:</span> <span class="token string">"postcss src/assets/global.css -o static/global.css -w"</span><span class="token punctuation">,</span>\n  <span class="token property">"watch:sapper"</span><span class="token operator">:</span> <span class="token string">"sapper dev"</span><span class="token punctuation">,</span>\n  <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"run-s build:css build:sapper"</span><span class="token punctuation">,</span>\n  <span class="token property">"build:css"</span><span class="token operator">:</span> <span class="token string">"NODE_ENV=production postcss src/assets/global.css -o static/global.css"</span><span class="token punctuation">,</span>\n  <span class="token property">"build:sapper"</span><span class="token operator">:</span> <span class="token string">"NODE_ENV=production sapper build"</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code>',Object(n.H)(t,sn,cn),Object(n.H)(t,nn,cn),Object(n.f)(nn,an)},p:n.L,d(t){t&&Object(n.x)(e),t&&Object(n.x)(a),t&&Object(n.x)(c),t&&Object(n.x)(p),t&&Object(n.x)(b),t&&Object(n.x)(j),t&&Object(n.x)(O),t&&Object(n.x)(i),t&&Object(n.x)(u),t&&Object(n.x)(d),t&&Object(n.x)(k),t&&Object(n.x)(h),t&&Object(n.x)(g),t&&Object(n.x)(S),t&&Object(n.x)(E),t&&Object(n.x)(w),t&&Object(n.x)(C),t&&Object(n.x)(P),t&&Object(n.x)(T),t&&Object(n.x)(V),t&&Object(n.x)(D),t&&Object(n.x)(J),t&&Object(n.x)(z),t&&Object(n.x)(_),t&&Object(n.x)(B),t&&Object(n.x)(Q),t&&Object(n.x)(U),t&&Object(n.x)(Z),t&&Object(n.x)(tt),t&&Object(n.x)(st),t&&Object(n.x)(nt),t&&Object(n.x)(at),t&&Object(n.x)(ct),t&&Object(n.x)(rt),t&&Object(n.x)(it),t&&Object(n.x)(kt),t&&Object(n.x)(ht),t&&Object(n.x)(Et),t&&Object(n.x)(Ht),t&&Object(n.x)(Pt),t&&Object(n.x)(Tt),t&&Object(n.x)(Rt),t&&Object(n.x)(qt),t&&Object(n.x)(Lt),t&&Object(n.x)(Mt),t&&Object(n.x)(Ft),t&&Object(n.x)(Wt),t&&Object(n.x)(Nt),t&&Object(n.x)(Jt),t&&Object(n.x)(Gt),t&&Object(n.x)(_t),t&&Object(n.x)(Bt),t&&Object(n.x)(Kt),t&&Object(n.x)(te),t&&Object(n.x)(ee),t&&Object(n.x)(oe),t&&Object(n.x)(pe),t&&Object(n.x)(be),t&&Object(n.x)(le),t&&Object(n.x)(ie),t&&Object(n.x)(ue),t&&Object(n.x)(ge),t&&Object(n.x)(xe),t&&Object(n.x)(ve),t&&Object(n.x)(me),t&&Object(n.x)(Ye),t&&Object(n.x)(Pe),t&&Object(n.x)(Re),t&&Object(n.x)(qe),t&&Object(n.x)(Fe),t&&Object(n.x)(We),t&&Object(n.x)(Ne),t&&Object(n.x)(Je),t&&Object(n.x)(Be),t&&Object(n.x)(Ke),t&&Object(n.x)(ns),t&&Object(n.x)(as),t&&Object(n.x)(cs),t&&Object(n.x)(os),t&&Object(n.x)(us),t&&Object(n.x)(fs),t&&Object(n.x)(ys),t&&Object(n.x)(Ss),t&&Object(n.x)(Es),t&&Object(n.x)(Hs),t&&Object(n.x)($s),t&&Object(n.x)(Rs),t&&Object(n.x)(qs),t&&Object(n.x)(Is),t&&Object(n.x)(Ms),t&&Object(n.x)(As),t&&Object(n.x)(Ws),t&&Object(n.x)(Ns),t&&Object(n.x)(Bs),t&&Object(n.x)(Ks),t&&Object(n.x)(tn),t&&Object(n.x)(en),t&&Object(n.x)(sn),t&&Object(n.x)(nn)}}}function l(t){let e,s;const a=[j];let c={$$slots:{default:[b]},$$scope:{ctx:t}};for(let t=0;t<a.length;t+=1)c=Object(n.g)(c,a[t]);return e=new p({props:c}),{c(){Object(n.r)(e.$$.fragment)},l(t){Object(n.m)(e.$$.fragment,t)},m(t,a){Object(n.K)(e,t,a),s=!0},p(t,[s]){const c=0&s?Object(n.C)(a,[Object(n.B)(j)]):{};1&s&&(c.$$scope={dirty:s,ctx:t}),e.$set(c)},i(t){s||(Object(n.ab)(e.$$.fragment,t),s=!0)},o(t){Object(n.bb)(e.$$.fragment,t),s=!1},d(t){Object(n.v)(e,t)}}}const j={title:"Svelte, Sapper, and Tailwind CSS"},{title:O}=j;class r extends n.a{constructor(t){super(),Object(n.G)(this,t,null,l,n.R,{})}}e.default=r}}]);