(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{22:function(t,e,s){"use strict";s.r(e),s.d(e,"metadata",(function(){return c}));var n=s(0);function a(t){let e,s,a,c,o,p,j,b,l,O,r,i,u,d,k,h,g,f,v,m,S,T,D,E,w,C,y,P,Q,x,H,q,I,M,R,L,A,F,W,N,J,V,$,z,_,B,G,K,U,X,Y,Z,tt,et,st,nt,at,ct,ot,pt,jt,bt,lt,Ot,rt,it,ut,dt,kt,ht,gt,ft,vt,mt,St,Tt,Dt,Et,wt,Ct,yt,Pt,Qt,xt,Ht,qt,It,Mt,Rt,Lt,At,Ft,Wt,Nt,Jt,Vt,$t,zt,_t,Bt,Gt,Kt,Ut,Xt,Yt,Zt,te,ee,se,ne,ae,ce,oe,pe,je,be,le,Oe,re,ie,ue,de,ke,he,ge,fe,ve,me,Se,Te,De,Ee,we,Ce,ye,Pe,Qe,xe,He,qe,Ie,Me,Re,Le,Ae,Fe,We,Ne,Je,Ve,$e,ze,_e,Be,Ge,Ke,Ue,Xe,Ye,Ze,ts,es,ss,ns,as,cs,os,ps,js,bs,ls,Os,rs,is,us,ds,ks,hs,gs,fs,vs,ms,Ss,Ts,Ds,Es,ws,Cs,ys,Ps,Qs,xs,Hs,qs,Is,Ms,Rs,Ls,As,Fs,Ws,Ns,Js,Vs,$s,zs,_s,Bs,Gs,Ks,Us,Xs,Ys,Zs,tn,en,sn,nn,an;return{c(){e=Object(n.u)("h2"),s=Object(n.T)("Why Tailwind CSS?"),a=Object(n.Q)(),c=Object(n.u)("h3"),o=Object(n.T)("A constrained design system is a good thing"),p=Object(n.Q)(),j=Object(n.u)("p"),b=Object(n.T)("Although Svelte offers scoped CSS by default, Tailwind CSS is still useful as it offers a nicely constrained design system. As the number of components grows, it becomes increasingly difficult to keep all whitespacing, font-sizes, and colours consistent. Tailwind CSS solves these issues by providing sensible defaults for many CSS variables, and minimises the usage of magic numbers."),l=Object(n.Q)(),O=Object(n.u)("h3"),r=Object(n.T)("Styling custom components"),i=Object(n.Q)(),u=Object(n.u)("p"),d=Object(n.T)("In addition, Svelte does not support passing CSS classes into child components. For example, we cannot do this…"),k=Object(n.Q)(),h=Object(n.u)("pre"),g=Object(n.Q)(),f=Object(n.u)("p"),v=Object(n.T)("… as the "),m=Object(n.u)("code"),S=Object(n.T)(".margin-lg"),T=Object(n.T)(" class is treated as an unused CSS class, and is purged in the compiled application."),D=Object(n.Q)(),E=Object(n.u)("p"),w=Object(n.T)("This makes it extremely difficult to design flexible components that depend on layout and more."),C=Object(n.Q)(),y=Object(n.u)("p"),P=Object(n.T)("Since Tailwind CSS classes are global by default and not purged by Svelte, we can use Tailwind to enable this functionality."),Q=Object(n.Q)(),x=Object(n.u)("pre"),H=Object(n.Q)(),q=Object(n.u)("p"),I=Object(n.T)("The "),M=Object(n.u)("code"),R=Object(n.T)("div"),L=Object(n.T)(" element in "),A=Object(n.u)("code"),F=Object(n.T)("ChildCard.svelte"),W=Object(n.T)(" will be built with the "),N=Object(n.u)("code"),J=Object(n.T)("m-4"),V=Object(n.T)(" class, which will inherit styles from Tailwind CSS."),$=Object(n.Q)(),z=Object(n.u)("h2"),_=Object(n.T)("Integrating Tailwind CSS"),B=Object(n.Q)(),G=Object(n.u)("p"),K=Object(n.T)("To add Tailwind CSS to Svelte and Sapper, we first have to integrate PostCSS into Sapper’s build step, as Tailwind CSS is a PostCSS plugin."),U=Object(n.Q)(),X=Object(n.u)("h3"),Y=Object(n.T)("Install dependencies"),Z=Object(n.Q)(),tt=Object(n.u)("p"),et=Object(n.T)("First, we have to install a few extra dependencies."),st=Object(n.Q)(),nt=Object(n.u)("pre"),at=Object(n.Q)(),ct=Object(n.u)("p"),ot=Object(n.u)("code"),pt=Object(n.T)("postcss-load-config"),jt=Object(n.T)(" allows us to automatically load the "),bt=Object(n.u)("code"),lt=Object(n.T)("postcss.config.js"),Ot=Object(n.T)(" file in our project root if it exists, thus saving us some extra configuration required to integrate PostCSS into our build step."),rt=Object(n.Q)(),it=Object(n.u)("p"),ut=Object(n.u)("code"),dt=Object(n.T)("postcss-cli"),kt=Object(n.T)(" allows us to run PostCSS from the command line."),ht=Object(n.Q)(),gt=Object(n.u)("p"),ft=Object(n.u)("code"),vt=Object(n.T)("postcss-import"),mt=Object(n.T)(" and "),St=Object(n.u)("code"),Tt=Object(n.T)("postcss-nested"),Dt=Object(n.T)(" are additional quality-of-life plugins."),Et=Object(n.Q)(),wt=Object(n.u)("p"),Ct=Object(n.u)("code"),yt=Object(n.T)("cssnano"),Pt=Object(n.T)(" minifies our CSS output."),Qt=Object(n.Q)(),xt=Object(n.u)("p"),Ht=Object(n.u)("code"),qt=Object(n.T)("npm-run-all"),It=Object(n.T)(" is a tool to run multiple npm scripts in parallel."),Mt=Object(n.Q)(),Rt=Object(n.u)("h3"),Lt=Object(n.T)("Initialise Tailwind CSS"),At=Object(n.Q)(),Ft=Object(n.u)("p"),Wt=Object(n.T)("Create the Tailwind configuration file with…"),Nt=Object(n.Q)(),Jt=Object(n.u)("pre"),Vt=Object(n.Q)(),$t=Object(n.u)("p"),zt=Object(n.T)("We then have to include Svelte into the PurgeCSS block to ensure that Svelte styles are not removed."),_t=Object(n.Q)(),Bt=Object(n.u)("pre"),Gt=Object(n.Q)(),Kt=Object(n.u)("p"),Ut=Object(n.T)("Instead of configuring "),Xt=Object(n.u)("code"),Yt=Object(n.T)("static/global.css"),Zt=Object(n.T)(" manually, we will set up PostCSS to transpile a source CSS file into a static CSS file to be used."),te=Object(n.Q)(),ee=Object(n.u)("p"),se=Object(n.T)("Create an asset "),ne=Object(n.u)("code"),ae=Object(n.T)("/src/assets/global.css"),ce=Object(n.T)(", and import Tailwind CSS styles."),oe=Object(n.Q)(),pe=Object(n.u)("pre"),je=Object(n.Q)(),be=Object(n.u)("h3"),le=Object(n.T)("Configure PostCSS with "),Oe=Object(n.u)("code"),re=Object(n.T)("svelte-preprocess"),ie=Object(n.Q)(),ue=Object(n.u)("p"),de=Object(n.T)("In the root of our project, create "),ke=Object(n.u)("code"),he=Object(n.T)("postcss.config.js"),ge=Object(n.T)(", and load our PostCSS plugins."),fe=Object(n.Q)(),ve=Object(n.u)("pre"),me=Object(n.Q)(),Se=Object(n.u)("p"),Te=Object(n.u)("code"),De=Object(n.T)("postcss-import"),Ee=Object(n.T)(" and "),we=Object(n.u)("code"),Ce=Object(n.T)("postcss-nested"),ye=Object(n.T)(" introduce some additional syntax that needs to be handled manually."),Pe=Object(n.Q)(),Qe=Object(n.u)("p"),xe=Object(n.T)("To do so, we use "),He=Object(n.u)("code"),qe=Object(n.T)("svelte-preprocess"),Ie=Object(n.T)(". The preprocessor allows us to apply modifications to the code before it is passed into the Svelte engine."),Me=Object(n.Q)(),Re=Object(n.u)("p"),Le=Object(n.T)("First, create our preprocessor options object under "),Ae=Object(n.u)("code"),Fe=Object(n.T)("svelte.config.js"),We=Object(n.T)("…"),Ne=Object(n.Q)(),Je=Object(n.u)("pre"),Ve=Object(n.Q)(),$e=Object(n.u)("p"),ze=Object(n.u)("code"),_e=Object(n.T)("svelte.config.js"),Be=Object(n.T)(" is used to configure our language server, such that the Svelte extension for VSCode and coc knows how to parse our source code and provide proper syntax highlighting and error messages."),Ge=Object(n.Q)(),Ke=Object(n.u)("p"),Ue=Object(n.T)("To enable the preprocessor for the language server, simply export  a "),Xe=Object(n.u)("code"),Ye=Object(n.T)("preprocess"),Ze=Object(n.T)(" object from "),ts=Object(n.u)("code"),es=Object(n.T)("svelte.config.js"),ss=Object(n.T)("."),ns=Object(n.Q)(),as=Object(n.u)("pre"),cs=Object(n.Q)(),os=Object(n.u)("p"),ps=Object(n.T)("We also export the options object, since we want to use the same configuration for our build step under "),js=Object(n.u)("code"),bs=Object(n.T)("rollup.config.js"),ls=Object(n.T)(" or "),Os=Object(n.u)("code"),rs=Object(n.T)("webpack.config.js"),is=Object(n.T)("."),us=Object(n.Q)(),ds=Object(n.u)("p"),ks=Object(n.T)("For Rollup, add "),hs=Object(n.u)("code"),gs=Object(n.T)("preprocess"),fs=Object(n.T)(" to the "),vs=Object(n.u)("code"),ms=Object(n.T)("svelte"),Ss=Object(n.T)(" object for both the client and server…"),Ts=Object(n.Q)(),Ds=Object(n.u)("pre"),Es=Object(n.Q)(),ws=Object(n.u)("p"),Cs=Object(n.T)("For Webpack, add "),ys=Object(n.u)("code"),Ps=Object(n.T)("preprocess"),Qs=Object(n.T)(" to the "),xs=Object(n.u)("code"),Hs=Object(n.T)("/\\\\.(svelte|html)$/"),qs=Object(n.T)(" rule for both the client and server…"),Is=Object(n.Q)(),Ms=Object(n.u)("pre"),Rs=Object(n.Q)(),Ls=Object(n.u)("h3"),As=Object(n.T)("Adjust npm scripts"),Fs=Object(n.Q)(),Ws=Object(n.u)("p"),Ns=Object(n.T)("After setting up the configurations, we need to run two compilation steps for our project: one to compile the Svelte code into native Javascript, and one to compile PostCSS and apply our plugins, including Tailwind CSS."),Js=Object(n.Q)(),Vs=Object(n.u)("p"),$s=Object(n.T)("To do so, we use "),zs=Object(n.u)("code"),_s=Object(n.T)("npm-run-all"),Bs=Object(n.T)(" to simultaneously watch for changes and incrementally compile the necessary files for both compilation steps."),Gs=Object(n.Q)(),Ks=Object(n.u)("p"),Us=Object(n.T)("We also add the PostCSS compilation step to our build step. In "),Xs=Object(n.u)("code"),Ys=Object(n.T)("package.json"),Zs=Object(n.T)("…"),tn=Object(n.Q)(),en=Object(n.u)("pre"),sn=Object(n.Q)(),nn=Object(n.u)("p"),an=Object(n.T)("Now you should be able to use Tailwind CSS in your Sapper project!"),this.h()},l(t){e=Object(n.j)(t,"H2",{});var cn=Object(n.h)(e);s=Object(n.l)(cn,"Why Tailwind CSS?"),cn.forEach(n.t),a=Object(n.k)(t),c=Object(n.j)(t,"H3",{});var on=Object(n.h)(c);o=Object(n.l)(on,"A constrained design system is a good thing"),on.forEach(n.t),p=Object(n.k)(t),j=Object(n.j)(t,"P",{});var pn=Object(n.h)(j);b=Object(n.l)(pn,"Although Svelte offers scoped CSS by default, Tailwind CSS is still useful as it offers a nicely constrained design system. As the number of components grows, it becomes increasingly difficult to keep all whitespacing, font-sizes, and colours consistent. Tailwind CSS solves these issues by providing sensible defaults for many CSS variables, and minimises the usage of magic numbers."),pn.forEach(n.t),l=Object(n.k)(t),O=Object(n.j)(t,"H3",{});var jn=Object(n.h)(O);r=Object(n.l)(jn,"Styling custom components"),jn.forEach(n.t),i=Object(n.k)(t),u=Object(n.j)(t,"P",{});var bn=Object(n.h)(u);d=Object(n.l)(bn,"In addition, Svelte does not support passing CSS classes into child components. For example, we cannot do this…"),bn.forEach(n.t),k=Object(n.k)(t),h=Object(n.j)(t,"PRE",{class:!0}),Object(n.h)(h).forEach(n.t),g=Object(n.k)(t),f=Object(n.j)(t,"P",{});var ln=Object(n.h)(f);v=Object(n.l)(ln,"… as the "),m=Object(n.j)(ln,"CODE",{});var On=Object(n.h)(m);S=Object(n.l)(On,".margin-lg"),On.forEach(n.t),T=Object(n.l)(ln," class is treated as an unused CSS class, and is purged in the compiled application."),ln.forEach(n.t),D=Object(n.k)(t),E=Object(n.j)(t,"P",{});var rn=Object(n.h)(E);w=Object(n.l)(rn,"This makes it extremely difficult to design flexible components that depend on layout and more."),rn.forEach(n.t),C=Object(n.k)(t),y=Object(n.j)(t,"P",{});var un=Object(n.h)(y);P=Object(n.l)(un,"Since Tailwind CSS classes are global by default and not purged by Svelte, we can use Tailwind to enable this functionality."),un.forEach(n.t),Q=Object(n.k)(t),x=Object(n.j)(t,"PRE",{class:!0}),Object(n.h)(x).forEach(n.t),H=Object(n.k)(t),q=Object(n.j)(t,"P",{});var dn=Object(n.h)(q);I=Object(n.l)(dn,"The "),M=Object(n.j)(dn,"CODE",{});var kn=Object(n.h)(M);R=Object(n.l)(kn,"div"),kn.forEach(n.t),L=Object(n.l)(dn," element in "),A=Object(n.j)(dn,"CODE",{});var hn=Object(n.h)(A);F=Object(n.l)(hn,"ChildCard.svelte"),hn.forEach(n.t),W=Object(n.l)(dn," will be built with the "),N=Object(n.j)(dn,"CODE",{});var gn=Object(n.h)(N);J=Object(n.l)(gn,"m-4"),gn.forEach(n.t),V=Object(n.l)(dn," class, which will inherit styles from Tailwind CSS."),dn.forEach(n.t),$=Object(n.k)(t),z=Object(n.j)(t,"H2",{});var fn=Object(n.h)(z);_=Object(n.l)(fn,"Integrating Tailwind CSS"),fn.forEach(n.t),B=Object(n.k)(t),G=Object(n.j)(t,"P",{});var vn=Object(n.h)(G);K=Object(n.l)(vn,"To add Tailwind CSS to Svelte and Sapper, we first have to integrate PostCSS into Sapper’s build step, as Tailwind CSS is a PostCSS plugin."),vn.forEach(n.t),U=Object(n.k)(t),X=Object(n.j)(t,"H3",{});var mn=Object(n.h)(X);Y=Object(n.l)(mn,"Install dependencies"),mn.forEach(n.t),Z=Object(n.k)(t),tt=Object(n.j)(t,"P",{});var Sn=Object(n.h)(tt);et=Object(n.l)(Sn,"First, we have to install a few extra dependencies."),Sn.forEach(n.t),st=Object(n.k)(t),nt=Object(n.j)(t,"PRE",{class:!0}),Object(n.h)(nt).forEach(n.t),at=Object(n.k)(t),ct=Object(n.j)(t,"P",{});var Tn=Object(n.h)(ct);ot=Object(n.j)(Tn,"CODE",{});var Dn=Object(n.h)(ot);pt=Object(n.l)(Dn,"postcss-load-config"),Dn.forEach(n.t),jt=Object(n.l)(Tn," allows us to automatically load the "),bt=Object(n.j)(Tn,"CODE",{});var En=Object(n.h)(bt);lt=Object(n.l)(En,"postcss.config.js"),En.forEach(n.t),Ot=Object(n.l)(Tn," file in our project root if it exists, thus saving us some extra configuration required to integrate PostCSS into our build step."),Tn.forEach(n.t),rt=Object(n.k)(t),it=Object(n.j)(t,"P",{});var wn=Object(n.h)(it);ut=Object(n.j)(wn,"CODE",{});var Cn=Object(n.h)(ut);dt=Object(n.l)(Cn,"postcss-cli"),Cn.forEach(n.t),kt=Object(n.l)(wn," allows us to run PostCSS from the command line."),wn.forEach(n.t),ht=Object(n.k)(t),gt=Object(n.j)(t,"P",{});var yn=Object(n.h)(gt);ft=Object(n.j)(yn,"CODE",{});var Pn=Object(n.h)(ft);vt=Object(n.l)(Pn,"postcss-import"),Pn.forEach(n.t),mt=Object(n.l)(yn," and "),St=Object(n.j)(yn,"CODE",{});var Qn=Object(n.h)(St);Tt=Object(n.l)(Qn,"postcss-nested"),Qn.forEach(n.t),Dt=Object(n.l)(yn," are additional quality-of-life plugins."),yn.forEach(n.t),Et=Object(n.k)(t),wt=Object(n.j)(t,"P",{});var xn=Object(n.h)(wt);Ct=Object(n.j)(xn,"CODE",{});var Hn=Object(n.h)(Ct);yt=Object(n.l)(Hn,"cssnano"),Hn.forEach(n.t),Pt=Object(n.l)(xn," minifies our CSS output."),xn.forEach(n.t),Qt=Object(n.k)(t),xt=Object(n.j)(t,"P",{});var qn=Object(n.h)(xt);Ht=Object(n.j)(qn,"CODE",{});var In=Object(n.h)(Ht);qt=Object(n.l)(In,"npm-run-all"),In.forEach(n.t),It=Object(n.l)(qn," is a tool to run multiple npm scripts in parallel."),qn.forEach(n.t),Mt=Object(n.k)(t),Rt=Object(n.j)(t,"H3",{});var Mn=Object(n.h)(Rt);Lt=Object(n.l)(Mn,"Initialise Tailwind CSS"),Mn.forEach(n.t),At=Object(n.k)(t),Ft=Object(n.j)(t,"P",{});var Rn=Object(n.h)(Ft);Wt=Object(n.l)(Rn,"Create the Tailwind configuration file with…"),Rn.forEach(n.t),Nt=Object(n.k)(t),Jt=Object(n.j)(t,"PRE",{class:!0}),Object(n.h)(Jt).forEach(n.t),Vt=Object(n.k)(t),$t=Object(n.j)(t,"P",{});var Ln=Object(n.h)($t);zt=Object(n.l)(Ln,"We then have to include Svelte into the PurgeCSS block to ensure that Svelte styles are not removed."),Ln.forEach(n.t),_t=Object(n.k)(t),Bt=Object(n.j)(t,"PRE",{class:!0}),Object(n.h)(Bt).forEach(n.t),Gt=Object(n.k)(t),Kt=Object(n.j)(t,"P",{});var An=Object(n.h)(Kt);Ut=Object(n.l)(An,"Instead of configuring "),Xt=Object(n.j)(An,"CODE",{});var Fn=Object(n.h)(Xt);Yt=Object(n.l)(Fn,"static/global.css"),Fn.forEach(n.t),Zt=Object(n.l)(An," manually, we will set up PostCSS to transpile a source CSS file into a static CSS file to be used."),An.forEach(n.t),te=Object(n.k)(t),ee=Object(n.j)(t,"P",{});var Wn=Object(n.h)(ee);se=Object(n.l)(Wn,"Create an asset "),ne=Object(n.j)(Wn,"CODE",{});var Nn=Object(n.h)(ne);ae=Object(n.l)(Nn,"/src/assets/global.css"),Nn.forEach(n.t),ce=Object(n.l)(Wn,", and import Tailwind CSS styles."),Wn.forEach(n.t),oe=Object(n.k)(t),pe=Object(n.j)(t,"PRE",{class:!0}),Object(n.h)(pe).forEach(n.t),je=Object(n.k)(t),be=Object(n.j)(t,"H3",{});var Jn=Object(n.h)(be);le=Object(n.l)(Jn,"Configure PostCSS with "),Oe=Object(n.j)(Jn,"CODE",{});var Vn=Object(n.h)(Oe);re=Object(n.l)(Vn,"svelte-preprocess"),Vn.forEach(n.t),Jn.forEach(n.t),ie=Object(n.k)(t),ue=Object(n.j)(t,"P",{});var $n=Object(n.h)(ue);de=Object(n.l)($n,"In the root of our project, create "),ke=Object(n.j)($n,"CODE",{});var zn=Object(n.h)(ke);he=Object(n.l)(zn,"postcss.config.js"),zn.forEach(n.t),ge=Object(n.l)($n,", and load our PostCSS plugins."),$n.forEach(n.t),fe=Object(n.k)(t),ve=Object(n.j)(t,"PRE",{class:!0}),Object(n.h)(ve).forEach(n.t),me=Object(n.k)(t),Se=Object(n.j)(t,"P",{});var _n=Object(n.h)(Se);Te=Object(n.j)(_n,"CODE",{});var Bn=Object(n.h)(Te);De=Object(n.l)(Bn,"postcss-import"),Bn.forEach(n.t),Ee=Object(n.l)(_n," and "),we=Object(n.j)(_n,"CODE",{});var Gn=Object(n.h)(we);Ce=Object(n.l)(Gn,"postcss-nested"),Gn.forEach(n.t),ye=Object(n.l)(_n," introduce some additional syntax that needs to be handled manually."),_n.forEach(n.t),Pe=Object(n.k)(t),Qe=Object(n.j)(t,"P",{});var Kn=Object(n.h)(Qe);xe=Object(n.l)(Kn,"To do so, we use "),He=Object(n.j)(Kn,"CODE",{});var Un=Object(n.h)(He);qe=Object(n.l)(Un,"svelte-preprocess"),Un.forEach(n.t),Ie=Object(n.l)(Kn,". The preprocessor allows us to apply modifications to the code before it is passed into the Svelte engine."),Kn.forEach(n.t),Me=Object(n.k)(t),Re=Object(n.j)(t,"P",{});var Xn=Object(n.h)(Re);Le=Object(n.l)(Xn,"First, create our preprocessor options object under "),Ae=Object(n.j)(Xn,"CODE",{});var Yn=Object(n.h)(Ae);Fe=Object(n.l)(Yn,"svelte.config.js"),Yn.forEach(n.t),We=Object(n.l)(Xn,"…"),Xn.forEach(n.t),Ne=Object(n.k)(t),Je=Object(n.j)(t,"PRE",{class:!0}),Object(n.h)(Je).forEach(n.t),Ve=Object(n.k)(t),$e=Object(n.j)(t,"P",{});var Zn=Object(n.h)($e);ze=Object(n.j)(Zn,"CODE",{});var ta=Object(n.h)(ze);_e=Object(n.l)(ta,"svelte.config.js"),ta.forEach(n.t),Be=Object(n.l)(Zn," is used to configure our language server, such that the Svelte extension for VSCode and coc knows how to parse our source code and provide proper syntax highlighting and error messages."),Zn.forEach(n.t),Ge=Object(n.k)(t),Ke=Object(n.j)(t,"P",{});var ea=Object(n.h)(Ke);Ue=Object(n.l)(ea,"To enable the preprocessor for the language server, simply export  a "),Xe=Object(n.j)(ea,"CODE",{});var sa=Object(n.h)(Xe);Ye=Object(n.l)(sa,"preprocess"),sa.forEach(n.t),Ze=Object(n.l)(ea," object from "),ts=Object(n.j)(ea,"CODE",{});var na=Object(n.h)(ts);es=Object(n.l)(na,"svelte.config.js"),na.forEach(n.t),ss=Object(n.l)(ea,"."),ea.forEach(n.t),ns=Object(n.k)(t),as=Object(n.j)(t,"PRE",{class:!0}),Object(n.h)(as).forEach(n.t),cs=Object(n.k)(t),os=Object(n.j)(t,"P",{});var aa=Object(n.h)(os);ps=Object(n.l)(aa,"We also export the options object, since we want to use the same configuration for our build step under "),js=Object(n.j)(aa,"CODE",{});var ca=Object(n.h)(js);bs=Object(n.l)(ca,"rollup.config.js"),ca.forEach(n.t),ls=Object(n.l)(aa," or "),Os=Object(n.j)(aa,"CODE",{});var oa=Object(n.h)(Os);rs=Object(n.l)(oa,"webpack.config.js"),oa.forEach(n.t),is=Object(n.l)(aa,"."),aa.forEach(n.t),us=Object(n.k)(t),ds=Object(n.j)(t,"P",{});var pa=Object(n.h)(ds);ks=Object(n.l)(pa,"For Rollup, add "),hs=Object(n.j)(pa,"CODE",{});var ja=Object(n.h)(hs);gs=Object(n.l)(ja,"preprocess"),ja.forEach(n.t),fs=Object(n.l)(pa," to the "),vs=Object(n.j)(pa,"CODE",{});var ba=Object(n.h)(vs);ms=Object(n.l)(ba,"svelte"),ba.forEach(n.t),Ss=Object(n.l)(pa," object for both the client and server…"),pa.forEach(n.t),Ts=Object(n.k)(t),Ds=Object(n.j)(t,"PRE",{class:!0}),Object(n.h)(Ds).forEach(n.t),Es=Object(n.k)(t),ws=Object(n.j)(t,"P",{});var la=Object(n.h)(ws);Cs=Object(n.l)(la,"For Webpack, add "),ys=Object(n.j)(la,"CODE",{});var Oa=Object(n.h)(ys);Ps=Object(n.l)(Oa,"preprocess"),Oa.forEach(n.t),Qs=Object(n.l)(la," to the "),xs=Object(n.j)(la,"CODE",{});var ra=Object(n.h)(xs);Hs=Object(n.l)(ra,"/\\\\.(svelte|html)$/"),ra.forEach(n.t),qs=Object(n.l)(la," rule for both the client and server…"),la.forEach(n.t),Is=Object(n.k)(t),Ms=Object(n.j)(t,"PRE",{class:!0}),Object(n.h)(Ms).forEach(n.t),Rs=Object(n.k)(t),Ls=Object(n.j)(t,"H3",{});var ia=Object(n.h)(Ls);As=Object(n.l)(ia,"Adjust npm scripts"),ia.forEach(n.t),Fs=Object(n.k)(t),Ws=Object(n.j)(t,"P",{});var ua=Object(n.h)(Ws);Ns=Object(n.l)(ua,"After setting up the configurations, we need to run two compilation steps for our project: one to compile the Svelte code into native Javascript, and one to compile PostCSS and apply our plugins, including Tailwind CSS."),ua.forEach(n.t),Js=Object(n.k)(t),Vs=Object(n.j)(t,"P",{});var da=Object(n.h)(Vs);$s=Object(n.l)(da,"To do so, we use "),zs=Object(n.j)(da,"CODE",{});var ka=Object(n.h)(zs);_s=Object(n.l)(ka,"npm-run-all"),ka.forEach(n.t),Bs=Object(n.l)(da," to simultaneously watch for changes and incrementally compile the necessary files for both compilation steps."),da.forEach(n.t),Gs=Object(n.k)(t),Ks=Object(n.j)(t,"P",{});var ha=Object(n.h)(Ks);Us=Object(n.l)(ha,"We also add the PostCSS compilation step to our build step. In "),Xs=Object(n.j)(ha,"CODE",{});var ga=Object(n.h)(Xs);Ys=Object(n.l)(ga,"package.json"),ga.forEach(n.t),Zs=Object(n.l)(ha,"…"),ha.forEach(n.t),tn=Object(n.k)(t),en=Object(n.j)(t,"PRE",{class:!0}),Object(n.h)(en).forEach(n.t),sn=Object(n.k)(t),nn=Object(n.j)(t,"P",{});var fa=Object(n.h)(nn);an=Object(n.l)(fa,"Now you should be able to use Tailwind CSS in your Sapper project!"),fa.forEach(n.t),this.h()},h(){Object(n.f)(h,"class","language-html"),Object(n.f)(x,"class","language-html"),Object(n.f)(nt,"class","language-bash"),Object(n.f)(Jt,"class","language-bash"),Object(n.f)(Bt,"class","language-javascript"),Object(n.f)(pe,"class","language-css"),Object(n.f)(ve,"class","language-javascript"),Object(n.f)(Je,"class","language-javascript"),Object(n.f)(as,"class","language-javascript"),Object(n.f)(Ds,"class","language-javascript"),Object(n.f)(Ms,"class","language-javascript"),Object(n.f)(en,"class","language-json")},m(t,cn){Object(n.D)(t,e,cn),Object(n.d)(e,s),Object(n.D)(t,a,cn),Object(n.D)(t,c,cn),Object(n.d)(c,o),Object(n.D)(t,p,cn),Object(n.D)(t,j,cn),Object(n.d)(j,b),Object(n.D)(t,l,cn),Object(n.D)(t,O,cn),Object(n.d)(O,r),Object(n.D)(t,i,cn),Object(n.D)(t,u,cn),Object(n.d)(u,d),Object(n.D)(t,k,cn),Object(n.D)(t,h,cn),h.innerHTML='<code class="language-html"><span class="token comment">&lt;!-- Parent.svelte --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n  <span class="token selector">.margin-lg</span> <span class="token punctuation">&#123;</span>    // unused class warning\n    <span class="token property">margin</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildCard</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>margin-lg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code>',Object(n.D)(t,g,cn),Object(n.D)(t,f,cn),Object(n.d)(f,v),Object(n.d)(f,m),Object(n.d)(m,S),Object(n.d)(f,T),Object(n.D)(t,D,cn),Object(n.D)(t,E,cn),Object(n.d)(E,w),Object(n.D)(t,C,cn),Object(n.D)(t,y,cn),Object(n.d)(y,P),Object(n.D)(t,Q,cn),Object(n.D)(t,x,cn),x.innerHTML='<code class="language-html"><span class="token comment">&lt;!-- Parent.svelte --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildCard</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>m-4<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n\n\n<span class="token comment">&lt;!-- ChildCard.svelte --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">export</span> <span class="token punctuation">&#123;</span> className <span class="token keyword">as</span> <span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// exports a prop \'class\'</span>\n  <span class="token keyword">let</span> className<span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>&#123;className&#125;/</span><span class="token punctuation">></span></span></code>',Object(n.D)(t,H,cn),Object(n.D)(t,q,cn),Object(n.d)(q,I),Object(n.d)(q,M),Object(n.d)(M,R),Object(n.d)(q,L),Object(n.d)(q,A),Object(n.d)(A,F),Object(n.d)(q,W),Object(n.d)(q,N),Object(n.d)(N,J),Object(n.d)(q,V),Object(n.D)(t,$,cn),Object(n.D)(t,z,cn),Object(n.d)(z,_),Object(n.D)(t,B,cn),Object(n.D)(t,G,cn),Object(n.d)(G,K),Object(n.D)(t,U,cn),Object(n.D)(t,X,cn),Object(n.d)(X,Y),Object(n.D)(t,Z,cn),Object(n.D)(t,tt,cn),Object(n.d)(tt,et),Object(n.D)(t,st,cn),Object(n.D)(t,nt,cn),nt.innerHTML='<code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -D autoprefixer postcss-load-config <span class="token punctuation"></span>\npostcss-cli postcss-import postcss-nested cssnano <span class="token punctuation"></span>\ntailwindcss npm-run-all</code>',Object(n.D)(t,at,cn),Object(n.D)(t,ct,cn),Object(n.d)(ct,ot),Object(n.d)(ot,pt),Object(n.d)(ct,jt),Object(n.d)(ct,bt),Object(n.d)(bt,lt),Object(n.d)(ct,Ot),Object(n.D)(t,rt,cn),Object(n.D)(t,it,cn),Object(n.d)(it,ut),Object(n.d)(ut,dt),Object(n.d)(it,kt),Object(n.D)(t,ht,cn),Object(n.D)(t,gt,cn),Object(n.d)(gt,ft),Object(n.d)(ft,vt),Object(n.d)(gt,mt),Object(n.d)(gt,St),Object(n.d)(St,Tt),Object(n.d)(gt,Dt),Object(n.D)(t,Et,cn),Object(n.D)(t,wt,cn),Object(n.d)(wt,Ct),Object(n.d)(Ct,yt),Object(n.d)(wt,Pt),Object(n.D)(t,Qt,cn),Object(n.D)(t,xt,cn),Object(n.d)(xt,Ht),Object(n.d)(Ht,qt),Object(n.d)(xt,It),Object(n.D)(t,Mt,cn),Object(n.D)(t,Rt,cn),Object(n.d)(Rt,Lt),Object(n.D)(t,At,cn),Object(n.D)(t,Ft,cn),Object(n.d)(Ft,Wt),Object(n.D)(t,Nt,cn),Object(n.D)(t,Jt,cn),Jt.innerHTML='<code class="language-bash">npx tailwind init</code>',Object(n.D)(t,Vt,cn),Object(n.D)(t,$t,cn),Object(n.d)($t,zt),Object(n.D)(t,_t,cn),Object(n.D)(t,Bt,cn),Bt.innerHTML='<code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  purge<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/**/*.svelte"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  theme<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n    extend<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  variants<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',Object(n.D)(t,Gt,cn),Object(n.D)(t,Kt,cn),Object(n.d)(Kt,Ut),Object(n.d)(Kt,Xt),Object(n.d)(Xt,Yt),Object(n.d)(Kt,Zt),Object(n.D)(t,te,cn),Object(n.D)(t,ee,cn),Object(n.d)(ee,se),Object(n.d)(ee,ne),Object(n.d)(ne,ae),Object(n.d)(ee,ce),Object(n.D)(t,oe,cn),Object(n.D)(t,pe,cn),pe.innerHTML='<code class="language-css"><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span></code>',Object(n.D)(t,je,cn),Object(n.D)(t,be,cn),Object(n.d)(be,le),Object(n.d)(be,Oe),Object(n.d)(Oe,re),Object(n.D)(t,ie,cn),Object(n.D)(t,ue,cn),Object(n.d)(ue,de),Object(n.d)(ue,ke),Object(n.d)(ke,he),Object(n.d)(ue,ge),Object(n.D)(t,fe,cn),Object(n.D)(t,ve,cn),ve.innerHTML='<code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'postcss-import\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'postcss-nested\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'cssnano\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n      preset<span class="token operator">:</span> <span class="token string">\'default\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',Object(n.D)(t,me,cn),Object(n.D)(t,Se,cn),Object(n.d)(Se,Te),Object(n.d)(Te,De),Object(n.d)(Se,Ee),Object(n.d)(Se,we),Object(n.d)(we,Ce),Object(n.d)(Se,ye),Object(n.D)(t,Pe,cn),Object(n.D)(t,Qe,cn),Object(n.d)(Qe,xe),Object(n.d)(Qe,He),Object(n.d)(He,qe),Object(n.d)(Qe,Ie),Object(n.D)(t,Me,cn),Object(n.D)(t,Re,cn),Object(n.d)(Re,Le),Object(n.d)(Re,Ae),Object(n.d)(Ae,Fe),Object(n.d)(Re,We),Object(n.D)(t,Ne,cn),Object(n.D)(t,Je,cn),Je.innerHTML='<code class="language-javascript"><span class="token keyword">const</span> sveltePreprocess <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'svelte-preprocess\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> preprocessOptions <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  postcss<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'postcss-import\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'postcss-nested\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',Object(n.D)(t,Ve,cn),Object(n.D)(t,$e,cn),Object(n.d)($e,ze),Object(n.d)(ze,_e),Object(n.d)($e,Be),Object(n.D)(t,Ge,cn),Object(n.D)(t,Ke,cn),Object(n.d)(Ke,Ue),Object(n.d)(Ke,Xe),Object(n.d)(Xe,Ye),Object(n.d)(Ke,Ze),Object(n.d)(Ke,ts),Object(n.d)(ts,es),Object(n.d)(Ke,ss),Object(n.D)(t,ns,cn),Object(n.D)(t,as,cn),as.innerHTML='<code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  preprocess<span class="token operator">:</span> <span class="token function">sveltePreprocess</span><span class="token punctuation">(</span>preprocessOptions<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  preprocessOptions<span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',Object(n.D)(t,cs,cn),Object(n.D)(t,os,cn),Object(n.d)(os,ps),Object(n.d)(os,js),Object(n.d)(js,bs),Object(n.d)(os,ls),Object(n.d)(os,Os),Object(n.d)(Os,rs),Object(n.d)(os,is),Object(n.D)(t,us,cn),Object(n.D)(t,ds,cn),Object(n.d)(ds,ks),Object(n.d)(ds,hs),Object(n.d)(hs,gs),Object(n.d)(ds,fs),Object(n.d)(ds,vs),Object(n.d)(vs,ms),Object(n.d)(ds,Ss),Object(n.D)(t,Ts,cn),Object(n.D)(t,Ds,cn),Ds.innerHTML='<code class="language-javascript"><span class="token keyword">const</span> preprocess <span class="token operator">=</span> <span class="token function">sveltePreprocess</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n  sourceMap<span class="token operator">:</span> dev<span class="token punctuation">,</span>       <span class="token comment">// additional preprocess option</span>\n  <span class="token operator">...</span>preprocessOptions<span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nclient<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n  <span class="token operator">...</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token operator">...</span>\n    <span class="token function">svelte</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n      preprocess<span class="token punctuation">,</span>\n      dev<span class="token punctuation">,</span>\n      <span class="token operator">...</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n\nserver<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n  <span class="token operator">...</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token operator">...</span>\n    <span class="token function">svelte</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n      preprocess<span class="token punctuation">,</span>\n      generate<span class="token operator">:</span> <span class="token string">\'ssr\'</span><span class="token punctuation">,</span>\n      <span class="token operator">...</span>\n<span class="token punctuation">&#125;</span></code>',Object(n.D)(t,Es,cn),Object(n.D)(t,ws,cn),Object(n.d)(ws,Cs),Object(n.d)(ws,ys),Object(n.d)(ys,Ps),Object(n.d)(ws,Qs),Object(n.d)(ws,xs),Object(n.d)(xs,Hs),Object(n.d)(ws,qs),Object(n.D)(t,Is,cn),Object(n.D)(t,Ms,cn),Ms.innerHTML='<code class="language-javascript">client<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n  <span class="token operator">...</span>\n    module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n      rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">&#123;</span>\n          test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(svelte|html)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n          use<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n            options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n              preprocess<span class="token punctuation">,</span>\n              <span class="token operator">...</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n\nserver<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n  <span class="token operator">...</span>\n    module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n      rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">&#123;</span>\n          test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(svelte|html)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n          use<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n            options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n              preprocess<span class="token punctuation">,</span>\n              <span class="token operator">...</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code>',Object(n.D)(t,Rs,cn),Object(n.D)(t,Ls,cn),Object(n.d)(Ls,As),Object(n.D)(t,Fs,cn),Object(n.D)(t,Ws,cn),Object(n.d)(Ws,Ns),Object(n.D)(t,Js,cn),Object(n.D)(t,Vs,cn),Object(n.d)(Vs,$s),Object(n.d)(Vs,zs),Object(n.d)(zs,_s),Object(n.d)(Vs,Bs),Object(n.D)(t,Gs,cn),Object(n.D)(t,Ks,cn),Object(n.d)(Ks,Us),Object(n.d)(Ks,Xs),Object(n.d)(Xs,Ys),Object(n.d)(Ks,Zs),Object(n.D)(t,tn,cn),Object(n.D)(t,en,cn),en.innerHTML='<code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n  <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"run-p watch:css watch:sapper"</span><span class="token punctuation">,</span>\n  <span class="token property">"watch:css"</span><span class="token operator">:</span> <span class="token string">"postcss src/assets/global.css -o static/global.css -w"</span><span class="token punctuation">,</span>\n  <span class="token property">"watch:sapper"</span><span class="token operator">:</span> <span class="token string">"sapper dev"</span><span class="token punctuation">,</span>\n  <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"run-s build:css build:sapper"</span><span class="token punctuation">,</span>\n  <span class="token property">"build:css"</span><span class="token operator">:</span> <span class="token string">"NODE_ENV=production postcss src/assets/global.css -o static/global.css"</span><span class="token punctuation">,</span>\n  <span class="token property">"build:sapper"</span><span class="token operator">:</span> <span class="token string">"NODE_ENV=production sapper build"</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code>',Object(n.D)(t,sn,cn),Object(n.D)(t,nn,cn),Object(n.d)(nn,an)},p:n.H,i:n.H,o:n.H,d(t){t&&Object(n.t)(e),t&&Object(n.t)(a),t&&Object(n.t)(c),t&&Object(n.t)(p),t&&Object(n.t)(j),t&&Object(n.t)(l),t&&Object(n.t)(O),t&&Object(n.t)(i),t&&Object(n.t)(u),t&&Object(n.t)(k),t&&Object(n.t)(h),t&&Object(n.t)(g),t&&Object(n.t)(f),t&&Object(n.t)(D),t&&Object(n.t)(E),t&&Object(n.t)(C),t&&Object(n.t)(y),t&&Object(n.t)(Q),t&&Object(n.t)(x),t&&Object(n.t)(H),t&&Object(n.t)(q),t&&Object(n.t)($),t&&Object(n.t)(z),t&&Object(n.t)(B),t&&Object(n.t)(G),t&&Object(n.t)(U),t&&Object(n.t)(X),t&&Object(n.t)(Z),t&&Object(n.t)(tt),t&&Object(n.t)(st),t&&Object(n.t)(nt),t&&Object(n.t)(at),t&&Object(n.t)(ct),t&&Object(n.t)(rt),t&&Object(n.t)(it),t&&Object(n.t)(ht),t&&Object(n.t)(gt),t&&Object(n.t)(Et),t&&Object(n.t)(wt),t&&Object(n.t)(Qt),t&&Object(n.t)(xt),t&&Object(n.t)(Mt),t&&Object(n.t)(Rt),t&&Object(n.t)(At),t&&Object(n.t)(Ft),t&&Object(n.t)(Nt),t&&Object(n.t)(Jt),t&&Object(n.t)(Vt),t&&Object(n.t)($t),t&&Object(n.t)(_t),t&&Object(n.t)(Bt),t&&Object(n.t)(Gt),t&&Object(n.t)(Kt),t&&Object(n.t)(te),t&&Object(n.t)(ee),t&&Object(n.t)(oe),t&&Object(n.t)(pe),t&&Object(n.t)(je),t&&Object(n.t)(be),t&&Object(n.t)(ie),t&&Object(n.t)(ue),t&&Object(n.t)(fe),t&&Object(n.t)(ve),t&&Object(n.t)(me),t&&Object(n.t)(Se),t&&Object(n.t)(Pe),t&&Object(n.t)(Qe),t&&Object(n.t)(Me),t&&Object(n.t)(Re),t&&Object(n.t)(Ne),t&&Object(n.t)(Je),t&&Object(n.t)(Ve),t&&Object(n.t)($e),t&&Object(n.t)(Ge),t&&Object(n.t)(Ke),t&&Object(n.t)(ns),t&&Object(n.t)(as),t&&Object(n.t)(cs),t&&Object(n.t)(os),t&&Object(n.t)(us),t&&Object(n.t)(ds),t&&Object(n.t)(Ts),t&&Object(n.t)(Ds),t&&Object(n.t)(Es),t&&Object(n.t)(ws),t&&Object(n.t)(Is),t&&Object(n.t)(Ms),t&&Object(n.t)(Rs),t&&Object(n.t)(Ls),t&&Object(n.t)(Fs),t&&Object(n.t)(Ws),t&&Object(n.t)(Js),t&&Object(n.t)(Vs),t&&Object(n.t)(Gs),t&&Object(n.t)(Ks),t&&Object(n.t)(tn),t&&Object(n.t)(en),t&&Object(n.t)(sn),t&&Object(n.t)(nn)}}}const c={title:"Svelte, Sapper, and Tailwind CSS"},{title:o}=c;class p extends n.a{constructor(t){super(),Object(n.C)(this,t,null,a,n.M,{})}}e.default=p}}]);