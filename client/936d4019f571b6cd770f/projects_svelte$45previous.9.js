(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{27:function(e,t,c){"use strict";c.r(t),c.d(t,"META",(function(){return r}));var b=c(0),a=c(8),j=c(7);function O(e){let t,c,j,O,r,i,l,h,d,p,g,m,v,u,f,y,w,z,A,I,E,x,k,q,S,Y,D,V,T,J,P,H,$,C,N,W,G,R,M,F,L,U,_,B,K,Q,X,Z,ee,te,ce,be,ae,je,Oe,re,oe,ne,se,ie,le,he,de,pe,ge,me,ve,ue,fe,ye,we,ze,Ae,Ie,Ee,xe,ke,qe,Se,Ye,De,Ve,Te,Je,Pe,He,$e,Ce,Ne,We,Ge,Re,Me,Fe,Le,Ue,_e,Be,Ke,Qe,Xe,Ze,et,tt,ct,bt,at,jt,Ot,rt,ot,nt;return xe=new a.a({props:{tech:e[1],class:"flex justify-center h-12"}}),{c(){t=Object(b.Y)(),c=Object(b.A)("div"),j=Object(b.A)("div"),O=Object(b.A)("h2"),r=Object(b.bb)(e[0]),i=Object(b.Y)(),l=Object(b.A)("div"),h=Object(b.bb)("Svelte Stores that remember previous values!"),d=Object(b.Y)(),p=Object(b.A)("img"),m=Object(b.Y)(),v=Object(b.A)("div"),u=Object(b.A)("p"),f=Object(b.bb)("Some time back, I was trying to re-create a "),y=Object(b.A)("strong"),w=Object(b.bb)("fancy"),z=Object(b.bb)(" animation I had seen\nfrom Cyberpunk 2077:"),A=Object(b.Y)(),I=Object(b.A)("div"),E=Object(b.A)("p"),x=Object(b.bb)("When doing so, I found myself needing the previous value of the text\nproperty when creating the transition. In fact, I realized that it would be\nquite common to need a reference to the old value of a newly changed\nproperty in Svelte. However, there was no simple or clean solution at the\ntime."),k=Object(b.Y)(),q=Object(b.A)("div"),S=Object(b.A)("p"),Y=Object(b.bb)("In Svelte, when we need custom behaviour from our data, we should use\n"),D=Object(b.A)("a"),V=Object(b.bb)("Svelte Stores"),T=Object(b.bb)("! Therefore, I\ndeveloped this package to provide the most Svelte-like way of handling such\nbehaviour."),J=Object(b.Y)(),P=Object(b.A)("div"),H=Object(b.A)("a"),$=Object(b.bb)("Check it out on Github"),C=Object(b.Y)(),N=Object(b.A)("hr"),W=Object(b.Y)(),G=Object(b.A)("div"),R=Object(b.A)("div"),M=Object(b.A)("h3"),F=Object(b.bb)("How it works"),L=Object(b.Y)(),U=Object(b.A)("div"),_=Object(b.A)("p"),B=Object(b.bb)("The package returns an array of stores — the first being a writable\nstore and the rest being read-only."),K=Object(b.Y)(),X=Object(b.Y)(),Z=Object(b.A)("div"),ee=Object(b.A)("p"),te=Object(b.bb)("When the stores are initialized, an internal store is created to keep track\nof all revisions made to the value. When the value is updated, we only have\nto increase the index of all revisions by one, and add the new value to the\nhead of the array."),ce=Object(b.Y)(),be=Object(b.A)("div"),ae=Object(b.A)("p"),je=Object(b.bb)("To create individual stores from the array store, we can use an underlooked\nfeature of Svelte Stores — "),Oe=Object(b.A)("a"),re=Object(b.bb)("derived\nstores"),oe=Object(b.bb)("."),ne=Object(b.Y)(),se=Object(b.A)("div"),ie=Object(b.A)("p"),le=Object(b.bb)("We can simply derive stores for each element of the array, and give the\nfirst store a "),he=Object(b.A)("code"),de=Object(b.bb)("set"),pe=Object(b.bb)(" and "),ge=Object(b.A)("code"),me=Object(b.bb)("update"),ve=Object(b.bb)(" function to make it a writable store."),ue=Object(b.Y)(),fe=Object(b.A)("hr"),ye=Object(b.Y)(),we=Object(b.A)("div"),ze=Object(b.A)("div"),Ae=Object(b.A)("h3"),Ie=Object(b.bb)("Lessons learnt"),Ee=Object(b.Y)(),Object(b.t)(xe.$$.fragment),ke=Object(b.Y)(),qe=Object(b.A)("div"),Se=Object(b.A)("p"),Ye=Object(b.bb)("This project was written in "),De=Object(b.A)("strong"),Ve=Object(b.bb)("Typescript"),Te=Object(b.bb)(", as I truly enjoy the powerful\ntype system. It also gave me another chance to brush up on my understanding\nof "),Je=Object(b.A)("strong"),Pe=Object(b.bb)("Svelte"),He=Object(b.bb)(" and the state management functionality provided by stores."),$e=Object(b.Y)(),Ce=Object(b.A)("div"),Ne=Object(b.A)("p"),We=Object(b.bb)("More importantly, this project reminded me that the most crucial step in\ndesigning a package is the planning phase before any code is written."),Ge=Object(b.Y)(),Re=Object(b.A)("div"),Me=Object(b.A)("p"),Fe=Object(b.bb)("From the start, I knew that I did not want a difference in data type between\nwriting a value and reading the value from the store. Therefore, I ruled out\nsuch an interface early on:"),Le=Object(b.Y)(),_e=Object(b.Y)(),Be=Object(b.A)("div"),Ke=Object(b.bb)("I toyed with the idea of providing a "),Qe=Object(b.A)("code"),Xe=Object(b.bb)(".setCurrent"),Ze=Object(b.bb)(" method on the store:"),et=Object(b.Y)(),ct=Object(b.Y)(),bt=Object(b.A)("div"),at=Object(b.A)("p"),jt=Object(b.bb)("However, the syntax becomes awkward, and it is "),Ot=Object(b.A)("strong"),rt=Object(b.bb)("easy to make mistakes"),ot=Object(b.bb)("\nwhen setting the current value. Ultimately, I decided on using a helper\nfunction to instantiate multiple stores that would be coupled together,\nwhich produced the current API design."),this.h()},l(a){Object(b.R)('[data-svelte="svelte-12dosci"]',document.head).forEach(b.z),t=Object(b.p)(a),c=Object(b.o)(a,"DIV",{class:!0});var o=Object(b.m)(c);j=Object(b.o)(o,"DIV",{class:!0});var n=Object(b.m)(j);O=Object(b.o)(n,"H2",{});var s=Object(b.m)(O);r=Object(b.q)(s,e[0]),s.forEach(b.z),n.forEach(b.z),i=Object(b.p)(o),l=Object(b.o)(o,"DIV",{class:!0});var g=Object(b.m)(l);h=Object(b.q)(g,"Svelte Stores that remember previous values!"),g.forEach(b.z),d=Object(b.p)(o),p=Object(b.o)(o,"IMG",{src:!0,alt:!0,class:!0}),m=Object(b.p)(o),v=Object(b.o)(o,"DIV",{class:!0});var Q=Object(b.m)(v);u=Object(b.o)(Q,"P",{});var Ue=Object(b.m)(u);f=Object(b.q)(Ue,"Some time back, I was trying to re-create a "),y=Object(b.o)(Ue,"STRONG",{});var tt=Object(b.m)(y);w=Object(b.q)(tt,"fancy"),tt.forEach(b.z),z=Object(b.q)(Ue," animation I had seen\nfrom Cyberpunk 2077:"),Ue.forEach(b.z),Q.forEach(b.z),A=Object(b.p)(o),I=Object(b.o)(o,"DIV",{class:!0});var nt=Object(b.m)(I);E=Object(b.o)(nt,"P",{});var st=Object(b.m)(E);x=Object(b.q)(st,"When doing so, I found myself needing the previous value of the text\nproperty when creating the transition. In fact, I realized that it would be\nquite common to need a reference to the old value of a newly changed\nproperty in Svelte. However, there was no simple or clean solution at the\ntime."),st.forEach(b.z),nt.forEach(b.z),k=Object(b.p)(o),q=Object(b.o)(o,"DIV",{class:!0});var it=Object(b.m)(q);S=Object(b.o)(it,"P",{});var lt=Object(b.m)(S);Y=Object(b.q)(lt,"In Svelte, when we need custom behaviour from our data, we should use\n"),D=Object(b.o)(lt,"A",{href:!0});var ht=Object(b.m)(D);V=Object(b.q)(ht,"Svelte Stores"),ht.forEach(b.z),T=Object(b.q)(lt,"! Therefore, I\ndeveloped this package to provide the most Svelte-like way of handling such\nbehaviour."),lt.forEach(b.z),it.forEach(b.z),o.forEach(b.z),J=Object(b.p)(a),P=Object(b.o)(a,"DIV",{class:!0});var dt=Object(b.m)(P);H=Object(b.o)(dt,"A",{href:!0,class:!0});var pt=Object(b.m)(H);$=Object(b.q)(pt,"Check it out on Github"),pt.forEach(b.z),dt.forEach(b.z),C=Object(b.p)(a),N=Object(b.o)(a,"HR",{}),W=Object(b.p)(a),G=Object(b.o)(a,"DIV",{class:!0});var gt=Object(b.m)(G);R=Object(b.o)(gt,"DIV",{class:!0});var mt=Object(b.m)(R);M=Object(b.o)(mt,"H3",{});var vt=Object(b.m)(M);F=Object(b.q)(vt,"How it works"),vt.forEach(b.z),mt.forEach(b.z),L=Object(b.p)(gt),U=Object(b.o)(gt,"DIV",{class:!0});var ut=Object(b.m)(U);_=Object(b.o)(ut,"P",{});var ft=Object(b.m)(_);B=Object(b.q)(ft,"The package returns an array of stores — the first being a writable\nstore and the rest being read-only."),ft.forEach(b.z),ut.forEach(b.z),K=Object(b.p)(gt),X=Object(b.p)(gt),Z=Object(b.o)(gt,"DIV",{class:!0});var yt=Object(b.m)(Z);ee=Object(b.o)(yt,"P",{});var wt=Object(b.m)(ee);te=Object(b.q)(wt,"When the stores are initialized, an internal store is created to keep track\nof all revisions made to the value. When the value is updated, we only have\nto increase the index of all revisions by one, and add the new value to the\nhead of the array."),wt.forEach(b.z),yt.forEach(b.z),ce=Object(b.p)(gt),be=Object(b.o)(gt,"DIV",{class:!0});var zt=Object(b.m)(be);ae=Object(b.o)(zt,"P",{});var At=Object(b.m)(ae);je=Object(b.q)(At,"To create individual stores from the array store, we can use an underlooked\nfeature of Svelte Stores — "),Oe=Object(b.o)(At,"A",{href:!0});var It=Object(b.m)(Oe);re=Object(b.q)(It,"derived\nstores"),It.forEach(b.z),oe=Object(b.q)(At,"."),At.forEach(b.z),zt.forEach(b.z),ne=Object(b.p)(gt),se=Object(b.o)(gt,"DIV",{class:!0});var Et=Object(b.m)(se);ie=Object(b.o)(Et,"P",{});var xt=Object(b.m)(ie);le=Object(b.q)(xt,"We can simply derive stores for each element of the array, and give the\nfirst store a "),he=Object(b.o)(xt,"CODE",{});var kt=Object(b.m)(he);de=Object(b.q)(kt,"set"),kt.forEach(b.z),pe=Object(b.q)(xt," and "),ge=Object(b.o)(xt,"CODE",{});var qt=Object(b.m)(ge);me=Object(b.q)(qt,"update"),qt.forEach(b.z),ve=Object(b.q)(xt," function to make it a writable store."),xt.forEach(b.z),Et.forEach(b.z),gt.forEach(b.z),ue=Object(b.p)(a),fe=Object(b.o)(a,"HR",{}),ye=Object(b.p)(a),we=Object(b.o)(a,"DIV",{class:!0});var St=Object(b.m)(we);ze=Object(b.o)(St,"DIV",{class:!0});var Yt=Object(b.m)(ze);Ae=Object(b.o)(Yt,"H3",{});var Dt=Object(b.m)(Ae);Ie=Object(b.q)(Dt,"Lessons learnt"),Dt.forEach(b.z),Yt.forEach(b.z),Ee=Object(b.p)(St),Object(b.n)(xe.$$.fragment,St),ke=Object(b.p)(St),qe=Object(b.o)(St,"DIV",{class:!0});var Vt=Object(b.m)(qe);Se=Object(b.o)(Vt,"P",{});var Tt=Object(b.m)(Se);Ye=Object(b.q)(Tt,"This project was written in "),De=Object(b.o)(Tt,"STRONG",{});var Jt=Object(b.m)(De);Ve=Object(b.q)(Jt,"Typescript"),Jt.forEach(b.z),Te=Object(b.q)(Tt,", as I truly enjoy the powerful\ntype system. It also gave me another chance to brush up on my understanding\nof "),Je=Object(b.o)(Tt,"STRONG",{});var Pt=Object(b.m)(Je);Pe=Object(b.q)(Pt,"Svelte"),Pt.forEach(b.z),He=Object(b.q)(Tt," and the state management functionality provided by stores."),Tt.forEach(b.z),Vt.forEach(b.z),$e=Object(b.p)(St),Ce=Object(b.o)(St,"DIV",{class:!0});var Ht=Object(b.m)(Ce);Ne=Object(b.o)(Ht,"P",{});var $t=Object(b.m)(Ne);We=Object(b.q)($t,"More importantly, this project reminded me that the most crucial step in\ndesigning a package is the planning phase before any code is written."),$t.forEach(b.z),Ht.forEach(b.z),Ge=Object(b.p)(St),Re=Object(b.o)(St,"DIV",{class:!0});var Ct=Object(b.m)(Re);Me=Object(b.o)(Ct,"P",{});var Nt=Object(b.m)(Me);Fe=Object(b.q)(Nt,"From the start, I knew that I did not want a difference in data type between\nwriting a value and reading the value from the store. Therefore, I ruled out\nsuch an interface early on:"),Nt.forEach(b.z),Ct.forEach(b.z),Le=Object(b.p)(St),_e=Object(b.p)(St),Be=Object(b.o)(St,"DIV",{class:!0});var Wt=Object(b.m)(Be);Ke=Object(b.q)(Wt,"I toyed with the idea of providing a "),Qe=Object(b.o)(Wt,"CODE",{});var Gt=Object(b.m)(Qe);Xe=Object(b.q)(Gt,".setCurrent"),Gt.forEach(b.z),Ze=Object(b.q)(Wt," method on the store:"),Wt.forEach(b.z),et=Object(b.p)(St),ct=Object(b.p)(St),bt=Object(b.o)(St,"DIV",{class:!0});var Rt=Object(b.m)(bt);at=Object(b.o)(Rt,"P",{});var Mt=Object(b.m)(at);jt=Object(b.q)(Mt,"However, the syntax becomes awkward, and it is "),Ot=Object(b.o)(Mt,"STRONG",{});var Ft=Object(b.m)(Ot);rt=Object(b.q)(Ft,"easy to make mistakes"),Ft.forEach(b.z),ot=Object(b.q)(Mt,"\nwhen setting the current value. Ultimately, I decided on using a helper\nfunction to instantiate multiple stores that would be coupled together,\nwhich produced the current API design."),Mt.forEach(b.z),Rt.forEach(b.z),St.forEach(b.z),this.h()},h(){document.title="svelte-previous",Object(b.i)(j,"class","font-mono text-center"),Object(b.i)(l,"class","text-center italic"),p.src!==(g=e[2])&&Object(b.i)(p,"src",g),Object(b.i)(p,"alt",e[0]),Object(b.i)(p,"class","mx-auto max-h-48"),Object(b.i)(v,"class","px-3 py-1 card leading-8"),Object(b.i)(I,"class","px-3 py-1 card leading-8"),Object(b.i)(D,"href","https://svelte.dev/tutorial/writable-stores"),Object(b.i)(q,"class","px-3 py-1 card leading-8"),Object(b.i)(c,"class","mx-auto my-10 prose space-y-3"),Object(b.i)(H,"href",e[3]),Object(b.i)(H,"class","p-3 italic font-bold cta-button"),Object(b.i)(P,"class","flex justify-center my-10"),Object(b.i)(R,"class","font-mono text-center"),Object(b.i)(U,"class","px-3 py-1 card leading-8"),Q=new b.a(X),Object(b.i)(Z,"class","px-3 py-1 card leading-8"),Object(b.i)(Oe,"href","https://svelte.dev/tutorial/derived-stores"),Object(b.i)(be,"class","px-3 py-1 card leading-8"),Object(b.i)(se,"class","px-3 py-1 card leading-8"),Object(b.i)(G,"class","mx-auto my-10 prose space-y-3"),Object(b.i)(ze,"class","font-mono text-center"),Object(b.i)(qe,"class","px-3 py-1 card leading-8"),Object(b.i)(Ce,"class","px-3 py-1 card leading-8"),Object(b.i)(Re,"class","px-3 py-1 card leading-8"),Ue=new b.a(_e),Object(b.i)(Be,"class","px-3 py-1 card leading-8"),tt=new b.a(ct),Object(b.i)(bt,"class","px-3 py-1 card leading-8"),Object(b.i)(we,"class","mx-auto my-10 prose space-y-3")},m(e,a){Object(b.J)(e,t,a),Object(b.J)(e,c,a),Object(b.g)(c,j),Object(b.g)(j,O),Object(b.g)(O,r),Object(b.g)(c,i),Object(b.g)(c,l),Object(b.g)(l,h),Object(b.g)(c,d),Object(b.g)(c,p),Object(b.g)(c,m),Object(b.g)(c,v),Object(b.g)(v,u),Object(b.g)(u,f),Object(b.g)(u,y),Object(b.g)(y,w),Object(b.g)(u,z),Object(b.g)(c,A),Object(b.g)(c,I),Object(b.g)(I,E),Object(b.g)(E,x),Object(b.g)(c,k),Object(b.g)(c,q),Object(b.g)(q,S),Object(b.g)(S,Y),Object(b.g)(S,D),Object(b.g)(D,V),Object(b.g)(S,T),Object(b.J)(e,J,a),Object(b.J)(e,P,a),Object(b.g)(P,H),Object(b.g)(H,$),Object(b.J)(e,C,a),Object(b.J)(e,N,a),Object(b.J)(e,W,a),Object(b.J)(e,G,a),Object(b.g)(G,R),Object(b.g)(R,M),Object(b.g)(M,F),Object(b.g)(G,L),Object(b.g)(G,U),Object(b.g)(U,_),Object(b.g)(_,B),Object(b.g)(G,K),Q.m(o,G),Object(b.g)(G,X),Object(b.g)(G,Z),Object(b.g)(Z,ee),Object(b.g)(ee,te),Object(b.g)(G,ce),Object(b.g)(G,be),Object(b.g)(be,ae),Object(b.g)(ae,je),Object(b.g)(ae,Oe),Object(b.g)(Oe,re),Object(b.g)(ae,oe),Object(b.g)(G,ne),Object(b.g)(G,se),Object(b.g)(se,ie),Object(b.g)(ie,le),Object(b.g)(ie,he),Object(b.g)(he,de),Object(b.g)(ie,pe),Object(b.g)(ie,ge),Object(b.g)(ge,me),Object(b.g)(ie,ve),Object(b.J)(e,ue,a),Object(b.J)(e,fe,a),Object(b.J)(e,ye,a),Object(b.J)(e,we,a),Object(b.g)(we,ze),Object(b.g)(ze,Ae),Object(b.g)(Ae,Ie),Object(b.g)(we,Ee),Object(b.M)(xe,we,null),Object(b.g)(we,ke),Object(b.g)(we,qe),Object(b.g)(qe,Se),Object(b.g)(Se,Ye),Object(b.g)(Se,De),Object(b.g)(De,Ve),Object(b.g)(Se,Te),Object(b.g)(Se,Je),Object(b.g)(Je,Pe),Object(b.g)(Se,He),Object(b.g)(we,$e),Object(b.g)(we,Ce),Object(b.g)(Ce,Ne),Object(b.g)(Ne,We),Object(b.g)(we,Ge),Object(b.g)(we,Re),Object(b.g)(Re,Me),Object(b.g)(Me,Fe),Object(b.g)(we,Le),Ue.m(n,we),Object(b.g)(we,_e),Object(b.g)(we,Be),Object(b.g)(Be,Ke),Object(b.g)(Be,Qe),Object(b.g)(Qe,Xe),Object(b.g)(Be,Ze),Object(b.g)(we,et),tt.m(s,we),Object(b.g)(we,ct),Object(b.g)(we,bt),Object(b.g)(bt,at),Object(b.g)(at,jt),Object(b.g)(at,Ot),Object(b.g)(Ot,rt),Object(b.g)(at,ot),nt=!0},p:b.N,i(e){nt||(Object(b.db)(xe.$$.fragment,e),nt=!0)},o(e){Object(b.eb)(xe.$$.fragment,e),nt=!1},d(e){e&&Object(b.z)(t),e&&Object(b.z)(c),e&&Object(b.z)(J),e&&Object(b.z)(P),e&&Object(b.z)(C),e&&Object(b.z)(N),e&&Object(b.z)(W),e&&Object(b.z)(G),e&&Object(b.z)(ue),e&&Object(b.z)(fe),e&&Object(b.z)(ye),e&&Object(b.z)(we),Object(b.x)(xe)}}}const r={},o='<pre><code class="language-ts">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;bryan&#x27;</span>;\n  <span class="hljs-keyword">const</span> [currentName, previousName] = withPrevious(name);</code></pre>\n',n='<pre><code class="language-ts">  $name = <span class="hljs-string">&#x27;adam&#x27;</span>;\n  <span class="hljs-built_in">console</span>.log($name); <span class="hljs-comment">// &#123; current: &#x27;adam&#x27;, previous: &#x27;bryan&#x27; &#125;</span></code></pre>\n',s='<pre><code class="language-ts">  name.setCurrent(<span class="hljs-string">&#x27;adam&#x27;</span>);\n  <span class="hljs-built_in">console</span>.log($name); <span class="hljs-comment">// &#123; current: &#x27;adam&#x27;, previous: &#x27;bryan&#x27; &#125;</span></code></pre>\n';function i(e){const{projectName:t,tech:c,logo:b,github:a}=j.a.projects["svelte-previous"];return[t,c,b,a]}class l extends b.b{constructor(e){super(),Object(b.I)(this,e,i,O,b.T,{})}}t.default=l}}]);