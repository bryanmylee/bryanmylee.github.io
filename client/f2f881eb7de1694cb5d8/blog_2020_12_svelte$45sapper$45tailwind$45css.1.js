(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{37:function(e,t,c){"use strict";c.r(t),c.d(t,"META",(function(){return a}));var s=c(0);function b(e){let t,c,b,a,m,f,v,z,S,q,w,C,E,J,A,y,P,x,Y,T,D,k,I,N,_,F,W,H,V,$,M,R,B,G,K,L,Q,U,X,Z,ee,te,ce,se,be,ae,je,oe,ne,Oe,le,re,pe,ie,de,ge,he,ue,me,fe,ve,ze,Se,qe,we,Ce,Ee,Je,Ae,ye,Pe,xe,Ye,Te,De,ke,Ie,Ne,_e,Fe,We,He,Ve,$e,Me,Re,Be,Ge,Ke,Le,Qe,Ue,Xe,Ze,et,tt,ct,st,bt,at,jt,ot,nt,Ot,lt,rt,pt,it,dt,gt,ht,ut,mt,ft,vt,zt,St,qt,wt,Ct,Et,Jt,At,yt,Pt,xt,Yt,Tt,Dt,kt,It,Nt,_t,Ft,Wt,Ht,Vt,$t,Mt,Rt,Bt,Gt,Kt,Lt,Qt,Ut,Xt,Zt,ec,tc,cc,sc,bc,ac,jc,oc,nc,Oc,lc,rc,pc,ic,dc,gc,hc,uc,mc,fc,vc,zc,Sc,qc,wc,Cc,Ec,Jc,Ac,yc,Pc,xc,Yc,Tc,Dc,kc,Ic,Nc,_c,Fc,Wc,Hc,Vc,$c,Mc,Rc,Bc,Gc,Kc,Lc,Qc,Uc,Xc,Zc,es,ts,cs,ss,bs,as,js,os,ns,Os,ls,rs,ps,is,ds,gs,hs;return{c(){t=Object(s.A)("h2"),c=Object(s.bb)("Why Tailwind CSS?"),b=Object(s.Y)(),a=Object(s.A)("h3"),m=Object(s.bb)("A constrained design system is a good thing"),f=Object(s.Y)(),v=Object(s.A)("p"),z=Object(s.bb)("Although Svelte offers scoped CSS by default, Tailwind CSS is still useful as it offers a nicely constrained design system. As the number of components grows, it becomes increasingly difficult to keep all whitespacing, font-sizes, and colours consistent. Tailwind CSS solves these issues by providing sensible defaults for many CSS variables, and minimises the usage of magic numbers."),S=Object(s.Y)(),q=Object(s.A)("h3"),w=Object(s.bb)("Styling custom components"),C=Object(s.Y)(),E=Object(s.A)("p"),J=Object(s.bb)("In addition, Svelte does not support passing CSS classes into child components. For example, we cannot do this..."),A=Object(s.Y)(),P=Object(s.Y)(),x=Object(s.A)("p"),Y=Object(s.bb)("... as the "),T=Object(s.A)("code"),D=Object(s.bb)(".margin-lg"),k=Object(s.bb)(" class is treated as an unused CSS class, and is purged in the compiled application."),I=Object(s.Y)(),N=Object(s.A)("p"),_=Object(s.bb)("This makes it extremely difficult to design flexible components that depend on layout and more."),F=Object(s.Y)(),W=Object(s.A)("p"),H=Object(s.bb)("Since Tailwind CSS classes are global by default and not purged by Svelte, we can use Tailwind to enable this functionality."),V=Object(s.Y)(),M=Object(s.Y)(),R=Object(s.A)("p"),B=Object(s.bb)("The "),G=Object(s.A)("code"),K=Object(s.bb)("div"),L=Object(s.bb)(" element in "),Q=Object(s.A)("code"),U=Object(s.bb)("ChildCard.svelte"),X=Object(s.bb)(" will be built with the "),Z=Object(s.A)("code"),ee=Object(s.bb)("m-4"),te=Object(s.bb)(" class, which will inherit styles from Tailwind CSS."),ce=Object(s.Y)(),se=Object(s.A)("h2"),be=Object(s.bb)("Integrating Tailwind CSS"),ae=Object(s.Y)(),je=Object(s.A)("p"),oe=Object(s.bb)("To add Tailwind CSS to Svelte and Sapper, we first have to integrate PostCSS into Sapper's build step, as Tailwind CSS is a PostCSS plugin."),ne=Object(s.Y)(),Oe=Object(s.A)("h3"),le=Object(s.bb)("Install dependencies"),re=Object(s.Y)(),pe=Object(s.A)("p"),ie=Object(s.bb)("First, we have to install a few extra dependencies."),de=Object(s.Y)(),he=Object(s.Y)(),ue=Object(s.A)("p"),me=Object(s.A)("code"),fe=Object(s.bb)("postcss-load-config"),ve=Object(s.bb)(" allows us to automatically load the "),ze=Object(s.A)("code"),Se=Object(s.bb)("postcss.config.js"),qe=Object(s.bb)(" file in our project root if it exists, thus saving us some extra configuration required to integrate PostCSS into our build step."),we=Object(s.Y)(),Ce=Object(s.A)("p"),Ee=Object(s.A)("code"),Je=Object(s.bb)("postcss-cli"),Ae=Object(s.bb)(" allows us to run PostCSS from the command line."),ye=Object(s.Y)(),Pe=Object(s.A)("p"),xe=Object(s.A)("code"),Ye=Object(s.bb)("postcss-import"),Te=Object(s.bb)(" and "),De=Object(s.A)("code"),ke=Object(s.bb)("postcss-nested"),Ie=Object(s.bb)(" are additional quality-of-life plugins."),Ne=Object(s.Y)(),_e=Object(s.A)("p"),Fe=Object(s.A)("code"),We=Object(s.bb)("cssnano"),He=Object(s.bb)(" minifies our CSS output."),Ve=Object(s.Y)(),$e=Object(s.A)("p"),Me=Object(s.A)("code"),Re=Object(s.bb)("npm-run-all"),Be=Object(s.bb)(" is a tool to run multiple npm scripts in parallel."),Ge=Object(s.Y)(),Ke=Object(s.A)("h3"),Le=Object(s.bb)("Initialise Tailwind CSS"),Qe=Object(s.Y)(),Ue=Object(s.A)("p"),Xe=Object(s.bb)("Create the Tailwind configuration file with..."),Ze=Object(s.Y)(),tt=Object(s.Y)(),ct=Object(s.A)("p"),st=Object(s.bb)("We then have to include Svelte into the PurgeCSS block to ensure that Svelte styles are not removed."),bt=Object(s.Y)(),jt=Object(s.Y)(),ot=Object(s.A)("p"),nt=Object(s.bb)("Instead of configuring "),Ot=Object(s.A)("code"),lt=Object(s.bb)("static/global.css"),rt=Object(s.bb)(" manually, we will set up PostCSS to transpile a source CSS file into a static CSS file to be used."),pt=Object(s.Y)(),it=Object(s.A)("p"),dt=Object(s.bb)("Create an asset "),gt=Object(s.A)("code"),ht=Object(s.bb)("/src/assets/global.css"),ut=Object(s.bb)(", and import Tailwind CSS styles."),mt=Object(s.Y)(),vt=Object(s.Y)(),zt=Object(s.A)("h3"),St=Object(s.bb)("Configure PostCSS with "),qt=Object(s.A)("code"),wt=Object(s.bb)("svelte-preprocess"),Ct=Object(s.Y)(),Et=Object(s.A)("p"),Jt=Object(s.bb)("In the root of our project, create "),At=Object(s.A)("code"),yt=Object(s.bb)("postcss.config.js"),Pt=Object(s.bb)(", and load our PostCSS plugins."),xt=Object(s.Y)(),Tt=Object(s.Y)(),Dt=Object(s.A)("p"),kt=Object(s.A)("code"),It=Object(s.bb)("postcss-import"),Nt=Object(s.bb)(" and "),_t=Object(s.A)("code"),Ft=Object(s.bb)("postcss-nested"),Wt=Object(s.bb)(" introduce some additional syntax that needs to be handled manually."),Ht=Object(s.Y)(),Vt=Object(s.A)("p"),$t=Object(s.bb)("To do so, we use "),Mt=Object(s.A)("code"),Rt=Object(s.bb)("svelte-preprocess"),Bt=Object(s.bb)(". The preprocessor allows us to apply modifications to the code before it is passed into the Svelte engine."),Gt=Object(s.Y)(),Kt=Object(s.A)("p"),Lt=Object(s.bb)("First, create our preprocessor options object under "),Qt=Object(s.A)("code"),Ut=Object(s.bb)("svelte.config.js"),Xt=Object(s.bb)("..."),Zt=Object(s.Y)(),tc=Object(s.Y)(),cc=Object(s.A)("p"),sc=Object(s.A)("code"),bc=Object(s.bb)("svelte.config.js"),ac=Object(s.bb)(" is used to configure our language server, such that the Svelte extension for VSCode and coc knows how to parse our source code and provide proper syntax highlighting and error messages."),jc=Object(s.Y)(),oc=Object(s.A)("p"),nc=Object(s.bb)("To enable the preprocessor for the language server, simply export  a "),Oc=Object(s.A)("code"),lc=Object(s.bb)("preprocess"),rc=Object(s.bb)(" object from "),pc=Object(s.A)("code"),ic=Object(s.bb)("svelte.config.js"),dc=Object(s.bb)("."),gc=Object(s.Y)(),uc=Object(s.Y)(),mc=Object(s.A)("p"),fc=Object(s.bb)("We also export the options object, since we want to use the same configuration for our build step under "),vc=Object(s.A)("code"),zc=Object(s.bb)("rollup.config.js"),Sc=Object(s.bb)(" or "),qc=Object(s.A)("code"),wc=Object(s.bb)("webpack.config.js"),Cc=Object(s.bb)("."),Ec=Object(s.Y)(),Jc=Object(s.A)("p"),Ac=Object(s.bb)("For Rollup, add "),yc=Object(s.A)("code"),Pc=Object(s.bb)("preprocess"),xc=Object(s.bb)(" to the "),Yc=Object(s.A)("code"),Tc=Object(s.bb)("svelte"),Dc=Object(s.bb)(" object for both the client and server..."),kc=Object(s.Y)(),Nc=Object(s.Y)(),_c=Object(s.A)("p"),Fc=Object(s.bb)("For Webpack, add "),Wc=Object(s.A)("code"),Hc=Object(s.bb)("preprocess"),Vc=Object(s.bb)(" to the "),$c=Object(s.A)("code"),Mc=Object(s.bb)("/\\\\.(svelte|html)$/"),Rc=Object(s.bb)(" rule for both the client and server..."),Bc=Object(s.Y)(),Kc=Object(s.Y)(),Lc=Object(s.A)("h3"),Qc=Object(s.bb)("Adjust npm scripts"),Uc=Object(s.Y)(),Xc=Object(s.A)("p"),Zc=Object(s.bb)("After setting up the configurations, we need to run two compilation steps for our project: one to compile the Svelte code into native Javascript, and one to compile PostCSS and apply our plugins, including Tailwind CSS."),es=Object(s.Y)(),ts=Object(s.A)("p"),cs=Object(s.bb)("To do so, we use "),ss=Object(s.A)("code"),bs=Object(s.bb)("npm-run-all"),as=Object(s.bb)(" to simultaneously watch for changes and incrementally compile the necessary files for both compilation steps."),js=Object(s.Y)(),os=Object(s.A)("p"),ns=Object(s.bb)("We also add the PostCSS compilation step to our build step. In "),Os=Object(s.A)("code"),ls=Object(s.bb)("package.json"),rs=Object(s.bb)("..."),ps=Object(s.Y)(),ds=Object(s.Y)(),gs=Object(s.A)("p"),hs=Object(s.bb)("Now you should be able to use Tailwind CSS in your Sapper project!"),this.h()},l(e){t=Object(s.o)(e,"H2",{});var j=Object(s.m)(t);c=Object(s.q)(j,"Why Tailwind CSS?"),j.forEach(s.z),b=Object(s.p)(e),a=Object(s.o)(e,"H3",{});var o=Object(s.m)(a);m=Object(s.q)(o,"A constrained design system is a good thing"),o.forEach(s.z),f=Object(s.p)(e),v=Object(s.o)(e,"P",{});var n=Object(s.m)(v);z=Object(s.q)(n,"Although Svelte offers scoped CSS by default, Tailwind CSS is still useful as it offers a nicely constrained design system. As the number of components grows, it becomes increasingly difficult to keep all whitespacing, font-sizes, and colours consistent. Tailwind CSS solves these issues by providing sensible defaults for many CSS variables, and minimises the usage of magic numbers."),n.forEach(s.z),S=Object(s.p)(e),q=Object(s.o)(e,"H3",{});var O=Object(s.m)(q);w=Object(s.q)(O,"Styling custom components"),O.forEach(s.z),C=Object(s.p)(e),E=Object(s.o)(e,"P",{});var l=Object(s.m)(E);J=Object(s.q)(l,"In addition, Svelte does not support passing CSS classes into child components. For example, we cannot do this..."),l.forEach(s.z),A=Object(s.p)(e),P=Object(s.p)(e),x=Object(s.o)(e,"P",{});var r=Object(s.m)(x);Y=Object(s.q)(r,"... as the "),T=Object(s.o)(r,"CODE",{});var p=Object(s.m)(T);D=Object(s.q)(p,".margin-lg"),p.forEach(s.z),k=Object(s.q)(r," class is treated as an unused CSS class, and is purged in the compiled application."),r.forEach(s.z),I=Object(s.p)(e),N=Object(s.o)(e,"P",{});var i=Object(s.m)(N);_=Object(s.q)(i,"This makes it extremely difficult to design flexible components that depend on layout and more."),i.forEach(s.z),F=Object(s.p)(e),W=Object(s.o)(e,"P",{});var d=Object(s.m)(W);H=Object(s.q)(d,"Since Tailwind CSS classes are global by default and not purged by Svelte, we can use Tailwind to enable this functionality."),d.forEach(s.z),V=Object(s.p)(e),M=Object(s.p)(e),R=Object(s.o)(e,"P",{});var g=Object(s.m)(R);B=Object(s.q)(g,"The "),G=Object(s.o)(g,"CODE",{});var h=Object(s.m)(G);K=Object(s.q)(h,"div"),h.forEach(s.z),L=Object(s.q)(g," element in "),Q=Object(s.o)(g,"CODE",{});var u=Object(s.m)(Q);U=Object(s.q)(u,"ChildCard.svelte"),u.forEach(s.z),X=Object(s.q)(g," will be built with the "),Z=Object(s.o)(g,"CODE",{});var y=Object(s.m)(Z);ee=Object(s.q)(y,"m-4"),y.forEach(s.z),te=Object(s.q)(g," class, which will inherit styles from Tailwind CSS."),g.forEach(s.z),ce=Object(s.p)(e),se=Object(s.o)(e,"H2",{});var $=Object(s.m)(se);be=Object(s.q)($,"Integrating Tailwind CSS"),$.forEach(s.z),ae=Object(s.p)(e),je=Object(s.o)(e,"P",{});var ge=Object(s.m)(je);oe=Object(s.q)(ge,"To add Tailwind CSS to Svelte and Sapper, we first have to integrate PostCSS into Sapper's build step, as Tailwind CSS is a PostCSS plugin."),ge.forEach(s.z),ne=Object(s.p)(e),Oe=Object(s.o)(e,"H3",{});var et=Object(s.m)(Oe);le=Object(s.q)(et,"Install dependencies"),et.forEach(s.z),re=Object(s.p)(e),pe=Object(s.o)(e,"P",{});var at=Object(s.m)(pe);ie=Object(s.q)(at,"First, we have to install a few extra dependencies."),at.forEach(s.z),de=Object(s.p)(e),he=Object(s.p)(e),ue=Object(s.o)(e,"P",{});var ft=Object(s.m)(ue);me=Object(s.o)(ft,"CODE",{});var Yt=Object(s.m)(me);fe=Object(s.q)(Yt,"postcss-load-config"),Yt.forEach(s.z),ve=Object(s.q)(ft," allows us to automatically load the "),ze=Object(s.o)(ft,"CODE",{});var ec=Object(s.m)(ze);Se=Object(s.q)(ec,"postcss.config.js"),ec.forEach(s.z),qe=Object(s.q)(ft," file in our project root if it exists, thus saving us some extra configuration required to integrate PostCSS into our build step."),ft.forEach(s.z),we=Object(s.p)(e),Ce=Object(s.o)(e,"P",{});var hc=Object(s.m)(Ce);Ee=Object(s.o)(hc,"CODE",{});var Ic=Object(s.m)(Ee);Je=Object(s.q)(Ic,"postcss-cli"),Ic.forEach(s.z),Ae=Object(s.q)(hc," allows us to run PostCSS from the command line."),hc.forEach(s.z),ye=Object(s.p)(e),Pe=Object(s.o)(e,"P",{});var Gc=Object(s.m)(Pe);xe=Object(s.o)(Gc,"CODE",{});var is=Object(s.m)(xe);Ye=Object(s.q)(is,"postcss-import"),is.forEach(s.z),Te=Object(s.q)(Gc," and "),De=Object(s.o)(Gc,"CODE",{});var us=Object(s.m)(De);ke=Object(s.q)(us,"postcss-nested"),us.forEach(s.z),Ie=Object(s.q)(Gc," are additional quality-of-life plugins."),Gc.forEach(s.z),Ne=Object(s.p)(e),_e=Object(s.o)(e,"P",{});var ms=Object(s.m)(_e);Fe=Object(s.o)(ms,"CODE",{});var fs=Object(s.m)(Fe);We=Object(s.q)(fs,"cssnano"),fs.forEach(s.z),He=Object(s.q)(ms," minifies our CSS output."),ms.forEach(s.z),Ve=Object(s.p)(e),$e=Object(s.o)(e,"P",{});var vs=Object(s.m)($e);Me=Object(s.o)(vs,"CODE",{});var zs=Object(s.m)(Me);Re=Object(s.q)(zs,"npm-run-all"),zs.forEach(s.z),Be=Object(s.q)(vs," is a tool to run multiple npm scripts in parallel."),vs.forEach(s.z),Ge=Object(s.p)(e),Ke=Object(s.o)(e,"H3",{});var Ss=Object(s.m)(Ke);Le=Object(s.q)(Ss,"Initialise Tailwind CSS"),Ss.forEach(s.z),Qe=Object(s.p)(e),Ue=Object(s.o)(e,"P",{});var qs=Object(s.m)(Ue);Xe=Object(s.q)(qs,"Create the Tailwind configuration file with..."),qs.forEach(s.z),Ze=Object(s.p)(e),tt=Object(s.p)(e),ct=Object(s.o)(e,"P",{});var ws=Object(s.m)(ct);st=Object(s.q)(ws,"We then have to include Svelte into the PurgeCSS block to ensure that Svelte styles are not removed."),ws.forEach(s.z),bt=Object(s.p)(e),jt=Object(s.p)(e),ot=Object(s.o)(e,"P",{});var Cs=Object(s.m)(ot);nt=Object(s.q)(Cs,"Instead of configuring "),Ot=Object(s.o)(Cs,"CODE",{});var Es=Object(s.m)(Ot);lt=Object(s.q)(Es,"static/global.css"),Es.forEach(s.z),rt=Object(s.q)(Cs," manually, we will set up PostCSS to transpile a source CSS file into a static CSS file to be used."),Cs.forEach(s.z),pt=Object(s.p)(e),it=Object(s.o)(e,"P",{});var Js=Object(s.m)(it);dt=Object(s.q)(Js,"Create an asset "),gt=Object(s.o)(Js,"CODE",{});var As=Object(s.m)(gt);ht=Object(s.q)(As,"/src/assets/global.css"),As.forEach(s.z),ut=Object(s.q)(Js,", and import Tailwind CSS styles."),Js.forEach(s.z),mt=Object(s.p)(e),vt=Object(s.p)(e),zt=Object(s.o)(e,"H3",{});var ys=Object(s.m)(zt);St=Object(s.q)(ys,"Configure PostCSS with "),qt=Object(s.o)(ys,"CODE",{});var Ps=Object(s.m)(qt);wt=Object(s.q)(Ps,"svelte-preprocess"),Ps.forEach(s.z),ys.forEach(s.z),Ct=Object(s.p)(e),Et=Object(s.o)(e,"P",{});var xs=Object(s.m)(Et);Jt=Object(s.q)(xs,"In the root of our project, create "),At=Object(s.o)(xs,"CODE",{});var Ys=Object(s.m)(At);yt=Object(s.q)(Ys,"postcss.config.js"),Ys.forEach(s.z),Pt=Object(s.q)(xs,", and load our PostCSS plugins."),xs.forEach(s.z),xt=Object(s.p)(e),Tt=Object(s.p)(e),Dt=Object(s.o)(e,"P",{});var Ts=Object(s.m)(Dt);kt=Object(s.o)(Ts,"CODE",{});var Ds=Object(s.m)(kt);It=Object(s.q)(Ds,"postcss-import"),Ds.forEach(s.z),Nt=Object(s.q)(Ts," and "),_t=Object(s.o)(Ts,"CODE",{});var ks=Object(s.m)(_t);Ft=Object(s.q)(ks,"postcss-nested"),ks.forEach(s.z),Wt=Object(s.q)(Ts," introduce some additional syntax that needs to be handled manually."),Ts.forEach(s.z),Ht=Object(s.p)(e),Vt=Object(s.o)(e,"P",{});var Is=Object(s.m)(Vt);$t=Object(s.q)(Is,"To do so, we use "),Mt=Object(s.o)(Is,"CODE",{});var Ns=Object(s.m)(Mt);Rt=Object(s.q)(Ns,"svelte-preprocess"),Ns.forEach(s.z),Bt=Object(s.q)(Is,". The preprocessor allows us to apply modifications to the code before it is passed into the Svelte engine."),Is.forEach(s.z),Gt=Object(s.p)(e),Kt=Object(s.o)(e,"P",{});var _s=Object(s.m)(Kt);Lt=Object(s.q)(_s,"First, create our preprocessor options object under "),Qt=Object(s.o)(_s,"CODE",{});var Fs=Object(s.m)(Qt);Ut=Object(s.q)(Fs,"svelte.config.js"),Fs.forEach(s.z),Xt=Object(s.q)(_s,"..."),_s.forEach(s.z),Zt=Object(s.p)(e),tc=Object(s.p)(e),cc=Object(s.o)(e,"P",{});var Ws=Object(s.m)(cc);sc=Object(s.o)(Ws,"CODE",{});var Hs=Object(s.m)(sc);bc=Object(s.q)(Hs,"svelte.config.js"),Hs.forEach(s.z),ac=Object(s.q)(Ws," is used to configure our language server, such that the Svelte extension for VSCode and coc knows how to parse our source code and provide proper syntax highlighting and error messages."),Ws.forEach(s.z),jc=Object(s.p)(e),oc=Object(s.o)(e,"P",{});var Vs=Object(s.m)(oc);nc=Object(s.q)(Vs,"To enable the preprocessor for the language server, simply export  a "),Oc=Object(s.o)(Vs,"CODE",{});var $s=Object(s.m)(Oc);lc=Object(s.q)($s,"preprocess"),$s.forEach(s.z),rc=Object(s.q)(Vs," object from "),pc=Object(s.o)(Vs,"CODE",{});var Ms=Object(s.m)(pc);ic=Object(s.q)(Ms,"svelte.config.js"),Ms.forEach(s.z),dc=Object(s.q)(Vs,"."),Vs.forEach(s.z),gc=Object(s.p)(e),uc=Object(s.p)(e),mc=Object(s.o)(e,"P",{});var Rs=Object(s.m)(mc);fc=Object(s.q)(Rs,"We also export the options object, since we want to use the same configuration for our build step under "),vc=Object(s.o)(Rs,"CODE",{});var Bs=Object(s.m)(vc);zc=Object(s.q)(Bs,"rollup.config.js"),Bs.forEach(s.z),Sc=Object(s.q)(Rs," or "),qc=Object(s.o)(Rs,"CODE",{});var Gs=Object(s.m)(qc);wc=Object(s.q)(Gs,"webpack.config.js"),Gs.forEach(s.z),Cc=Object(s.q)(Rs,"."),Rs.forEach(s.z),Ec=Object(s.p)(e),Jc=Object(s.o)(e,"P",{});var Ks=Object(s.m)(Jc);Ac=Object(s.q)(Ks,"For Rollup, add "),yc=Object(s.o)(Ks,"CODE",{});var Ls=Object(s.m)(yc);Pc=Object(s.q)(Ls,"preprocess"),Ls.forEach(s.z),xc=Object(s.q)(Ks," to the "),Yc=Object(s.o)(Ks,"CODE",{});var Qs=Object(s.m)(Yc);Tc=Object(s.q)(Qs,"svelte"),Qs.forEach(s.z),Dc=Object(s.q)(Ks," object for both the client and server..."),Ks.forEach(s.z),kc=Object(s.p)(e),Nc=Object(s.p)(e),_c=Object(s.o)(e,"P",{});var Us=Object(s.m)(_c);Fc=Object(s.q)(Us,"For Webpack, add "),Wc=Object(s.o)(Us,"CODE",{});var Xs=Object(s.m)(Wc);Hc=Object(s.q)(Xs,"preprocess"),Xs.forEach(s.z),Vc=Object(s.q)(Us," to the "),$c=Object(s.o)(Us,"CODE",{});var Zs=Object(s.m)($c);Mc=Object(s.q)(Zs,"/\\\\.(svelte|html)$/"),Zs.forEach(s.z),Rc=Object(s.q)(Us," rule for both the client and server..."),Us.forEach(s.z),Bc=Object(s.p)(e),Kc=Object(s.p)(e),Lc=Object(s.o)(e,"H3",{});var eb=Object(s.m)(Lc);Qc=Object(s.q)(eb,"Adjust npm scripts"),eb.forEach(s.z),Uc=Object(s.p)(e),Xc=Object(s.o)(e,"P",{});var tb=Object(s.m)(Xc);Zc=Object(s.q)(tb,"After setting up the configurations, we need to run two compilation steps for our project: one to compile the Svelte code into native Javascript, and one to compile PostCSS and apply our plugins, including Tailwind CSS."),tb.forEach(s.z),es=Object(s.p)(e),ts=Object(s.o)(e,"P",{});var cb=Object(s.m)(ts);cs=Object(s.q)(cb,"To do so, we use "),ss=Object(s.o)(cb,"CODE",{});var sb=Object(s.m)(ss);bs=Object(s.q)(sb,"npm-run-all"),sb.forEach(s.z),as=Object(s.q)(cb," to simultaneously watch for changes and incrementally compile the necessary files for both compilation steps."),cb.forEach(s.z),js=Object(s.p)(e),os=Object(s.o)(e,"P",{});var bb=Object(s.m)(os);ns=Object(s.q)(bb,"We also add the PostCSS compilation step to our build step. In "),Os=Object(s.o)(bb,"CODE",{});var ab=Object(s.m)(Os);ls=Object(s.q)(ab,"package.json"),ab.forEach(s.z),rs=Object(s.q)(bb,"..."),bb.forEach(s.z),ps=Object(s.p)(e),ds=Object(s.p)(e),gs=Object(s.o)(e,"P",{});var jb=Object(s.m)(gs);hs=Object(s.q)(jb,"Now you should be able to use Tailwind CSS in your Sapper project!"),jb.forEach(s.z),this.h()},h(){y=new s.a(P),$=new s.a(M),ge=new s.a(he),et=new s.a(tt),at=new s.a(jt),ft=new s.a(vt),Yt=new s.a(Tt),ec=new s.a(tc),hc=new s.a(uc),Ic=new s.a(Nc),Gc=new s.a(Kc),is=new s.a(ds)},m(e,us){Object(s.J)(e,t,us),Object(s.g)(t,c),Object(s.J)(e,b,us),Object(s.J)(e,a,us),Object(s.g)(a,m),Object(s.J)(e,f,us),Object(s.J)(e,v,us),Object(s.g)(v,z),Object(s.J)(e,S,us),Object(s.J)(e,q,us),Object(s.g)(q,w),Object(s.J)(e,C,us),Object(s.J)(e,E,us),Object(s.g)(E,J),Object(s.J)(e,A,us),y.m(j,e,us),Object(s.J)(e,P,us),Object(s.J)(e,x,us),Object(s.g)(x,Y),Object(s.g)(x,T),Object(s.g)(T,D),Object(s.g)(x,k),Object(s.J)(e,I,us),Object(s.J)(e,N,us),Object(s.g)(N,_),Object(s.J)(e,F,us),Object(s.J)(e,W,us),Object(s.g)(W,H),Object(s.J)(e,V,us),$.m(o,e,us),Object(s.J)(e,M,us),Object(s.J)(e,R,us),Object(s.g)(R,B),Object(s.g)(R,G),Object(s.g)(G,K),Object(s.g)(R,L),Object(s.g)(R,Q),Object(s.g)(Q,U),Object(s.g)(R,X),Object(s.g)(R,Z),Object(s.g)(Z,ee),Object(s.g)(R,te),Object(s.J)(e,ce,us),Object(s.J)(e,se,us),Object(s.g)(se,be),Object(s.J)(e,ae,us),Object(s.J)(e,je,us),Object(s.g)(je,oe),Object(s.J)(e,ne,us),Object(s.J)(e,Oe,us),Object(s.g)(Oe,le),Object(s.J)(e,re,us),Object(s.J)(e,pe,us),Object(s.g)(pe,ie),Object(s.J)(e,de,us),ge.m(n,e,us),Object(s.J)(e,he,us),Object(s.J)(e,ue,us),Object(s.g)(ue,me),Object(s.g)(me,fe),Object(s.g)(ue,ve),Object(s.g)(ue,ze),Object(s.g)(ze,Se),Object(s.g)(ue,qe),Object(s.J)(e,we,us),Object(s.J)(e,Ce,us),Object(s.g)(Ce,Ee),Object(s.g)(Ee,Je),Object(s.g)(Ce,Ae),Object(s.J)(e,ye,us),Object(s.J)(e,Pe,us),Object(s.g)(Pe,xe),Object(s.g)(xe,Ye),Object(s.g)(Pe,Te),Object(s.g)(Pe,De),Object(s.g)(De,ke),Object(s.g)(Pe,Ie),Object(s.J)(e,Ne,us),Object(s.J)(e,_e,us),Object(s.g)(_e,Fe),Object(s.g)(Fe,We),Object(s.g)(_e,He),Object(s.J)(e,Ve,us),Object(s.J)(e,$e,us),Object(s.g)($e,Me),Object(s.g)(Me,Re),Object(s.g)($e,Be),Object(s.J)(e,Ge,us),Object(s.J)(e,Ke,us),Object(s.g)(Ke,Le),Object(s.J)(e,Qe,us),Object(s.J)(e,Ue,us),Object(s.g)(Ue,Xe),Object(s.J)(e,Ze,us),et.m(O,e,us),Object(s.J)(e,tt,us),Object(s.J)(e,ct,us),Object(s.g)(ct,st),Object(s.J)(e,bt,us),at.m(l,e,us),Object(s.J)(e,jt,us),Object(s.J)(e,ot,us),Object(s.g)(ot,nt),Object(s.g)(ot,Ot),Object(s.g)(Ot,lt),Object(s.g)(ot,rt),Object(s.J)(e,pt,us),Object(s.J)(e,it,us),Object(s.g)(it,dt),Object(s.g)(it,gt),Object(s.g)(gt,ht),Object(s.g)(it,ut),Object(s.J)(e,mt,us),ft.m(r,e,us),Object(s.J)(e,vt,us),Object(s.J)(e,zt,us),Object(s.g)(zt,St),Object(s.g)(zt,qt),Object(s.g)(qt,wt),Object(s.J)(e,Ct,us),Object(s.J)(e,Et,us),Object(s.g)(Et,Jt),Object(s.g)(Et,At),Object(s.g)(At,yt),Object(s.g)(Et,Pt),Object(s.J)(e,xt,us),Yt.m(p,e,us),Object(s.J)(e,Tt,us),Object(s.J)(e,Dt,us),Object(s.g)(Dt,kt),Object(s.g)(kt,It),Object(s.g)(Dt,Nt),Object(s.g)(Dt,_t),Object(s.g)(_t,Ft),Object(s.g)(Dt,Wt),Object(s.J)(e,Ht,us),Object(s.J)(e,Vt,us),Object(s.g)(Vt,$t),Object(s.g)(Vt,Mt),Object(s.g)(Mt,Rt),Object(s.g)(Vt,Bt),Object(s.J)(e,Gt,us),Object(s.J)(e,Kt,us),Object(s.g)(Kt,Lt),Object(s.g)(Kt,Qt),Object(s.g)(Qt,Ut),Object(s.g)(Kt,Xt),Object(s.J)(e,Zt,us),ec.m(i,e,us),Object(s.J)(e,tc,us),Object(s.J)(e,cc,us),Object(s.g)(cc,sc),Object(s.g)(sc,bc),Object(s.g)(cc,ac),Object(s.J)(e,jc,us),Object(s.J)(e,oc,us),Object(s.g)(oc,nc),Object(s.g)(oc,Oc),Object(s.g)(Oc,lc),Object(s.g)(oc,rc),Object(s.g)(oc,pc),Object(s.g)(pc,ic),Object(s.g)(oc,dc),Object(s.J)(e,gc,us),hc.m(d,e,us),Object(s.J)(e,uc,us),Object(s.J)(e,mc,us),Object(s.g)(mc,fc),Object(s.g)(mc,vc),Object(s.g)(vc,zc),Object(s.g)(mc,Sc),Object(s.g)(mc,qc),Object(s.g)(qc,wc),Object(s.g)(mc,Cc),Object(s.J)(e,Ec,us),Object(s.J)(e,Jc,us),Object(s.g)(Jc,Ac),Object(s.g)(Jc,yc),Object(s.g)(yc,Pc),Object(s.g)(Jc,xc),Object(s.g)(Jc,Yc),Object(s.g)(Yc,Tc),Object(s.g)(Jc,Dc),Object(s.J)(e,kc,us),Ic.m(g,e,us),Object(s.J)(e,Nc,us),Object(s.J)(e,_c,us),Object(s.g)(_c,Fc),Object(s.g)(_c,Wc),Object(s.g)(Wc,Hc),Object(s.g)(_c,Vc),Object(s.g)(_c,$c),Object(s.g)($c,Mc),Object(s.g)(_c,Rc),Object(s.J)(e,Bc,us),Gc.m(h,e,us),Object(s.J)(e,Kc,us),Object(s.J)(e,Lc,us),Object(s.g)(Lc,Qc),Object(s.J)(e,Uc,us),Object(s.J)(e,Xc,us),Object(s.g)(Xc,Zc),Object(s.J)(e,es,us),Object(s.J)(e,ts,us),Object(s.g)(ts,cs),Object(s.g)(ts,ss),Object(s.g)(ss,bs),Object(s.g)(ts,as),Object(s.J)(e,js,us),Object(s.J)(e,os,us),Object(s.g)(os,ns),Object(s.g)(os,Os),Object(s.g)(Os,ls),Object(s.g)(os,rs),Object(s.J)(e,ps,us),is.m(u,e,us),Object(s.J)(e,ds,us),Object(s.J)(e,gs,us),Object(s.g)(gs,hs)},p:s.N,i:s.N,o:s.N,d(e){e&&Object(s.z)(t),e&&Object(s.z)(b),e&&Object(s.z)(a),e&&Object(s.z)(f),e&&Object(s.z)(v),e&&Object(s.z)(S),e&&Object(s.z)(q),e&&Object(s.z)(C),e&&Object(s.z)(E),e&&Object(s.z)(A),e&&y.d(),e&&Object(s.z)(P),e&&Object(s.z)(x),e&&Object(s.z)(I),e&&Object(s.z)(N),e&&Object(s.z)(F),e&&Object(s.z)(W),e&&Object(s.z)(V),e&&$.d(),e&&Object(s.z)(M),e&&Object(s.z)(R),e&&Object(s.z)(ce),e&&Object(s.z)(se),e&&Object(s.z)(ae),e&&Object(s.z)(je),e&&Object(s.z)(ne),e&&Object(s.z)(Oe),e&&Object(s.z)(re),e&&Object(s.z)(pe),e&&Object(s.z)(de),e&&ge.d(),e&&Object(s.z)(he),e&&Object(s.z)(ue),e&&Object(s.z)(we),e&&Object(s.z)(Ce),e&&Object(s.z)(ye),e&&Object(s.z)(Pe),e&&Object(s.z)(Ne),e&&Object(s.z)(_e),e&&Object(s.z)(Ve),e&&Object(s.z)($e),e&&Object(s.z)(Ge),e&&Object(s.z)(Ke),e&&Object(s.z)(Qe),e&&Object(s.z)(Ue),e&&Object(s.z)(Ze),e&&et.d(),e&&Object(s.z)(tt),e&&Object(s.z)(ct),e&&Object(s.z)(bt),e&&at.d(),e&&Object(s.z)(jt),e&&Object(s.z)(ot),e&&Object(s.z)(pt),e&&Object(s.z)(it),e&&Object(s.z)(mt),e&&ft.d(),e&&Object(s.z)(vt),e&&Object(s.z)(zt),e&&Object(s.z)(Ct),e&&Object(s.z)(Et),e&&Object(s.z)(xt),e&&Yt.d(),e&&Object(s.z)(Tt),e&&Object(s.z)(Dt),e&&Object(s.z)(Ht),e&&Object(s.z)(Vt),e&&Object(s.z)(Gt),e&&Object(s.z)(Kt),e&&Object(s.z)(Zt),e&&ec.d(),e&&Object(s.z)(tc),e&&Object(s.z)(cc),e&&Object(s.z)(jc),e&&Object(s.z)(oc),e&&Object(s.z)(gc),e&&hc.d(),e&&Object(s.z)(uc),e&&Object(s.z)(mc),e&&Object(s.z)(Ec),e&&Object(s.z)(Jc),e&&Object(s.z)(kc),e&&Ic.d(),e&&Object(s.z)(Nc),e&&Object(s.z)(_c),e&&Object(s.z)(Bc),e&&Gc.d(),e&&Object(s.z)(Kc),e&&Object(s.z)(Lc),e&&Object(s.z)(Uc),e&&Object(s.z)(Xc),e&&Object(s.z)(es),e&&Object(s.z)(ts),e&&Object(s.z)(js),e&&Object(s.z)(os),e&&Object(s.z)(ps),e&&is.d(),e&&Object(s.z)(ds),e&&Object(s.z)(gs)}}}const a={},j='<pre><code class="language-html"><span class="hljs-comment">&lt;!-- Parent.svelte --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span>\n  .margin-lg &#123;    // unused class warning\n    margin: 1rem;\n  &#125;\n<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">ChildCard</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;margin-lg&quot;</span>/&gt;</span></code></pre>\n',o='<pre><code class="language-html"><span class="hljs-comment">&lt;!-- Parent.svelte --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">ChildCard</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;m-4&quot;</span>/&gt;</span>\n\n\n<span class="hljs-comment">&lt;!-- ChildCard.svelte --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> &#123; className <span class="hljs-keyword">as</span> <span class="hljs-class"><span class="hljs-keyword">class</span> &#125;</span>; <span class="hljs-comment">// exports a prop &#x27;class&#x27;</span>\n  <span class="hljs-keyword">let</span> className: string = <span class="hljs-string">&quot;&quot;</span>;\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#123;className&#125;/</span>&gt;</span></code></pre>\n',n='<pre><code class="language-bash">npm install -D autoprefixer postcss-load-config postcss-cli postcss-import postcss-nested cssnano tailwindcss npm-run-all</code></pre>\n',O='<pre><code class="language-bash">npx tailwind init</code></pre>\n',l='<pre><code class="language-javascript"><span class="hljs-built_in">module</span>.exports = &#123;\n  <span class="hljs-attr">purge</span>: [<span class="hljs-string">&quot;./src/**/*.svelte&quot;</span>],\n  <span class="hljs-attr">theme</span>: &#123;\n    <span class="hljs-attr">extend</span>: &#123;&#125;,\n  &#125;,\n  <span class="hljs-attr">variants</span>: &#123;&#125;,\n  <span class="hljs-attr">plugins</span>: [],\n&#125;;</code></pre>\n',r='<pre><code class="language-css"><span class="hljs-keyword">@tailwind</span> base;\n<span class="hljs-keyword">@tailwind</span> components;\n<span class="hljs-keyword">@tailwind</span> utilities;</code></pre>\n',p='<pre><code class="language-javascript"><span class="hljs-built_in">module</span>.exports = &#123;\n  <span class="hljs-attr">plugins</span>: [\n    <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;postcss-import&#x27;</span>),\n    <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;postcss-nested&#x27;</span>),\n    <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;tailwindcss&#x27;</span>),\n    <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cssnano&#x27;</span>)(&#123;\n      <span class="hljs-attr">preset</span>: <span class="hljs-string">&#x27;default&#x27;</span>,\n    &#125;),\n  ],\n&#125;;</code></pre>\n',i='<pre><code class="language-javascript"><span class="hljs-keyword">const</span> sveltePreprocess = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;svelte-preprocess&#x27;</span>);\n\n<span class="hljs-keyword">const</span> preprocessOptions = &#123;\n  <span class="hljs-attr">postcss</span>: &#123;\n    <span class="hljs-attr">plugins</span>: [\n      <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;postcss-import&#x27;</span>)(),\n      <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;postcss-nested&#x27;</span>)(),\n    ],\n  &#125;,\n&#125;;</code></pre>\n',d='<pre><code class="language-javascript"><span class="hljs-built_in">module</span>.exports = &#123;\n  <span class="hljs-attr">preprocess</span>: sveltePreprocess(preprocessOptions),\n  preprocessOptions,\n&#125;;</code></pre>\n',g='<pre><code class="language-javascript"><span class="hljs-keyword">const</span> preprocess = sveltePreprocess(&#123;\n  <span class="hljs-attr">sourceMap</span>: dev,       <span class="hljs-comment">// additional preprocess option</span>\n  ...preprocessOptions,\n&#125;);\n\nclient: &#123;\n  ...\n  <span class="hljs-attr">plugins</span>: [\n    ...\n    svelte(&#123;\n      preprocess,\n      dev,\n      ...\n&#125;,\n\n<span class="hljs-attr">server</span>: &#123;\n  ...\n  <span class="hljs-attr">plugins</span>: [\n    ...\n    svelte(&#123;\n      preprocess,\n      <span class="hljs-attr">generate</span>: <span class="hljs-string">&#x27;ssr&#x27;</span>,\n      ...\n&#125;</code></pre>\n',h='<pre><code class="language-javascript">client: &#123;\n  ...\n    <span class="hljs-attr">module</span>: &#123;\n      <span class="hljs-attr">rules</span>: [\n        &#123;\n          <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\\.(svelte|html)$/</span>,\n          use: &#123;\n            <span class="hljs-attr">options</span>: &#123;\n              preprocess,\n              ...\n&#125;,\n\n<span class="hljs-attr">server</span>: &#123;\n  ...\n    <span class="hljs-attr">module</span>: &#123;\n      <span class="hljs-attr">rules</span>: [\n        &#123;\n          <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\\.(svelte|html)$/</span>,\n          use: &#123;\n            <span class="hljs-attr">options</span>: &#123;\n              preprocess,\n              ...\n&#125;,</code></pre>\n',u='<pre><code class="language-json">&quot;scripts&quot;: &#123;\n  &quot;dev&quot;: &quot;run-p watch:css watch:sapper&quot;,\n  &quot;watch:css&quot;: &quot;postcss src/assets/global.css -o static/global.css -w&quot;,\n  &quot;watch:sapper&quot;: &quot;sapper dev&quot;,\n  &quot;build&quot;: &quot;run-s build:css build:sapper&quot;,\n  &quot;build:css&quot;: &quot;NODE_ENV=production postcss src/assets/global.css -o static/global.css&quot;,\n  &quot;build:sapper&quot;: &quot;NODE_ENV=production sapper build&quot;,\n&#125;,</code></pre>\n';class m extends s.b{constructor(e){super(),Object(s.I)(this,e,null,b,s.T,{})}}t.default=m}}]);