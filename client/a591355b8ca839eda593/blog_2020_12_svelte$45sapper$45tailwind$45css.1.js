(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{23:function(e,t,s){"use strict";s.r(t),s.d(t,"metadata",(function(){return c}));var n=s(0);function a(e){let t,s,a,c,o,p,j,b,l,O,r,i,u,v,d,k,g,h,f,m,S,w,E,F,C,V,y,P,T,x,D,H,q,I,R,M,L,A,W,N,J,$,z,_,B,G,K,Q,U,X,Y,Z,ee,te,se,ne,ae,ce,oe,pe,je,be,le,Oe,re,ie,ue,ve,de,ke,ge,he,fe,me,Se,we,Ee,Fe,Ce,Ve,ye,Pe,Te,xe,De,He,qe,Ie,Re,Me,Le,Ae,We,Ne,Je,$e,ze,_e,Be,Ge,Ke,Qe,Ue,Xe,Ye,Ze,et,tt,st,nt,at,ct,ot,pt,jt,bt,lt,Ot,rt,it,ut,vt,dt,kt,gt,ht,ft,mt,St,wt,Et,Ft,Ct,Vt,yt,Pt,Tt,xt,Dt,Ht,qt,It,Rt,Mt,Lt,At,Wt,Nt,Jt,$t,zt,_t,Bt,Gt,Kt,Qt,Ut,Xt,Yt,Zt,es,ts,ss,ns,as,cs,os,ps,js,bs,ls,Os,rs,is,us,vs,ds,ks,gs,hs,fs,ms,Ss,ws,Es,Fs,Cs,Vs,ys,Ps,Ts,xs,Ds,Hs,qs,Is,Rs,Ms,Ls,As,Ws,Ns,Js,$s,zs,_s,Bs,Gs,Ks,Qs,Us,Xs,Ys,Zs,en,tn,sn,nn,an;return{c(){t=Object(n.w)("h2"),s=Object(n.V)("Why Tailwind CSS?"),a=Object(n.S)(),c=Object(n.w)("h3"),o=Object(n.V)("A constrained design system is a good thing"),p=Object(n.S)(),j=Object(n.w)("p"),b=Object(n.V)("Although Svelte offers scoped CSS by default, Tailwind CSS is still useful as it offers a nicely constrained design system. As the number of components grows, it becomes increasingly difficult to keep all whitespacing, font-sizes, and colours consistent. Tailwind CSS solves these issues by providing sensible defaults for many CSS variables, and minimises the usage of magic numbers."),l=Object(n.S)(),O=Object(n.w)("h3"),r=Object(n.V)("Styling custom components"),i=Object(n.S)(),u=Object(n.w)("p"),v=Object(n.V)("In addition, Svelte does not support passing CSS classes into child components. For example, we cannot do this…"),d=Object(n.S)(),k=Object(n.w)("pre"),g=Object(n.S)(),h=Object(n.w)("p"),f=Object(n.V)("… as the "),m=Object(n.w)("code"),S=Object(n.V)(".margin-lg"),w=Object(n.V)(" class is treated as an unused CSS class, and is purged in the compiled application."),E=Object(n.S)(),F=Object(n.w)("p"),C=Object(n.V)("This makes it extremely difficult to design flexible components that depend on layout and more."),V=Object(n.S)(),y=Object(n.w)("p"),P=Object(n.V)("Since Tailwind CSS classes are global by default and not purged by Svelte, we can use Tailwind to enable this functionality."),T=Object(n.S)(),x=Object(n.w)("pre"),D=Object(n.S)(),H=Object(n.w)("p"),q=Object(n.V)("The "),I=Object(n.w)("code"),R=Object(n.V)("div"),M=Object(n.V)(" element in "),L=Object(n.w)("code"),A=Object(n.V)("ChildCard.svelte"),W=Object(n.V)(" will be built with the "),N=Object(n.w)("code"),J=Object(n.V)("m-4"),$=Object(n.V)(" class, which will inherit styles from Tailwind CSS."),z=Object(n.S)(),_=Object(n.w)("h2"),B=Object(n.V)("Integrating Tailwind CSS"),G=Object(n.S)(),K=Object(n.w)("p"),Q=Object(n.V)("To add Tailwind CSS to Svelte and Sapper, we first have to integrate PostCSS into Sapper’s build step, as Tailwind CSS is a PostCSS plugin."),U=Object(n.S)(),X=Object(n.w)("h3"),Y=Object(n.V)("Install dependencies"),Z=Object(n.S)(),ee=Object(n.w)("p"),te=Object(n.V)("First, we have to install a few extra dependencies."),se=Object(n.S)(),ne=Object(n.w)("pre"),ae=Object(n.S)(),ce=Object(n.w)("p"),oe=Object(n.w)("code"),pe=Object(n.V)("postcss-load-config"),je=Object(n.V)(" allows us to automatically load the "),be=Object(n.w)("code"),le=Object(n.V)("postcss.config.js"),Oe=Object(n.V)(" file in our project root if it exists, thus saving us some extra configuration required to integrate PostCSS into our build step."),re=Object(n.S)(),ie=Object(n.w)("p"),ue=Object(n.w)("code"),ve=Object(n.V)("postcss-cli"),de=Object(n.V)(" allows us to run PostCSS from the command line."),ke=Object(n.S)(),ge=Object(n.w)("p"),he=Object(n.w)("code"),fe=Object(n.V)("postcss-import"),me=Object(n.V)(" and "),Se=Object(n.w)("code"),we=Object(n.V)("postcss-nested"),Ee=Object(n.V)(" are additional quality-of-life plugins."),Fe=Object(n.S)(),Ce=Object(n.w)("p"),Ve=Object(n.w)("code"),ye=Object(n.V)("cssnano"),Pe=Object(n.V)(" minifies our CSS output."),Te=Object(n.S)(),xe=Object(n.w)("p"),De=Object(n.w)("code"),He=Object(n.V)("npm-run-all"),qe=Object(n.V)(" is a tool to run multiple npm scripts in parallel."),Ie=Object(n.S)(),Re=Object(n.w)("h3"),Me=Object(n.V)("Initialise Tailwind CSS"),Le=Object(n.S)(),Ae=Object(n.w)("p"),We=Object(n.V)("Create the Tailwind configuration file with…"),Ne=Object(n.S)(),Je=Object(n.w)("pre"),$e=Object(n.S)(),ze=Object(n.w)("p"),_e=Object(n.V)("We then have to include Svelte into the PurgeCSS block to ensure that Svelte styles are not removed."),Be=Object(n.S)(),Ge=Object(n.w)("pre"),Ke=Object(n.S)(),Qe=Object(n.w)("p"),Ue=Object(n.V)("Instead of configuring "),Xe=Object(n.w)("code"),Ye=Object(n.V)("static/global.css"),Ze=Object(n.V)(" manually, we will set up PostCSS to transpile a source CSS file into a static CSS file to be used."),et=Object(n.S)(),tt=Object(n.w)("p"),st=Object(n.V)("Create an asset "),nt=Object(n.w)("code"),at=Object(n.V)("/src/assets/global.css"),ct=Object(n.V)(", and import Tailwind CSS styles."),ot=Object(n.S)(),pt=Object(n.w)("pre"),jt=Object(n.S)(),bt=Object(n.w)("h3"),lt=Object(n.V)("Configure PostCSS with "),Ot=Object(n.w)("code"),rt=Object(n.V)("svelte-preprocess"),it=Object(n.S)(),ut=Object(n.w)("p"),vt=Object(n.V)("In the root of our project, create "),dt=Object(n.w)("code"),kt=Object(n.V)("postcss.config.js"),gt=Object(n.V)(", and load our PostCSS plugins."),ht=Object(n.S)(),ft=Object(n.w)("pre"),mt=Object(n.S)(),St=Object(n.w)("p"),wt=Object(n.w)("code"),Et=Object(n.V)("postcss-import"),Ft=Object(n.V)(" and "),Ct=Object(n.w)("code"),Vt=Object(n.V)("postcss-nested"),yt=Object(n.V)(" introduce some additional syntax that needs to be handled manually."),Pt=Object(n.S)(),Tt=Object(n.w)("p"),xt=Object(n.V)("To do so, we use "),Dt=Object(n.w)("code"),Ht=Object(n.V)("svelte-preprocess"),qt=Object(n.V)(". The preprocessor allows us to apply modifications to the code before it is passed into the Svelte engine."),It=Object(n.S)(),Rt=Object(n.w)("p"),Mt=Object(n.V)("First, create our preprocessor options object under "),Lt=Object(n.w)("code"),At=Object(n.V)("svelte.config.js"),Wt=Object(n.V)("…"),Nt=Object(n.S)(),Jt=Object(n.w)("pre"),$t=Object(n.S)(),zt=Object(n.w)("p"),_t=Object(n.w)("code"),Bt=Object(n.V)("svelte.config.js"),Gt=Object(n.V)(" is used to configure our language server, such that the Svelte extension for VSCode and coc knows how to parse our source code and provide proper syntax highlighting and error messages."),Kt=Object(n.S)(),Qt=Object(n.w)("p"),Ut=Object(n.V)("To enable the preprocessor for the language server, simply export  a "),Xt=Object(n.w)("code"),Yt=Object(n.V)("preprocess"),Zt=Object(n.V)(" object from "),es=Object(n.w)("code"),ts=Object(n.V)("svelte.config.js"),ss=Object(n.V)("."),ns=Object(n.S)(),as=Object(n.w)("pre"),cs=Object(n.S)(),os=Object(n.w)("p"),ps=Object(n.V)("We also export the options object, since we want to use the same configuration for our build step under "),js=Object(n.w)("code"),bs=Object(n.V)("rollup.config.js"),ls=Object(n.V)(" or "),Os=Object(n.w)("code"),rs=Object(n.V)("webpack.config.js"),is=Object(n.V)("."),us=Object(n.S)(),vs=Object(n.w)("p"),ds=Object(n.V)("For Rollup, add "),ks=Object(n.w)("code"),gs=Object(n.V)("preprocess"),hs=Object(n.V)(" to the "),fs=Object(n.w)("code"),ms=Object(n.V)("svelte"),Ss=Object(n.V)(" object for both the client and server…"),ws=Object(n.S)(),Es=Object(n.w)("pre"),Fs=Object(n.S)(),Cs=Object(n.w)("p"),Vs=Object(n.V)("For Webpack, add "),ys=Object(n.w)("code"),Ps=Object(n.V)("preprocess"),Ts=Object(n.V)(" to the "),xs=Object(n.w)("code"),Ds=Object(n.V)("/\\\\.(svelte|html)$/"),Hs=Object(n.V)(" rule for both the client and server…"),qs=Object(n.S)(),Is=Object(n.w)("pre"),Rs=Object(n.S)(),Ms=Object(n.w)("h3"),Ls=Object(n.V)("Adjust npm scripts"),As=Object(n.S)(),Ws=Object(n.w)("p"),Ns=Object(n.V)("After setting up the configurations, we need to run two compilation steps for our project: one to compile the Svelte code into native Javascript, and one to compile PostCSS and apply our plugins, including Tailwind CSS."),Js=Object(n.S)(),$s=Object(n.w)("p"),zs=Object(n.V)("To do so, we use "),_s=Object(n.w)("code"),Bs=Object(n.V)("npm-run-all"),Gs=Object(n.V)(" to simultaneously watch for changes and incrementally compile the necessary files for both compilation steps."),Ks=Object(n.S)(),Qs=Object(n.w)("p"),Us=Object(n.V)("We also add the PostCSS compilation step to our build step. In "),Xs=Object(n.w)("code"),Ys=Object(n.V)("package.json"),Zs=Object(n.V)("…"),en=Object(n.S)(),tn=Object(n.w)("pre"),sn=Object(n.S)(),nn=Object(n.w)("p"),an=Object(n.V)("Now you should be able to use Tailwind CSS in your Sapper project!"),this.h()},l(e){t=Object(n.l)(e,"H2",{});var cn=Object(n.j)(t);s=Object(n.n)(cn,"Why Tailwind CSS?"),cn.forEach(n.v),a=Object(n.m)(e),c=Object(n.l)(e,"H3",{});var on=Object(n.j)(c);o=Object(n.n)(on,"A constrained design system is a good thing"),on.forEach(n.v),p=Object(n.m)(e),j=Object(n.l)(e,"P",{});var pn=Object(n.j)(j);b=Object(n.n)(pn,"Although Svelte offers scoped CSS by default, Tailwind CSS is still useful as it offers a nicely constrained design system. As the number of components grows, it becomes increasingly difficult to keep all whitespacing, font-sizes, and colours consistent. Tailwind CSS solves these issues by providing sensible defaults for many CSS variables, and minimises the usage of magic numbers."),pn.forEach(n.v),l=Object(n.m)(e),O=Object(n.l)(e,"H3",{});var jn=Object(n.j)(O);r=Object(n.n)(jn,"Styling custom components"),jn.forEach(n.v),i=Object(n.m)(e),u=Object(n.l)(e,"P",{});var bn=Object(n.j)(u);v=Object(n.n)(bn,"In addition, Svelte does not support passing CSS classes into child components. For example, we cannot do this…"),bn.forEach(n.v),d=Object(n.m)(e),k=Object(n.l)(e,"PRE",{class:!0}),Object(n.j)(k).forEach(n.v),g=Object(n.m)(e),h=Object(n.l)(e,"P",{});var ln=Object(n.j)(h);f=Object(n.n)(ln,"… as the "),m=Object(n.l)(ln,"CODE",{});var On=Object(n.j)(m);S=Object(n.n)(On,".margin-lg"),On.forEach(n.v),w=Object(n.n)(ln," class is treated as an unused CSS class, and is purged in the compiled application."),ln.forEach(n.v),E=Object(n.m)(e),F=Object(n.l)(e,"P",{});var rn=Object(n.j)(F);C=Object(n.n)(rn,"This makes it extremely difficult to design flexible components that depend on layout and more."),rn.forEach(n.v),V=Object(n.m)(e),y=Object(n.l)(e,"P",{});var un=Object(n.j)(y);P=Object(n.n)(un,"Since Tailwind CSS classes are global by default and not purged by Svelte, we can use Tailwind to enable this functionality."),un.forEach(n.v),T=Object(n.m)(e),x=Object(n.l)(e,"PRE",{class:!0}),Object(n.j)(x).forEach(n.v),D=Object(n.m)(e),H=Object(n.l)(e,"P",{});var vn=Object(n.j)(H);q=Object(n.n)(vn,"The "),I=Object(n.l)(vn,"CODE",{});var dn=Object(n.j)(I);R=Object(n.n)(dn,"div"),dn.forEach(n.v),M=Object(n.n)(vn," element in "),L=Object(n.l)(vn,"CODE",{});var kn=Object(n.j)(L);A=Object(n.n)(kn,"ChildCard.svelte"),kn.forEach(n.v),W=Object(n.n)(vn," will be built with the "),N=Object(n.l)(vn,"CODE",{});var gn=Object(n.j)(N);J=Object(n.n)(gn,"m-4"),gn.forEach(n.v),$=Object(n.n)(vn," class, which will inherit styles from Tailwind CSS."),vn.forEach(n.v),z=Object(n.m)(e),_=Object(n.l)(e,"H2",{});var hn=Object(n.j)(_);B=Object(n.n)(hn,"Integrating Tailwind CSS"),hn.forEach(n.v),G=Object(n.m)(e),K=Object(n.l)(e,"P",{});var fn=Object(n.j)(K);Q=Object(n.n)(fn,"To add Tailwind CSS to Svelte and Sapper, we first have to integrate PostCSS into Sapper’s build step, as Tailwind CSS is a PostCSS plugin."),fn.forEach(n.v),U=Object(n.m)(e),X=Object(n.l)(e,"H3",{});var mn=Object(n.j)(X);Y=Object(n.n)(mn,"Install dependencies"),mn.forEach(n.v),Z=Object(n.m)(e),ee=Object(n.l)(e,"P",{});var Sn=Object(n.j)(ee);te=Object(n.n)(Sn,"First, we have to install a few extra dependencies."),Sn.forEach(n.v),se=Object(n.m)(e),ne=Object(n.l)(e,"PRE",{class:!0}),Object(n.j)(ne).forEach(n.v),ae=Object(n.m)(e),ce=Object(n.l)(e,"P",{});var wn=Object(n.j)(ce);oe=Object(n.l)(wn,"CODE",{});var En=Object(n.j)(oe);pe=Object(n.n)(En,"postcss-load-config"),En.forEach(n.v),je=Object(n.n)(wn," allows us to automatically load the "),be=Object(n.l)(wn,"CODE",{});var Fn=Object(n.j)(be);le=Object(n.n)(Fn,"postcss.config.js"),Fn.forEach(n.v),Oe=Object(n.n)(wn," file in our project root if it exists, thus saving us some extra configuration required to integrate PostCSS into our build step."),wn.forEach(n.v),re=Object(n.m)(e),ie=Object(n.l)(e,"P",{});var Cn=Object(n.j)(ie);ue=Object(n.l)(Cn,"CODE",{});var Vn=Object(n.j)(ue);ve=Object(n.n)(Vn,"postcss-cli"),Vn.forEach(n.v),de=Object(n.n)(Cn," allows us to run PostCSS from the command line."),Cn.forEach(n.v),ke=Object(n.m)(e),ge=Object(n.l)(e,"P",{});var yn=Object(n.j)(ge);he=Object(n.l)(yn,"CODE",{});var Pn=Object(n.j)(he);fe=Object(n.n)(Pn,"postcss-import"),Pn.forEach(n.v),me=Object(n.n)(yn," and "),Se=Object(n.l)(yn,"CODE",{});var Tn=Object(n.j)(Se);we=Object(n.n)(Tn,"postcss-nested"),Tn.forEach(n.v),Ee=Object(n.n)(yn," are additional quality-of-life plugins."),yn.forEach(n.v),Fe=Object(n.m)(e),Ce=Object(n.l)(e,"P",{});var xn=Object(n.j)(Ce);Ve=Object(n.l)(xn,"CODE",{});var Dn=Object(n.j)(Ve);ye=Object(n.n)(Dn,"cssnano"),Dn.forEach(n.v),Pe=Object(n.n)(xn," minifies our CSS output."),xn.forEach(n.v),Te=Object(n.m)(e),xe=Object(n.l)(e,"P",{});var Hn=Object(n.j)(xe);De=Object(n.l)(Hn,"CODE",{});var qn=Object(n.j)(De);He=Object(n.n)(qn,"npm-run-all"),qn.forEach(n.v),qe=Object(n.n)(Hn," is a tool to run multiple npm scripts in parallel."),Hn.forEach(n.v),Ie=Object(n.m)(e),Re=Object(n.l)(e,"H3",{});var In=Object(n.j)(Re);Me=Object(n.n)(In,"Initialise Tailwind CSS"),In.forEach(n.v),Le=Object(n.m)(e),Ae=Object(n.l)(e,"P",{});var Rn=Object(n.j)(Ae);We=Object(n.n)(Rn,"Create the Tailwind configuration file with…"),Rn.forEach(n.v),Ne=Object(n.m)(e),Je=Object(n.l)(e,"PRE",{class:!0}),Object(n.j)(Je).forEach(n.v),$e=Object(n.m)(e),ze=Object(n.l)(e,"P",{});var Mn=Object(n.j)(ze);_e=Object(n.n)(Mn,"We then have to include Svelte into the PurgeCSS block to ensure that Svelte styles are not removed."),Mn.forEach(n.v),Be=Object(n.m)(e),Ge=Object(n.l)(e,"PRE",{class:!0}),Object(n.j)(Ge).forEach(n.v),Ke=Object(n.m)(e),Qe=Object(n.l)(e,"P",{});var Ln=Object(n.j)(Qe);Ue=Object(n.n)(Ln,"Instead of configuring "),Xe=Object(n.l)(Ln,"CODE",{});var An=Object(n.j)(Xe);Ye=Object(n.n)(An,"static/global.css"),An.forEach(n.v),Ze=Object(n.n)(Ln," manually, we will set up PostCSS to transpile a source CSS file into a static CSS file to be used."),Ln.forEach(n.v),et=Object(n.m)(e),tt=Object(n.l)(e,"P",{});var Wn=Object(n.j)(tt);st=Object(n.n)(Wn,"Create an asset "),nt=Object(n.l)(Wn,"CODE",{});var Nn=Object(n.j)(nt);at=Object(n.n)(Nn,"/src/assets/global.css"),Nn.forEach(n.v),ct=Object(n.n)(Wn,", and import Tailwind CSS styles."),Wn.forEach(n.v),ot=Object(n.m)(e),pt=Object(n.l)(e,"PRE",{class:!0}),Object(n.j)(pt).forEach(n.v),jt=Object(n.m)(e),bt=Object(n.l)(e,"H3",{});var Jn=Object(n.j)(bt);lt=Object(n.n)(Jn,"Configure PostCSS with "),Ot=Object(n.l)(Jn,"CODE",{});var $n=Object(n.j)(Ot);rt=Object(n.n)($n,"svelte-preprocess"),$n.forEach(n.v),Jn.forEach(n.v),it=Object(n.m)(e),ut=Object(n.l)(e,"P",{});var zn=Object(n.j)(ut);vt=Object(n.n)(zn,"In the root of our project, create "),dt=Object(n.l)(zn,"CODE",{});var _n=Object(n.j)(dt);kt=Object(n.n)(_n,"postcss.config.js"),_n.forEach(n.v),gt=Object(n.n)(zn,", and load our PostCSS plugins."),zn.forEach(n.v),ht=Object(n.m)(e),ft=Object(n.l)(e,"PRE",{class:!0}),Object(n.j)(ft).forEach(n.v),mt=Object(n.m)(e),St=Object(n.l)(e,"P",{});var Bn=Object(n.j)(St);wt=Object(n.l)(Bn,"CODE",{});var Gn=Object(n.j)(wt);Et=Object(n.n)(Gn,"postcss-import"),Gn.forEach(n.v),Ft=Object(n.n)(Bn," and "),Ct=Object(n.l)(Bn,"CODE",{});var Kn=Object(n.j)(Ct);Vt=Object(n.n)(Kn,"postcss-nested"),Kn.forEach(n.v),yt=Object(n.n)(Bn," introduce some additional syntax that needs to be handled manually."),Bn.forEach(n.v),Pt=Object(n.m)(e),Tt=Object(n.l)(e,"P",{});var Qn=Object(n.j)(Tt);xt=Object(n.n)(Qn,"To do so, we use "),Dt=Object(n.l)(Qn,"CODE",{});var Un=Object(n.j)(Dt);Ht=Object(n.n)(Un,"svelte-preprocess"),Un.forEach(n.v),qt=Object(n.n)(Qn,". The preprocessor allows us to apply modifications to the code before it is passed into the Svelte engine."),Qn.forEach(n.v),It=Object(n.m)(e),Rt=Object(n.l)(e,"P",{});var Xn=Object(n.j)(Rt);Mt=Object(n.n)(Xn,"First, create our preprocessor options object under "),Lt=Object(n.l)(Xn,"CODE",{});var Yn=Object(n.j)(Lt);At=Object(n.n)(Yn,"svelte.config.js"),Yn.forEach(n.v),Wt=Object(n.n)(Xn,"…"),Xn.forEach(n.v),Nt=Object(n.m)(e),Jt=Object(n.l)(e,"PRE",{class:!0}),Object(n.j)(Jt).forEach(n.v),$t=Object(n.m)(e),zt=Object(n.l)(e,"P",{});var Zn=Object(n.j)(zt);_t=Object(n.l)(Zn,"CODE",{});var ea=Object(n.j)(_t);Bt=Object(n.n)(ea,"svelte.config.js"),ea.forEach(n.v),Gt=Object(n.n)(Zn," is used to configure our language server, such that the Svelte extension for VSCode and coc knows how to parse our source code and provide proper syntax highlighting and error messages."),Zn.forEach(n.v),Kt=Object(n.m)(e),Qt=Object(n.l)(e,"P",{});var ta=Object(n.j)(Qt);Ut=Object(n.n)(ta,"To enable the preprocessor for the language server, simply export  a "),Xt=Object(n.l)(ta,"CODE",{});var sa=Object(n.j)(Xt);Yt=Object(n.n)(sa,"preprocess"),sa.forEach(n.v),Zt=Object(n.n)(ta," object from "),es=Object(n.l)(ta,"CODE",{});var na=Object(n.j)(es);ts=Object(n.n)(na,"svelte.config.js"),na.forEach(n.v),ss=Object(n.n)(ta,"."),ta.forEach(n.v),ns=Object(n.m)(e),as=Object(n.l)(e,"PRE",{class:!0}),Object(n.j)(as).forEach(n.v),cs=Object(n.m)(e),os=Object(n.l)(e,"P",{});var aa=Object(n.j)(os);ps=Object(n.n)(aa,"We also export the options object, since we want to use the same configuration for our build step under "),js=Object(n.l)(aa,"CODE",{});var ca=Object(n.j)(js);bs=Object(n.n)(ca,"rollup.config.js"),ca.forEach(n.v),ls=Object(n.n)(aa," or "),Os=Object(n.l)(aa,"CODE",{});var oa=Object(n.j)(Os);rs=Object(n.n)(oa,"webpack.config.js"),oa.forEach(n.v),is=Object(n.n)(aa,"."),aa.forEach(n.v),us=Object(n.m)(e),vs=Object(n.l)(e,"P",{});var pa=Object(n.j)(vs);ds=Object(n.n)(pa,"For Rollup, add "),ks=Object(n.l)(pa,"CODE",{});var ja=Object(n.j)(ks);gs=Object(n.n)(ja,"preprocess"),ja.forEach(n.v),hs=Object(n.n)(pa," to the "),fs=Object(n.l)(pa,"CODE",{});var ba=Object(n.j)(fs);ms=Object(n.n)(ba,"svelte"),ba.forEach(n.v),Ss=Object(n.n)(pa," object for both the client and server…"),pa.forEach(n.v),ws=Object(n.m)(e),Es=Object(n.l)(e,"PRE",{class:!0}),Object(n.j)(Es).forEach(n.v),Fs=Object(n.m)(e),Cs=Object(n.l)(e,"P",{});var la=Object(n.j)(Cs);Vs=Object(n.n)(la,"For Webpack, add "),ys=Object(n.l)(la,"CODE",{});var Oa=Object(n.j)(ys);Ps=Object(n.n)(Oa,"preprocess"),Oa.forEach(n.v),Ts=Object(n.n)(la," to the "),xs=Object(n.l)(la,"CODE",{});var ra=Object(n.j)(xs);Ds=Object(n.n)(ra,"/\\\\.(svelte|html)$/"),ra.forEach(n.v),Hs=Object(n.n)(la," rule for both the client and server…"),la.forEach(n.v),qs=Object(n.m)(e),Is=Object(n.l)(e,"PRE",{class:!0}),Object(n.j)(Is).forEach(n.v),Rs=Object(n.m)(e),Ms=Object(n.l)(e,"H3",{});var ia=Object(n.j)(Ms);Ls=Object(n.n)(ia,"Adjust npm scripts"),ia.forEach(n.v),As=Object(n.m)(e),Ws=Object(n.l)(e,"P",{});var ua=Object(n.j)(Ws);Ns=Object(n.n)(ua,"After setting up the configurations, we need to run two compilation steps for our project: one to compile the Svelte code into native Javascript, and one to compile PostCSS and apply our plugins, including Tailwind CSS."),ua.forEach(n.v),Js=Object(n.m)(e),$s=Object(n.l)(e,"P",{});var va=Object(n.j)($s);zs=Object(n.n)(va,"To do so, we use "),_s=Object(n.l)(va,"CODE",{});var da=Object(n.j)(_s);Bs=Object(n.n)(da,"npm-run-all"),da.forEach(n.v),Gs=Object(n.n)(va," to simultaneously watch for changes and incrementally compile the necessary files for both compilation steps."),va.forEach(n.v),Ks=Object(n.m)(e),Qs=Object(n.l)(e,"P",{});var ka=Object(n.j)(Qs);Us=Object(n.n)(ka,"We also add the PostCSS compilation step to our build step. In "),Xs=Object(n.l)(ka,"CODE",{});var ga=Object(n.j)(Xs);Ys=Object(n.n)(ga,"package.json"),ga.forEach(n.v),Zs=Object(n.n)(ka,"…"),ka.forEach(n.v),en=Object(n.m)(e),tn=Object(n.l)(e,"PRE",{class:!0}),Object(n.j)(tn).forEach(n.v),sn=Object(n.m)(e),nn=Object(n.l)(e,"P",{});var ha=Object(n.j)(nn);an=Object(n.n)(ha,"Now you should be able to use Tailwind CSS in your Sapper project!"),ha.forEach(n.v),this.h()},h(){Object(n.g)(k,"class","language-html"),Object(n.g)(x,"class","language-html"),Object(n.g)(ne,"class","language-bash"),Object(n.g)(Je,"class","language-bash"),Object(n.g)(Ge,"class","language-javascript"),Object(n.g)(pt,"class","language-css"),Object(n.g)(ft,"class","language-javascript"),Object(n.g)(Jt,"class","language-javascript"),Object(n.g)(as,"class","language-javascript"),Object(n.g)(Es,"class","language-javascript"),Object(n.g)(Is,"class","language-javascript"),Object(n.g)(tn,"class","language-json")},m(e,cn){Object(n.F)(e,t,cn),Object(n.e)(t,s),Object(n.F)(e,a,cn),Object(n.F)(e,c,cn),Object(n.e)(c,o),Object(n.F)(e,p,cn),Object(n.F)(e,j,cn),Object(n.e)(j,b),Object(n.F)(e,l,cn),Object(n.F)(e,O,cn),Object(n.e)(O,r),Object(n.F)(e,i,cn),Object(n.F)(e,u,cn),Object(n.e)(u,v),Object(n.F)(e,d,cn),Object(n.F)(e,k,cn),k.innerHTML='<code class="language-html"><span class="token comment">&lt;!-- Parent.svelte --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n  <span class="token selector">.margin-lg</span> <span class="token punctuation">&#123;</span>    // unused class warning\n    <span class="token property">margin</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildCard</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>margin-lg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code>',Object(n.F)(e,g,cn),Object(n.F)(e,h,cn),Object(n.e)(h,f),Object(n.e)(h,m),Object(n.e)(m,S),Object(n.e)(h,w),Object(n.F)(e,E,cn),Object(n.F)(e,F,cn),Object(n.e)(F,C),Object(n.F)(e,V,cn),Object(n.F)(e,y,cn),Object(n.e)(y,P),Object(n.F)(e,T,cn),Object(n.F)(e,x,cn),x.innerHTML='<code class="language-html"><span class="token comment">&lt;!-- Parent.svelte --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildCard</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>m-4<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n\n\n<span class="token comment">&lt;!-- ChildCard.svelte --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">export</span> <span class="token punctuation">&#123;</span> className <span class="token keyword">as</span> <span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// exports a prop \'class\'</span>\n  <span class="token keyword">let</span> className<span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>&#123;className&#125;/</span><span class="token punctuation">></span></span></code>',Object(n.F)(e,D,cn),Object(n.F)(e,H,cn),Object(n.e)(H,q),Object(n.e)(H,I),Object(n.e)(I,R),Object(n.e)(H,M),Object(n.e)(H,L),Object(n.e)(L,A),Object(n.e)(H,W),Object(n.e)(H,N),Object(n.e)(N,J),Object(n.e)(H,$),Object(n.F)(e,z,cn),Object(n.F)(e,_,cn),Object(n.e)(_,B),Object(n.F)(e,G,cn),Object(n.F)(e,K,cn),Object(n.e)(K,Q),Object(n.F)(e,U,cn),Object(n.F)(e,X,cn),Object(n.e)(X,Y),Object(n.F)(e,Z,cn),Object(n.F)(e,ee,cn),Object(n.e)(ee,te),Object(n.F)(e,se,cn),Object(n.F)(e,ne,cn),ne.innerHTML='<code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -D autoprefixer postcss-load-config <span class="token punctuation"></span>\npostcss-cli postcss-import postcss-nested cssnano <span class="token punctuation"></span>\ntailwindcss npm-run-all</code>',Object(n.F)(e,ae,cn),Object(n.F)(e,ce,cn),Object(n.e)(ce,oe),Object(n.e)(oe,pe),Object(n.e)(ce,je),Object(n.e)(ce,be),Object(n.e)(be,le),Object(n.e)(ce,Oe),Object(n.F)(e,re,cn),Object(n.F)(e,ie,cn),Object(n.e)(ie,ue),Object(n.e)(ue,ve),Object(n.e)(ie,de),Object(n.F)(e,ke,cn),Object(n.F)(e,ge,cn),Object(n.e)(ge,he),Object(n.e)(he,fe),Object(n.e)(ge,me),Object(n.e)(ge,Se),Object(n.e)(Se,we),Object(n.e)(ge,Ee),Object(n.F)(e,Fe,cn),Object(n.F)(e,Ce,cn),Object(n.e)(Ce,Ve),Object(n.e)(Ve,ye),Object(n.e)(Ce,Pe),Object(n.F)(e,Te,cn),Object(n.F)(e,xe,cn),Object(n.e)(xe,De),Object(n.e)(De,He),Object(n.e)(xe,qe),Object(n.F)(e,Ie,cn),Object(n.F)(e,Re,cn),Object(n.e)(Re,Me),Object(n.F)(e,Le,cn),Object(n.F)(e,Ae,cn),Object(n.e)(Ae,We),Object(n.F)(e,Ne,cn),Object(n.F)(e,Je,cn),Je.innerHTML='<code class="language-bash">npx tailwind init</code>',Object(n.F)(e,$e,cn),Object(n.F)(e,ze,cn),Object(n.e)(ze,_e),Object(n.F)(e,Be,cn),Object(n.F)(e,Ge,cn),Ge.innerHTML='<code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  purge<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/**/*.svelte"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  theme<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n    extend<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  variants<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',Object(n.F)(e,Ke,cn),Object(n.F)(e,Qe,cn),Object(n.e)(Qe,Ue),Object(n.e)(Qe,Xe),Object(n.e)(Xe,Ye),Object(n.e)(Qe,Ze),Object(n.F)(e,et,cn),Object(n.F)(e,tt,cn),Object(n.e)(tt,st),Object(n.e)(tt,nt),Object(n.e)(nt,at),Object(n.e)(tt,ct),Object(n.F)(e,ot,cn),Object(n.F)(e,pt,cn),pt.innerHTML='<code class="language-css"><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span></code>',Object(n.F)(e,jt,cn),Object(n.F)(e,bt,cn),Object(n.e)(bt,lt),Object(n.e)(bt,Ot),Object(n.e)(Ot,rt),Object(n.F)(e,it,cn),Object(n.F)(e,ut,cn),Object(n.e)(ut,vt),Object(n.e)(ut,dt),Object(n.e)(dt,kt),Object(n.e)(ut,gt),Object(n.F)(e,ht,cn),Object(n.F)(e,ft,cn),ft.innerHTML='<code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'postcss-import\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'postcss-nested\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'cssnano\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n      preset<span class="token operator">:</span> <span class="token string">\'default\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',Object(n.F)(e,mt,cn),Object(n.F)(e,St,cn),Object(n.e)(St,wt),Object(n.e)(wt,Et),Object(n.e)(St,Ft),Object(n.e)(St,Ct),Object(n.e)(Ct,Vt),Object(n.e)(St,yt),Object(n.F)(e,Pt,cn),Object(n.F)(e,Tt,cn),Object(n.e)(Tt,xt),Object(n.e)(Tt,Dt),Object(n.e)(Dt,Ht),Object(n.e)(Tt,qt),Object(n.F)(e,It,cn),Object(n.F)(e,Rt,cn),Object(n.e)(Rt,Mt),Object(n.e)(Rt,Lt),Object(n.e)(Lt,At),Object(n.e)(Rt,Wt),Object(n.F)(e,Nt,cn),Object(n.F)(e,Jt,cn),Jt.innerHTML='<code class="language-javascript"><span class="token keyword">const</span> sveltePreprocess <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'svelte-preprocess\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> preprocessOptions <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  postcss<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'postcss-import\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'postcss-nested\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',Object(n.F)(e,$t,cn),Object(n.F)(e,zt,cn),Object(n.e)(zt,_t),Object(n.e)(_t,Bt),Object(n.e)(zt,Gt),Object(n.F)(e,Kt,cn),Object(n.F)(e,Qt,cn),Object(n.e)(Qt,Ut),Object(n.e)(Qt,Xt),Object(n.e)(Xt,Yt),Object(n.e)(Qt,Zt),Object(n.e)(Qt,es),Object(n.e)(es,ts),Object(n.e)(Qt,ss),Object(n.F)(e,ns,cn),Object(n.F)(e,as,cn),as.innerHTML='<code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  preprocess<span class="token operator">:</span> <span class="token function">sveltePreprocess</span><span class="token punctuation">(</span>preprocessOptions<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  preprocessOptions<span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',Object(n.F)(e,cs,cn),Object(n.F)(e,os,cn),Object(n.e)(os,ps),Object(n.e)(os,js),Object(n.e)(js,bs),Object(n.e)(os,ls),Object(n.e)(os,Os),Object(n.e)(Os,rs),Object(n.e)(os,is),Object(n.F)(e,us,cn),Object(n.F)(e,vs,cn),Object(n.e)(vs,ds),Object(n.e)(vs,ks),Object(n.e)(ks,gs),Object(n.e)(vs,hs),Object(n.e)(vs,fs),Object(n.e)(fs,ms),Object(n.e)(vs,Ss),Object(n.F)(e,ws,cn),Object(n.F)(e,Es,cn),Es.innerHTML='<code class="language-javascript"><span class="token keyword">const</span> preprocess <span class="token operator">=</span> <span class="token function">sveltePreprocess</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n  sourceMap<span class="token operator">:</span> dev<span class="token punctuation">,</span>       <span class="token comment">// additional preprocess option</span>\n  <span class="token operator">...</span>preprocessOptions<span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nclient<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n  <span class="token operator">...</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token operator">...</span>\n    <span class="token function">svelte</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n      preprocess<span class="token punctuation">,</span>\n      dev<span class="token punctuation">,</span>\n      <span class="token operator">...</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n\nserver<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n  <span class="token operator">...</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token operator">...</span>\n    <span class="token function">svelte</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n      preprocess<span class="token punctuation">,</span>\n      generate<span class="token operator">:</span> <span class="token string">\'ssr\'</span><span class="token punctuation">,</span>\n      <span class="token operator">...</span>\n<span class="token punctuation">&#125;</span></code>',Object(n.F)(e,Fs,cn),Object(n.F)(e,Cs,cn),Object(n.e)(Cs,Vs),Object(n.e)(Cs,ys),Object(n.e)(ys,Ps),Object(n.e)(Cs,Ts),Object(n.e)(Cs,xs),Object(n.e)(xs,Ds),Object(n.e)(Cs,Hs),Object(n.F)(e,qs,cn),Object(n.F)(e,Is,cn),Is.innerHTML='<code class="language-javascript">client<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n  <span class="token operator">...</span>\n    module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n      rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">&#123;</span>\n          test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(svelte|html)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n          use<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n            options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n              preprocess<span class="token punctuation">,</span>\n              <span class="token operator">...</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n\nserver<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n  <span class="token operator">...</span>\n    module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n      rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">&#123;</span>\n          test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(svelte|html)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n          use<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n            options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n              preprocess<span class="token punctuation">,</span>\n              <span class="token operator">...</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code>',Object(n.F)(e,Rs,cn),Object(n.F)(e,Ms,cn),Object(n.e)(Ms,Ls),Object(n.F)(e,As,cn),Object(n.F)(e,Ws,cn),Object(n.e)(Ws,Ns),Object(n.F)(e,Js,cn),Object(n.F)(e,$s,cn),Object(n.e)($s,zs),Object(n.e)($s,_s),Object(n.e)(_s,Bs),Object(n.e)($s,Gs),Object(n.F)(e,Ks,cn),Object(n.F)(e,Qs,cn),Object(n.e)(Qs,Us),Object(n.e)(Qs,Xs),Object(n.e)(Xs,Ys),Object(n.e)(Qs,Zs),Object(n.F)(e,en,cn),Object(n.F)(e,tn,cn),tn.innerHTML='<code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n  <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"run-p watch:css watch:sapper"</span><span class="token punctuation">,</span>\n  <span class="token property">"watch:css"</span><span class="token operator">:</span> <span class="token string">"postcss src/assets/global.css -o static/global.css -w"</span><span class="token punctuation">,</span>\n  <span class="token property">"watch:sapper"</span><span class="token operator">:</span> <span class="token string">"sapper dev"</span><span class="token punctuation">,</span>\n  <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"run-s build:css build:sapper"</span><span class="token punctuation">,</span>\n  <span class="token property">"build:css"</span><span class="token operator">:</span> <span class="token string">"NODE_ENV=production postcss src/assets/global.css -o static/global.css"</span><span class="token punctuation">,</span>\n  <span class="token property">"build:sapper"</span><span class="token operator">:</span> <span class="token string">"NODE_ENV=production sapper build"</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code>',Object(n.F)(e,sn,cn),Object(n.F)(e,nn,cn),Object(n.e)(nn,an)},p:n.J,i:n.J,o:n.J,d(e){e&&Object(n.v)(t),e&&Object(n.v)(a),e&&Object(n.v)(c),e&&Object(n.v)(p),e&&Object(n.v)(j),e&&Object(n.v)(l),e&&Object(n.v)(O),e&&Object(n.v)(i),e&&Object(n.v)(u),e&&Object(n.v)(d),e&&Object(n.v)(k),e&&Object(n.v)(g),e&&Object(n.v)(h),e&&Object(n.v)(E),e&&Object(n.v)(F),e&&Object(n.v)(V),e&&Object(n.v)(y),e&&Object(n.v)(T),e&&Object(n.v)(x),e&&Object(n.v)(D),e&&Object(n.v)(H),e&&Object(n.v)(z),e&&Object(n.v)(_),e&&Object(n.v)(G),e&&Object(n.v)(K),e&&Object(n.v)(U),e&&Object(n.v)(X),e&&Object(n.v)(Z),e&&Object(n.v)(ee),e&&Object(n.v)(se),e&&Object(n.v)(ne),e&&Object(n.v)(ae),e&&Object(n.v)(ce),e&&Object(n.v)(re),e&&Object(n.v)(ie),e&&Object(n.v)(ke),e&&Object(n.v)(ge),e&&Object(n.v)(Fe),e&&Object(n.v)(Ce),e&&Object(n.v)(Te),e&&Object(n.v)(xe),e&&Object(n.v)(Ie),e&&Object(n.v)(Re),e&&Object(n.v)(Le),e&&Object(n.v)(Ae),e&&Object(n.v)(Ne),e&&Object(n.v)(Je),e&&Object(n.v)($e),e&&Object(n.v)(ze),e&&Object(n.v)(Be),e&&Object(n.v)(Ge),e&&Object(n.v)(Ke),e&&Object(n.v)(Qe),e&&Object(n.v)(et),e&&Object(n.v)(tt),e&&Object(n.v)(ot),e&&Object(n.v)(pt),e&&Object(n.v)(jt),e&&Object(n.v)(bt),e&&Object(n.v)(it),e&&Object(n.v)(ut),e&&Object(n.v)(ht),e&&Object(n.v)(ft),e&&Object(n.v)(mt),e&&Object(n.v)(St),e&&Object(n.v)(Pt),e&&Object(n.v)(Tt),e&&Object(n.v)(It),e&&Object(n.v)(Rt),e&&Object(n.v)(Nt),e&&Object(n.v)(Jt),e&&Object(n.v)($t),e&&Object(n.v)(zt),e&&Object(n.v)(Kt),e&&Object(n.v)(Qt),e&&Object(n.v)(ns),e&&Object(n.v)(as),e&&Object(n.v)(cs),e&&Object(n.v)(os),e&&Object(n.v)(us),e&&Object(n.v)(vs),e&&Object(n.v)(ws),e&&Object(n.v)(Es),e&&Object(n.v)(Fs),e&&Object(n.v)(Cs),e&&Object(n.v)(qs),e&&Object(n.v)(Is),e&&Object(n.v)(Rs),e&&Object(n.v)(Ms),e&&Object(n.v)(As),e&&Object(n.v)(Ws),e&&Object(n.v)(Js),e&&Object(n.v)($s),e&&Object(n.v)(Ks),e&&Object(n.v)(Qs),e&&Object(n.v)(en),e&&Object(n.v)(tn),e&&Object(n.v)(sn),e&&Object(n.v)(nn)}}}const c={title:"Svelte, Sapper, and Tailwind CSS"},{title:o}=c;class p extends n.a{constructor(e){super(),Object(n.E)(this,e,null,a,n.O,{})}}t.default=p}}]);