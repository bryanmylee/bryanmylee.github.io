(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{9:function(t,e,s){"use strict";s.r(e),s.d(e,"metadata",(function(){return c}));var n=s(0);function a(t){let e,s,a,c,o,p,j,b,l,O,r,i,u,d,k,h,S,g,f,C,v,m,E,P,w,y,T,x,D,H,q,I,R,L,M,A,F,W,N,J,V,$,G,z,_,B,K,Q,U,X,Y,Z,tt,et,st,nt,at,ct,ot,pt,jt,bt,lt,Ot,rt,it,ut,dt,kt,ht,St,gt,ft,Ct,vt,mt,Et,Pt,wt,yt,Tt,xt,Dt,Ht,qt,It,Rt,Lt,Mt,At,Ft,Wt,Nt,Jt,Vt,$t,Gt,zt,_t,Bt,Kt,Qt,Ut,Xt,Yt,Zt,te,ee,se,ne,ae,ce,oe,pe,je,be,le,Oe,re,ie,ue,de,ke,he,Se,ge,fe,Ce,ve,me,Ee,Pe,we,ye,Te,xe,De,He,qe,Ie,Re,Le,Me,Ae,Fe,We,Ne,Je,Ve,$e,Ge,ze,_e,Be,Ke,Qe,Ue,Xe,Ye,Ze,ts,es,ss,ns,as,cs,os,ps,js,bs,ls,Os,rs,is,us,ds,ks,hs,Ss,gs,fs,Cs,vs,ms,Es,Ps,ws,ys,Ts,xs,Ds,Hs,qs,Is,Rs,Ls,Ms,As,Fs,Ws,Ns,Js,Vs,$s,Gs,zs,_s,Bs,Ks,Qs,Us,Xs,Ys,Zs,tn,en,sn,nn,an;return{c(){e=Object(n.u)("h2"),s=Object(n.S)("Why Tailwind CSS?"),a=Object(n.P)(),c=Object(n.u)("h3"),o=Object(n.S)("A constrained design system is a good thing"),p=Object(n.P)(),j=Object(n.u)("p"),b=Object(n.S)("Although Svelte offers scoped CSS by default, Tailwind CSS is still useful as it offers a nicely constrained design system. As the number of components grows, it becomes increasingly difficult to keep all whitespacing, font-sizes, and colours consistent. Tailwind CSS solves these issues by providing sensible defaults for many CSS variables, and minimises the usage of magic numbers."),l=Object(n.P)(),O=Object(n.u)("h3"),r=Object(n.S)("Styling custom components"),i=Object(n.P)(),u=Object(n.u)("p"),d=Object(n.S)("In addition, Svelte does not support passing CSS classes into child components. For example, we cannot do this…"),k=Object(n.P)(),h=Object(n.u)("pre"),S=Object(n.P)(),g=Object(n.u)("p"),f=Object(n.S)("… as the "),C=Object(n.u)("code"),v=Object(n.S)(".margin-lg"),m=Object(n.S)(" class is treated as an unused CSS class, and is purged in the compiled application."),E=Object(n.P)(),P=Object(n.u)("p"),w=Object(n.S)("This makes it extremely difficult to design flexible components that depend on layout and more."),y=Object(n.P)(),T=Object(n.u)("p"),x=Object(n.S)("Since Tailwind CSS classes are global by default and not purged by Svelte, we can use Tailwind to enable this functionality."),D=Object(n.P)(),H=Object(n.u)("pre"),q=Object(n.P)(),I=Object(n.u)("p"),R=Object(n.S)("The "),L=Object(n.u)("code"),M=Object(n.S)("div"),A=Object(n.S)(" element in "),F=Object(n.u)("code"),W=Object(n.S)("ChildCard.svelte"),N=Object(n.S)(" will be built with the "),J=Object(n.u)("code"),V=Object(n.S)("m-4"),$=Object(n.S)(" class, which will inherit styles from Tailwind CSS."),G=Object(n.P)(),z=Object(n.u)("h2"),_=Object(n.S)("Integrating Tailwind CSS"),B=Object(n.P)(),K=Object(n.u)("p"),Q=Object(n.S)("To add Tailwind CSS to Svelte and Sapper, we first have to integrate PostCSS into Sapper’s build step, as Tailwind CSS is a PostCSS plugin."),U=Object(n.P)(),X=Object(n.u)("h3"),Y=Object(n.S)("Install dependencies"),Z=Object(n.P)(),tt=Object(n.u)("p"),et=Object(n.S)("First, we have to install a few extra dependencies."),st=Object(n.P)(),nt=Object(n.u)("pre"),at=Object(n.P)(),ct=Object(n.u)("p"),ot=Object(n.u)("code"),pt=Object(n.S)("postcss-load-config"),jt=Object(n.S)(" allows us to automatically load the "),bt=Object(n.u)("code"),lt=Object(n.S)("postcss.config.js"),Ot=Object(n.S)(" file in our project root if it exists, thus saving us some extra configuration required to integrate PostCSS into our build step."),rt=Object(n.P)(),it=Object(n.u)("p"),ut=Object(n.u)("code"),dt=Object(n.S)("postcss-cli"),kt=Object(n.S)(" allows us to run PostCSS from the command line."),ht=Object(n.P)(),St=Object(n.u)("p"),gt=Object(n.u)("code"),ft=Object(n.S)("postcss-import"),Ct=Object(n.S)(" and "),vt=Object(n.u)("code"),mt=Object(n.S)("postcss-nested"),Et=Object(n.S)(" are additional quality-of-life plugins."),Pt=Object(n.P)(),wt=Object(n.u)("p"),yt=Object(n.u)("code"),Tt=Object(n.S)("cssnano"),xt=Object(n.S)(" minifies our CSS output."),Dt=Object(n.P)(),Ht=Object(n.u)("p"),qt=Object(n.u)("code"),It=Object(n.S)("npm-run-all"),Rt=Object(n.S)(" is a tool to run multiple npm scripts in parallel."),Lt=Object(n.P)(),Mt=Object(n.u)("h3"),At=Object(n.S)("Initialise Tailwind CSS"),Ft=Object(n.P)(),Wt=Object(n.u)("p"),Nt=Object(n.S)("Create the Tailwind configuration file with…"),Jt=Object(n.P)(),Vt=Object(n.u)("pre"),$t=Object(n.P)(),Gt=Object(n.u)("p"),zt=Object(n.S)("We then have to include Svelte into the PurgeCSS block to ensure that Svelte styles are not removed."),_t=Object(n.P)(),Bt=Object(n.u)("pre"),Kt=Object(n.P)(),Qt=Object(n.u)("p"),Ut=Object(n.S)("Instead of configuring "),Xt=Object(n.u)("code"),Yt=Object(n.S)("static/global.css"),Zt=Object(n.S)(" manually, we will set up PostCSS to transpile a source CSS file into a static CSS file to be used."),te=Object(n.P)(),ee=Object(n.u)("p"),se=Object(n.S)("Create an asset "),ne=Object(n.u)("code"),ae=Object(n.S)("/src/assets/global.css"),ce=Object(n.S)(", and import Tailwind CSS styles."),oe=Object(n.P)(),pe=Object(n.u)("pre"),je=Object(n.P)(),be=Object(n.u)("h3"),le=Object(n.S)("Configure PostCSS with "),Oe=Object(n.u)("code"),re=Object(n.S)("svelte-preprocess"),ie=Object(n.P)(),ue=Object(n.u)("p"),de=Object(n.S)("In the root of our project, create "),ke=Object(n.u)("code"),he=Object(n.S)("postcss.config.js"),Se=Object(n.S)(", and load our PostCSS plugins."),ge=Object(n.P)(),fe=Object(n.u)("pre"),Ce=Object(n.P)(),ve=Object(n.u)("p"),me=Object(n.u)("code"),Ee=Object(n.S)("postcss-import"),Pe=Object(n.S)(" and "),we=Object(n.u)("code"),ye=Object(n.S)("postcss-nested"),Te=Object(n.S)(" introduce some additional syntax that needs to be handled manually."),xe=Object(n.P)(),De=Object(n.u)("p"),He=Object(n.S)("To do so, we use "),qe=Object(n.u)("code"),Ie=Object(n.S)("svelte-preprocess"),Re=Object(n.S)(". The preprocessor allows us to apply modifications to the code before it is passed into the Svelte engine."),Le=Object(n.P)(),Me=Object(n.u)("p"),Ae=Object(n.S)("First, create our preprocessor options object under "),Fe=Object(n.u)("code"),We=Object(n.S)("svelte.config.js"),Ne=Object(n.S)("…"),Je=Object(n.P)(),Ve=Object(n.u)("pre"),$e=Object(n.P)(),Ge=Object(n.u)("p"),ze=Object(n.u)("code"),_e=Object(n.S)("svelte.config.js"),Be=Object(n.S)(" is used to configure our language server, such that the Svelte extension for VSCode and coc knows how to parse our source code and provide proper syntax highlighting and error messages."),Ke=Object(n.P)(),Qe=Object(n.u)("p"),Ue=Object(n.S)("To enable the preprocessor for the language server, simply export  a "),Xe=Object(n.u)("code"),Ye=Object(n.S)("preprocess"),Ze=Object(n.S)(" object from "),ts=Object(n.u)("code"),es=Object(n.S)("svelte.config.js"),ss=Object(n.S)("."),ns=Object(n.P)(),as=Object(n.u)("pre"),cs=Object(n.P)(),os=Object(n.u)("p"),ps=Object(n.S)("We also export the options object, since we want to use the same configuration for our build step under "),js=Object(n.u)("code"),bs=Object(n.S)("rollup.config.js"),ls=Object(n.S)(" or "),Os=Object(n.u)("code"),rs=Object(n.S)("webpack.config.js"),is=Object(n.S)("."),us=Object(n.P)(),ds=Object(n.u)("p"),ks=Object(n.S)("For Rollup, add "),hs=Object(n.u)("code"),Ss=Object(n.S)("preprocess"),gs=Object(n.S)(" to the "),fs=Object(n.u)("code"),Cs=Object(n.S)("svelte"),vs=Object(n.S)(" object for both the client and server…"),ms=Object(n.P)(),Es=Object(n.u)("pre"),Ps=Object(n.P)(),ws=Object(n.u)("p"),ys=Object(n.S)("For Webpack, add "),Ts=Object(n.u)("code"),xs=Object(n.S)("preprocess"),Ds=Object(n.S)(" to the "),Hs=Object(n.u)("code"),qs=Object(n.S)("/\\\\.(svelte|html)$/"),Is=Object(n.S)(" rule for both the client and server…"),Rs=Object(n.P)(),Ls=Object(n.u)("pre"),Ms=Object(n.P)(),As=Object(n.u)("h3"),Fs=Object(n.S)("Adjust npm scripts"),Ws=Object(n.P)(),Ns=Object(n.u)("p"),Js=Object(n.S)("After setting up the configurations, we need to run two compilation steps for our project: one to compile the Svelte code into native Javascript, and one to compile PostCSS and apply our plugins, including Tailwind CSS."),Vs=Object(n.P)(),$s=Object(n.u)("p"),Gs=Object(n.S)("To do so, we use "),zs=Object(n.u)("code"),_s=Object(n.S)("npm-run-all"),Bs=Object(n.S)(" to simultaneously watch for changes and incrementally compile the necessary files for both compilation steps."),Ks=Object(n.P)(),Qs=Object(n.u)("p"),Us=Object(n.S)("We also add the PostCSS compilation step to our build step. In "),Xs=Object(n.u)("code"),Ys=Object(n.S)("package.json"),Zs=Object(n.S)("…"),tn=Object(n.P)(),en=Object(n.u)("pre"),sn=Object(n.P)(),nn=Object(n.u)("p"),an=Object(n.S)("Now you should be able to use Tailwind CSS in your Sapper project!"),this.h()},l(t){e=Object(n.j)(t,"H2",{});var cn=Object(n.h)(e);s=Object(n.l)(cn,"Why Tailwind CSS?"),cn.forEach(n.t),a=Object(n.k)(t),c=Object(n.j)(t,"H3",{});var on=Object(n.h)(c);o=Object(n.l)(on,"A constrained design system is a good thing"),on.forEach(n.t),p=Object(n.k)(t),j=Object(n.j)(t,"P",{});var pn=Object(n.h)(j);b=Object(n.l)(pn,"Although Svelte offers scoped CSS by default, Tailwind CSS is still useful as it offers a nicely constrained design system. As the number of components grows, it becomes increasingly difficult to keep all whitespacing, font-sizes, and colours consistent. Tailwind CSS solves these issues by providing sensible defaults for many CSS variables, and minimises the usage of magic numbers."),pn.forEach(n.t),l=Object(n.k)(t),O=Object(n.j)(t,"H3",{});var jn=Object(n.h)(O);r=Object(n.l)(jn,"Styling custom components"),jn.forEach(n.t),i=Object(n.k)(t),u=Object(n.j)(t,"P",{});var bn=Object(n.h)(u);d=Object(n.l)(bn,"In addition, Svelte does not support passing CSS classes into child components. For example, we cannot do this…"),bn.forEach(n.t),k=Object(n.k)(t),h=Object(n.j)(t,"PRE",{class:!0}),Object(n.h)(h).forEach(n.t),S=Object(n.k)(t),g=Object(n.j)(t,"P",{});var ln=Object(n.h)(g);f=Object(n.l)(ln,"… as the "),C=Object(n.j)(ln,"CODE",{});var On=Object(n.h)(C);v=Object(n.l)(On,".margin-lg"),On.forEach(n.t),m=Object(n.l)(ln," class is treated as an unused CSS class, and is purged in the compiled application."),ln.forEach(n.t),E=Object(n.k)(t),P=Object(n.j)(t,"P",{});var rn=Object(n.h)(P);w=Object(n.l)(rn,"This makes it extremely difficult to design flexible components that depend on layout and more."),rn.forEach(n.t),y=Object(n.k)(t),T=Object(n.j)(t,"P",{});var un=Object(n.h)(T);x=Object(n.l)(un,"Since Tailwind CSS classes are global by default and not purged by Svelte, we can use Tailwind to enable this functionality."),un.forEach(n.t),D=Object(n.k)(t),H=Object(n.j)(t,"PRE",{class:!0}),Object(n.h)(H).forEach(n.t),q=Object(n.k)(t),I=Object(n.j)(t,"P",{});var dn=Object(n.h)(I);R=Object(n.l)(dn,"The "),L=Object(n.j)(dn,"CODE",{});var kn=Object(n.h)(L);M=Object(n.l)(kn,"div"),kn.forEach(n.t),A=Object(n.l)(dn," element in "),F=Object(n.j)(dn,"CODE",{});var hn=Object(n.h)(F);W=Object(n.l)(hn,"ChildCard.svelte"),hn.forEach(n.t),N=Object(n.l)(dn," will be built with the "),J=Object(n.j)(dn,"CODE",{});var Sn=Object(n.h)(J);V=Object(n.l)(Sn,"m-4"),Sn.forEach(n.t),$=Object(n.l)(dn," class, which will inherit styles from Tailwind CSS."),dn.forEach(n.t),G=Object(n.k)(t),z=Object(n.j)(t,"H2",{});var gn=Object(n.h)(z);_=Object(n.l)(gn,"Integrating Tailwind CSS"),gn.forEach(n.t),B=Object(n.k)(t),K=Object(n.j)(t,"P",{});var fn=Object(n.h)(K);Q=Object(n.l)(fn,"To add Tailwind CSS to Svelte and Sapper, we first have to integrate PostCSS into Sapper’s build step, as Tailwind CSS is a PostCSS plugin."),fn.forEach(n.t),U=Object(n.k)(t),X=Object(n.j)(t,"H3",{});var Cn=Object(n.h)(X);Y=Object(n.l)(Cn,"Install dependencies"),Cn.forEach(n.t),Z=Object(n.k)(t),tt=Object(n.j)(t,"P",{});var vn=Object(n.h)(tt);et=Object(n.l)(vn,"First, we have to install a few extra dependencies."),vn.forEach(n.t),st=Object(n.k)(t),nt=Object(n.j)(t,"PRE",{class:!0}),Object(n.h)(nt).forEach(n.t),at=Object(n.k)(t),ct=Object(n.j)(t,"P",{});var mn=Object(n.h)(ct);ot=Object(n.j)(mn,"CODE",{});var En=Object(n.h)(ot);pt=Object(n.l)(En,"postcss-load-config"),En.forEach(n.t),jt=Object(n.l)(mn," allows us to automatically load the "),bt=Object(n.j)(mn,"CODE",{});var Pn=Object(n.h)(bt);lt=Object(n.l)(Pn,"postcss.config.js"),Pn.forEach(n.t),Ot=Object(n.l)(mn," file in our project root if it exists, thus saving us some extra configuration required to integrate PostCSS into our build step."),mn.forEach(n.t),rt=Object(n.k)(t),it=Object(n.j)(t,"P",{});var wn=Object(n.h)(it);ut=Object(n.j)(wn,"CODE",{});var yn=Object(n.h)(ut);dt=Object(n.l)(yn,"postcss-cli"),yn.forEach(n.t),kt=Object(n.l)(wn," allows us to run PostCSS from the command line."),wn.forEach(n.t),ht=Object(n.k)(t),St=Object(n.j)(t,"P",{});var Tn=Object(n.h)(St);gt=Object(n.j)(Tn,"CODE",{});var xn=Object(n.h)(gt);ft=Object(n.l)(xn,"postcss-import"),xn.forEach(n.t),Ct=Object(n.l)(Tn," and "),vt=Object(n.j)(Tn,"CODE",{});var Dn=Object(n.h)(vt);mt=Object(n.l)(Dn,"postcss-nested"),Dn.forEach(n.t),Et=Object(n.l)(Tn," are additional quality-of-life plugins."),Tn.forEach(n.t),Pt=Object(n.k)(t),wt=Object(n.j)(t,"P",{});var Hn=Object(n.h)(wt);yt=Object(n.j)(Hn,"CODE",{});var qn=Object(n.h)(yt);Tt=Object(n.l)(qn,"cssnano"),qn.forEach(n.t),xt=Object(n.l)(Hn," minifies our CSS output."),Hn.forEach(n.t),Dt=Object(n.k)(t),Ht=Object(n.j)(t,"P",{});var In=Object(n.h)(Ht);qt=Object(n.j)(In,"CODE",{});var Rn=Object(n.h)(qt);It=Object(n.l)(Rn,"npm-run-all"),Rn.forEach(n.t),Rt=Object(n.l)(In," is a tool to run multiple npm scripts in parallel."),In.forEach(n.t),Lt=Object(n.k)(t),Mt=Object(n.j)(t,"H3",{});var Ln=Object(n.h)(Mt);At=Object(n.l)(Ln,"Initialise Tailwind CSS"),Ln.forEach(n.t),Ft=Object(n.k)(t),Wt=Object(n.j)(t,"P",{});var Mn=Object(n.h)(Wt);Nt=Object(n.l)(Mn,"Create the Tailwind configuration file with…"),Mn.forEach(n.t),Jt=Object(n.k)(t),Vt=Object(n.j)(t,"PRE",{class:!0}),Object(n.h)(Vt).forEach(n.t),$t=Object(n.k)(t),Gt=Object(n.j)(t,"P",{});var An=Object(n.h)(Gt);zt=Object(n.l)(An,"We then have to include Svelte into the PurgeCSS block to ensure that Svelte styles are not removed."),An.forEach(n.t),_t=Object(n.k)(t),Bt=Object(n.j)(t,"PRE",{class:!0}),Object(n.h)(Bt).forEach(n.t),Kt=Object(n.k)(t),Qt=Object(n.j)(t,"P",{});var Fn=Object(n.h)(Qt);Ut=Object(n.l)(Fn,"Instead of configuring "),Xt=Object(n.j)(Fn,"CODE",{});var Wn=Object(n.h)(Xt);Yt=Object(n.l)(Wn,"static/global.css"),Wn.forEach(n.t),Zt=Object(n.l)(Fn," manually, we will set up PostCSS to transpile a source CSS file into a static CSS file to be used."),Fn.forEach(n.t),te=Object(n.k)(t),ee=Object(n.j)(t,"P",{});var Nn=Object(n.h)(ee);se=Object(n.l)(Nn,"Create an asset "),ne=Object(n.j)(Nn,"CODE",{});var Jn=Object(n.h)(ne);ae=Object(n.l)(Jn,"/src/assets/global.css"),Jn.forEach(n.t),ce=Object(n.l)(Nn,", and import Tailwind CSS styles."),Nn.forEach(n.t),oe=Object(n.k)(t),pe=Object(n.j)(t,"PRE",{class:!0}),Object(n.h)(pe).forEach(n.t),je=Object(n.k)(t),be=Object(n.j)(t,"H3",{});var Vn=Object(n.h)(be);le=Object(n.l)(Vn,"Configure PostCSS with "),Oe=Object(n.j)(Vn,"CODE",{});var $n=Object(n.h)(Oe);re=Object(n.l)($n,"svelte-preprocess"),$n.forEach(n.t),Vn.forEach(n.t),ie=Object(n.k)(t),ue=Object(n.j)(t,"P",{});var Gn=Object(n.h)(ue);de=Object(n.l)(Gn,"In the root of our project, create "),ke=Object(n.j)(Gn,"CODE",{});var zn=Object(n.h)(ke);he=Object(n.l)(zn,"postcss.config.js"),zn.forEach(n.t),Se=Object(n.l)(Gn,", and load our PostCSS plugins."),Gn.forEach(n.t),ge=Object(n.k)(t),fe=Object(n.j)(t,"PRE",{class:!0}),Object(n.h)(fe).forEach(n.t),Ce=Object(n.k)(t),ve=Object(n.j)(t,"P",{});var _n=Object(n.h)(ve);me=Object(n.j)(_n,"CODE",{});var Bn=Object(n.h)(me);Ee=Object(n.l)(Bn,"postcss-import"),Bn.forEach(n.t),Pe=Object(n.l)(_n," and "),we=Object(n.j)(_n,"CODE",{});var Kn=Object(n.h)(we);ye=Object(n.l)(Kn,"postcss-nested"),Kn.forEach(n.t),Te=Object(n.l)(_n," introduce some additional syntax that needs to be handled manually."),_n.forEach(n.t),xe=Object(n.k)(t),De=Object(n.j)(t,"P",{});var Qn=Object(n.h)(De);He=Object(n.l)(Qn,"To do so, we use "),qe=Object(n.j)(Qn,"CODE",{});var Un=Object(n.h)(qe);Ie=Object(n.l)(Un,"svelte-preprocess"),Un.forEach(n.t),Re=Object(n.l)(Qn,". The preprocessor allows us to apply modifications to the code before it is passed into the Svelte engine."),Qn.forEach(n.t),Le=Object(n.k)(t),Me=Object(n.j)(t,"P",{});var Xn=Object(n.h)(Me);Ae=Object(n.l)(Xn,"First, create our preprocessor options object under "),Fe=Object(n.j)(Xn,"CODE",{});var Yn=Object(n.h)(Fe);We=Object(n.l)(Yn,"svelte.config.js"),Yn.forEach(n.t),Ne=Object(n.l)(Xn,"…"),Xn.forEach(n.t),Je=Object(n.k)(t),Ve=Object(n.j)(t,"PRE",{class:!0}),Object(n.h)(Ve).forEach(n.t),$e=Object(n.k)(t),Ge=Object(n.j)(t,"P",{});var Zn=Object(n.h)(Ge);ze=Object(n.j)(Zn,"CODE",{});var ta=Object(n.h)(ze);_e=Object(n.l)(ta,"svelte.config.js"),ta.forEach(n.t),Be=Object(n.l)(Zn," is used to configure our language server, such that the Svelte extension for VSCode and coc knows how to parse our source code and provide proper syntax highlighting and error messages."),Zn.forEach(n.t),Ke=Object(n.k)(t),Qe=Object(n.j)(t,"P",{});var ea=Object(n.h)(Qe);Ue=Object(n.l)(ea,"To enable the preprocessor for the language server, simply export  a "),Xe=Object(n.j)(ea,"CODE",{});var sa=Object(n.h)(Xe);Ye=Object(n.l)(sa,"preprocess"),sa.forEach(n.t),Ze=Object(n.l)(ea," object from "),ts=Object(n.j)(ea,"CODE",{});var na=Object(n.h)(ts);es=Object(n.l)(na,"svelte.config.js"),na.forEach(n.t),ss=Object(n.l)(ea,"."),ea.forEach(n.t),ns=Object(n.k)(t),as=Object(n.j)(t,"PRE",{class:!0}),Object(n.h)(as).forEach(n.t),cs=Object(n.k)(t),os=Object(n.j)(t,"P",{});var aa=Object(n.h)(os);ps=Object(n.l)(aa,"We also export the options object, since we want to use the same configuration for our build step under "),js=Object(n.j)(aa,"CODE",{});var ca=Object(n.h)(js);bs=Object(n.l)(ca,"rollup.config.js"),ca.forEach(n.t),ls=Object(n.l)(aa," or "),Os=Object(n.j)(aa,"CODE",{});var oa=Object(n.h)(Os);rs=Object(n.l)(oa,"webpack.config.js"),oa.forEach(n.t),is=Object(n.l)(aa,"."),aa.forEach(n.t),us=Object(n.k)(t),ds=Object(n.j)(t,"P",{});var pa=Object(n.h)(ds);ks=Object(n.l)(pa,"For Rollup, add "),hs=Object(n.j)(pa,"CODE",{});var ja=Object(n.h)(hs);Ss=Object(n.l)(ja,"preprocess"),ja.forEach(n.t),gs=Object(n.l)(pa," to the "),fs=Object(n.j)(pa,"CODE",{});var ba=Object(n.h)(fs);Cs=Object(n.l)(ba,"svelte"),ba.forEach(n.t),vs=Object(n.l)(pa," object for both the client and server…"),pa.forEach(n.t),ms=Object(n.k)(t),Es=Object(n.j)(t,"PRE",{class:!0}),Object(n.h)(Es).forEach(n.t),Ps=Object(n.k)(t),ws=Object(n.j)(t,"P",{});var la=Object(n.h)(ws);ys=Object(n.l)(la,"For Webpack, add "),Ts=Object(n.j)(la,"CODE",{});var Oa=Object(n.h)(Ts);xs=Object(n.l)(Oa,"preprocess"),Oa.forEach(n.t),Ds=Object(n.l)(la," to the "),Hs=Object(n.j)(la,"CODE",{});var ra=Object(n.h)(Hs);qs=Object(n.l)(ra,"/\\\\.(svelte|html)$/"),ra.forEach(n.t),Is=Object(n.l)(la," rule for both the client and server…"),la.forEach(n.t),Rs=Object(n.k)(t),Ls=Object(n.j)(t,"PRE",{class:!0}),Object(n.h)(Ls).forEach(n.t),Ms=Object(n.k)(t),As=Object(n.j)(t,"H3",{});var ia=Object(n.h)(As);Fs=Object(n.l)(ia,"Adjust npm scripts"),ia.forEach(n.t),Ws=Object(n.k)(t),Ns=Object(n.j)(t,"P",{});var ua=Object(n.h)(Ns);Js=Object(n.l)(ua,"After setting up the configurations, we need to run two compilation steps for our project: one to compile the Svelte code into native Javascript, and one to compile PostCSS and apply our plugins, including Tailwind CSS."),ua.forEach(n.t),Vs=Object(n.k)(t),$s=Object(n.j)(t,"P",{});var da=Object(n.h)($s);Gs=Object(n.l)(da,"To do so, we use "),zs=Object(n.j)(da,"CODE",{});var ka=Object(n.h)(zs);_s=Object(n.l)(ka,"npm-run-all"),ka.forEach(n.t),Bs=Object(n.l)(da," to simultaneously watch for changes and incrementally compile the necessary files for both compilation steps."),da.forEach(n.t),Ks=Object(n.k)(t),Qs=Object(n.j)(t,"P",{});var ha=Object(n.h)(Qs);Us=Object(n.l)(ha,"We also add the PostCSS compilation step to our build step. In "),Xs=Object(n.j)(ha,"CODE",{});var Sa=Object(n.h)(Xs);Ys=Object(n.l)(Sa,"package.json"),Sa.forEach(n.t),Zs=Object(n.l)(ha,"…"),ha.forEach(n.t),tn=Object(n.k)(t),en=Object(n.j)(t,"PRE",{class:!0}),Object(n.h)(en).forEach(n.t),sn=Object(n.k)(t),nn=Object(n.j)(t,"P",{});var ga=Object(n.h)(nn);an=Object(n.l)(ga,"Now you should be able to use Tailwind CSS in your Sapper project!"),ga.forEach(n.t),this.h()},h(){Object(n.f)(h,"class","language-html"),Object(n.f)(H,"class","language-html"),Object(n.f)(nt,"class","language-bash"),Object(n.f)(Vt,"class","language-bash"),Object(n.f)(Bt,"class","language-javascript"),Object(n.f)(pe,"class","language-css"),Object(n.f)(fe,"class","language-javascript"),Object(n.f)(Ve,"class","language-javascript"),Object(n.f)(as,"class","language-javascript"),Object(n.f)(Es,"class","language-javascript"),Object(n.f)(Ls,"class","language-javascript"),Object(n.f)(en,"class","language-json")},m(t,cn){Object(n.C)(t,e,cn),Object(n.d)(e,s),Object(n.C)(t,a,cn),Object(n.C)(t,c,cn),Object(n.d)(c,o),Object(n.C)(t,p,cn),Object(n.C)(t,j,cn),Object(n.d)(j,b),Object(n.C)(t,l,cn),Object(n.C)(t,O,cn),Object(n.d)(O,r),Object(n.C)(t,i,cn),Object(n.C)(t,u,cn),Object(n.d)(u,d),Object(n.C)(t,k,cn),Object(n.C)(t,h,cn),h.innerHTML='<code class="language-html"><span class="token comment">&lt;!-- Parent.svelte --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n  <span class="token selector">.margin-lg</span> <span class="token punctuation">&#123;</span>    // unused class warning\n    <span class="token property">margin</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildCard</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>margin-lg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code>',Object(n.C)(t,S,cn),Object(n.C)(t,g,cn),Object(n.d)(g,f),Object(n.d)(g,C),Object(n.d)(C,v),Object(n.d)(g,m),Object(n.C)(t,E,cn),Object(n.C)(t,P,cn),Object(n.d)(P,w),Object(n.C)(t,y,cn),Object(n.C)(t,T,cn),Object(n.d)(T,x),Object(n.C)(t,D,cn),Object(n.C)(t,H,cn),H.innerHTML='<code class="language-html"><span class="token comment">&lt;!-- Parent.svelte --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildCard</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>m-4<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n\n\n<span class="token comment">&lt;!-- ChildCard.svelte --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">export</span> <span class="token punctuation">&#123;</span> className <span class="token keyword">as</span> <span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// exports a prop \'class\'</span>\n  <span class="token keyword">let</span> className<span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>&#123;className&#125;/</span><span class="token punctuation">></span></span></code>',Object(n.C)(t,q,cn),Object(n.C)(t,I,cn),Object(n.d)(I,R),Object(n.d)(I,L),Object(n.d)(L,M),Object(n.d)(I,A),Object(n.d)(I,F),Object(n.d)(F,W),Object(n.d)(I,N),Object(n.d)(I,J),Object(n.d)(J,V),Object(n.d)(I,$),Object(n.C)(t,G,cn),Object(n.C)(t,z,cn),Object(n.d)(z,_),Object(n.C)(t,B,cn),Object(n.C)(t,K,cn),Object(n.d)(K,Q),Object(n.C)(t,U,cn),Object(n.C)(t,X,cn),Object(n.d)(X,Y),Object(n.C)(t,Z,cn),Object(n.C)(t,tt,cn),Object(n.d)(tt,et),Object(n.C)(t,st,cn),Object(n.C)(t,nt,cn),nt.innerHTML='<code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -D autoprefixer postcss-load-config <span class="token punctuation"></span>\npostcss-cli postcss-import postcss-nested cssnano <span class="token punctuation"></span>\ntailwindcss npm-run-all</code>',Object(n.C)(t,at,cn),Object(n.C)(t,ct,cn),Object(n.d)(ct,ot),Object(n.d)(ot,pt),Object(n.d)(ct,jt),Object(n.d)(ct,bt),Object(n.d)(bt,lt),Object(n.d)(ct,Ot),Object(n.C)(t,rt,cn),Object(n.C)(t,it,cn),Object(n.d)(it,ut),Object(n.d)(ut,dt),Object(n.d)(it,kt),Object(n.C)(t,ht,cn),Object(n.C)(t,St,cn),Object(n.d)(St,gt),Object(n.d)(gt,ft),Object(n.d)(St,Ct),Object(n.d)(St,vt),Object(n.d)(vt,mt),Object(n.d)(St,Et),Object(n.C)(t,Pt,cn),Object(n.C)(t,wt,cn),Object(n.d)(wt,yt),Object(n.d)(yt,Tt),Object(n.d)(wt,xt),Object(n.C)(t,Dt,cn),Object(n.C)(t,Ht,cn),Object(n.d)(Ht,qt),Object(n.d)(qt,It),Object(n.d)(Ht,Rt),Object(n.C)(t,Lt,cn),Object(n.C)(t,Mt,cn),Object(n.d)(Mt,At),Object(n.C)(t,Ft,cn),Object(n.C)(t,Wt,cn),Object(n.d)(Wt,Nt),Object(n.C)(t,Jt,cn),Object(n.C)(t,Vt,cn),Vt.innerHTML='<code class="language-bash">npx tailwind init</code>',Object(n.C)(t,$t,cn),Object(n.C)(t,Gt,cn),Object(n.d)(Gt,zt),Object(n.C)(t,_t,cn),Object(n.C)(t,Bt,cn),Bt.innerHTML='<code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  purge<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/**/*.svelte"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  theme<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n    extend<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  variants<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',Object(n.C)(t,Kt,cn),Object(n.C)(t,Qt,cn),Object(n.d)(Qt,Ut),Object(n.d)(Qt,Xt),Object(n.d)(Xt,Yt),Object(n.d)(Qt,Zt),Object(n.C)(t,te,cn),Object(n.C)(t,ee,cn),Object(n.d)(ee,se),Object(n.d)(ee,ne),Object(n.d)(ne,ae),Object(n.d)(ee,ce),Object(n.C)(t,oe,cn),Object(n.C)(t,pe,cn),pe.innerHTML='<code class="language-css"><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span></code>',Object(n.C)(t,je,cn),Object(n.C)(t,be,cn),Object(n.d)(be,le),Object(n.d)(be,Oe),Object(n.d)(Oe,re),Object(n.C)(t,ie,cn),Object(n.C)(t,ue,cn),Object(n.d)(ue,de),Object(n.d)(ue,ke),Object(n.d)(ke,he),Object(n.d)(ue,Se),Object(n.C)(t,ge,cn),Object(n.C)(t,fe,cn),fe.innerHTML='<code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'postcss-import\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'postcss-nested\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'cssnano\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n      preset<span class="token operator">:</span> <span class="token string">\'default\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',Object(n.C)(t,Ce,cn),Object(n.C)(t,ve,cn),Object(n.d)(ve,me),Object(n.d)(me,Ee),Object(n.d)(ve,Pe),Object(n.d)(ve,we),Object(n.d)(we,ye),Object(n.d)(ve,Te),Object(n.C)(t,xe,cn),Object(n.C)(t,De,cn),Object(n.d)(De,He),Object(n.d)(De,qe),Object(n.d)(qe,Ie),Object(n.d)(De,Re),Object(n.C)(t,Le,cn),Object(n.C)(t,Me,cn),Object(n.d)(Me,Ae),Object(n.d)(Me,Fe),Object(n.d)(Fe,We),Object(n.d)(Me,Ne),Object(n.C)(t,Je,cn),Object(n.C)(t,Ve,cn),Ve.innerHTML='<code class="language-javascript"><span class="token keyword">const</span> sveltePreprocess <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'svelte-preprocess\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> preprocessOptions <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  postcss<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'postcss-import\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'postcss-nested\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',Object(n.C)(t,$e,cn),Object(n.C)(t,Ge,cn),Object(n.d)(Ge,ze),Object(n.d)(ze,_e),Object(n.d)(Ge,Be),Object(n.C)(t,Ke,cn),Object(n.C)(t,Qe,cn),Object(n.d)(Qe,Ue),Object(n.d)(Qe,Xe),Object(n.d)(Xe,Ye),Object(n.d)(Qe,Ze),Object(n.d)(Qe,ts),Object(n.d)(ts,es),Object(n.d)(Qe,ss),Object(n.C)(t,ns,cn),Object(n.C)(t,as,cn),as.innerHTML='<code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  preprocess<span class="token operator">:</span> <span class="token function">sveltePreprocess</span><span class="token punctuation">(</span>preprocessOptions<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  preprocessOptions<span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',Object(n.C)(t,cs,cn),Object(n.C)(t,os,cn),Object(n.d)(os,ps),Object(n.d)(os,js),Object(n.d)(js,bs),Object(n.d)(os,ls),Object(n.d)(os,Os),Object(n.d)(Os,rs),Object(n.d)(os,is),Object(n.C)(t,us,cn),Object(n.C)(t,ds,cn),Object(n.d)(ds,ks),Object(n.d)(ds,hs),Object(n.d)(hs,Ss),Object(n.d)(ds,gs),Object(n.d)(ds,fs),Object(n.d)(fs,Cs),Object(n.d)(ds,vs),Object(n.C)(t,ms,cn),Object(n.C)(t,Es,cn),Es.innerHTML='<code class="language-javascript"><span class="token keyword">const</span> preprocess <span class="token operator">=</span> <span class="token function">sveltePreprocess</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n  sourceMap<span class="token operator">:</span> dev<span class="token punctuation">,</span>       <span class="token comment">// additional preprocess option</span>\n  <span class="token operator">...</span>preprocessOptions<span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nclient<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n  <span class="token operator">...</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token operator">...</span>\n    <span class="token function">svelte</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n      preprocess<span class="token punctuation">,</span>\n      dev<span class="token punctuation">,</span>\n      <span class="token operator">...</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n\nserver<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n  <span class="token operator">...</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token operator">...</span>\n    <span class="token function">svelte</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n      preprocess<span class="token punctuation">,</span>\n      generate<span class="token operator">:</span> <span class="token string">\'ssr\'</span><span class="token punctuation">,</span>\n      <span class="token operator">...</span>\n<span class="token punctuation">&#125;</span></code>',Object(n.C)(t,Ps,cn),Object(n.C)(t,ws,cn),Object(n.d)(ws,ys),Object(n.d)(ws,Ts),Object(n.d)(Ts,xs),Object(n.d)(ws,Ds),Object(n.d)(ws,Hs),Object(n.d)(Hs,qs),Object(n.d)(ws,Is),Object(n.C)(t,Rs,cn),Object(n.C)(t,Ls,cn),Ls.innerHTML='<code class="language-javascript">client<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n  <span class="token operator">...</span>\n    module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n      rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">&#123;</span>\n          test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(svelte|html)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n          use<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n            options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n              preprocess<span class="token punctuation">,</span>\n              <span class="token operator">...</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n\nserver<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n  <span class="token operator">...</span>\n    module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n      rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">&#123;</span>\n          test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(svelte|html)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n          use<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n            options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n              preprocess<span class="token punctuation">,</span>\n              <span class="token operator">...</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code>',Object(n.C)(t,Ms,cn),Object(n.C)(t,As,cn),Object(n.d)(As,Fs),Object(n.C)(t,Ws,cn),Object(n.C)(t,Ns,cn),Object(n.d)(Ns,Js),Object(n.C)(t,Vs,cn),Object(n.C)(t,$s,cn),Object(n.d)($s,Gs),Object(n.d)($s,zs),Object(n.d)(zs,_s),Object(n.d)($s,Bs),Object(n.C)(t,Ks,cn),Object(n.C)(t,Qs,cn),Object(n.d)(Qs,Us),Object(n.d)(Qs,Xs),Object(n.d)(Xs,Ys),Object(n.d)(Qs,Zs),Object(n.C)(t,tn,cn),Object(n.C)(t,en,cn),en.innerHTML='<code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n  <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"run-p watch:css watch:sapper"</span><span class="token punctuation">,</span>\n  <span class="token property">"watch:css"</span><span class="token operator">:</span> <span class="token string">"postcss src/assets/global.css -o static/global.css -w"</span><span class="token punctuation">,</span>\n  <span class="token property">"watch:sapper"</span><span class="token operator">:</span> <span class="token string">"sapper dev"</span><span class="token punctuation">,</span>\n  <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"run-s build:css build:sapper"</span><span class="token punctuation">,</span>\n  <span class="token property">"build:css"</span><span class="token operator">:</span> <span class="token string">"NODE_ENV=production postcss src/assets/global.css -o static/global.css"</span><span class="token punctuation">,</span>\n  <span class="token property">"build:sapper"</span><span class="token operator">:</span> <span class="token string">"NODE_ENV=production sapper build"</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code>',Object(n.C)(t,sn,cn),Object(n.C)(t,nn,cn),Object(n.d)(nn,an)},p:n.G,i:n.G,o:n.G,d(t){t&&Object(n.t)(e),t&&Object(n.t)(a),t&&Object(n.t)(c),t&&Object(n.t)(p),t&&Object(n.t)(j),t&&Object(n.t)(l),t&&Object(n.t)(O),t&&Object(n.t)(i),t&&Object(n.t)(u),t&&Object(n.t)(k),t&&Object(n.t)(h),t&&Object(n.t)(S),t&&Object(n.t)(g),t&&Object(n.t)(E),t&&Object(n.t)(P),t&&Object(n.t)(y),t&&Object(n.t)(T),t&&Object(n.t)(D),t&&Object(n.t)(H),t&&Object(n.t)(q),t&&Object(n.t)(I),t&&Object(n.t)(G),t&&Object(n.t)(z),t&&Object(n.t)(B),t&&Object(n.t)(K),t&&Object(n.t)(U),t&&Object(n.t)(X),t&&Object(n.t)(Z),t&&Object(n.t)(tt),t&&Object(n.t)(st),t&&Object(n.t)(nt),t&&Object(n.t)(at),t&&Object(n.t)(ct),t&&Object(n.t)(rt),t&&Object(n.t)(it),t&&Object(n.t)(ht),t&&Object(n.t)(St),t&&Object(n.t)(Pt),t&&Object(n.t)(wt),t&&Object(n.t)(Dt),t&&Object(n.t)(Ht),t&&Object(n.t)(Lt),t&&Object(n.t)(Mt),t&&Object(n.t)(Ft),t&&Object(n.t)(Wt),t&&Object(n.t)(Jt),t&&Object(n.t)(Vt),t&&Object(n.t)($t),t&&Object(n.t)(Gt),t&&Object(n.t)(_t),t&&Object(n.t)(Bt),t&&Object(n.t)(Kt),t&&Object(n.t)(Qt),t&&Object(n.t)(te),t&&Object(n.t)(ee),t&&Object(n.t)(oe),t&&Object(n.t)(pe),t&&Object(n.t)(je),t&&Object(n.t)(be),t&&Object(n.t)(ie),t&&Object(n.t)(ue),t&&Object(n.t)(ge),t&&Object(n.t)(fe),t&&Object(n.t)(Ce),t&&Object(n.t)(ve),t&&Object(n.t)(xe),t&&Object(n.t)(De),t&&Object(n.t)(Le),t&&Object(n.t)(Me),t&&Object(n.t)(Je),t&&Object(n.t)(Ve),t&&Object(n.t)($e),t&&Object(n.t)(Ge),t&&Object(n.t)(Ke),t&&Object(n.t)(Qe),t&&Object(n.t)(ns),t&&Object(n.t)(as),t&&Object(n.t)(cs),t&&Object(n.t)(os),t&&Object(n.t)(us),t&&Object(n.t)(ds),t&&Object(n.t)(ms),t&&Object(n.t)(Es),t&&Object(n.t)(Ps),t&&Object(n.t)(ws),t&&Object(n.t)(Rs),t&&Object(n.t)(Ls),t&&Object(n.t)(Ms),t&&Object(n.t)(As),t&&Object(n.t)(Ws),t&&Object(n.t)(Ns),t&&Object(n.t)(Vs),t&&Object(n.t)($s),t&&Object(n.t)(Ks),t&&Object(n.t)(Qs),t&&Object(n.t)(tn),t&&Object(n.t)(en),t&&Object(n.t)(sn),t&&Object(n.t)(nn)}}}const c={title:"Svelte, Sapper, and Tailwind CSS"},{title:o}=c;class p extends n.a{constructor(t){super(),Object(n.B)(this,t,null,a,n.L,{})}}e.default=p}}]);